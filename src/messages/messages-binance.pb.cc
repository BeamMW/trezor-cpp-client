// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-binance.proto

#include "messages-binance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_messages_2dbinance_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_2dbinance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto;
namespace hw {
namespace trezor {
namespace messages {
namespace binance {
class BinanceGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceGetAddress> _instance;
} _BinanceGetAddress_default_instance_;
class BinanceAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceAddress> _instance;
} _BinanceAddress_default_instance_;
class BinanceGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceGetPublicKey> _instance;
} _BinanceGetPublicKey_default_instance_;
class BinancePublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinancePublicKey> _instance;
} _BinancePublicKey_default_instance_;
class BinanceSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSignTx> _instance;
} _BinanceSignTx_default_instance_;
class BinanceTxRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTxRequest> _instance;
} _BinanceTxRequest_default_instance_;
class BinanceTransferMsg_BinanceInputOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTransferMsg_BinanceInputOutput> _instance;
} _BinanceTransferMsg_BinanceInputOutput_default_instance_;
class BinanceTransferMsg_BinanceCoinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTransferMsg_BinanceCoin> _instance;
} _BinanceTransferMsg_BinanceCoin_default_instance_;
class BinanceTransferMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceTransferMsg> _instance;
} _BinanceTransferMsg_default_instance_;
class BinanceOrderMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceOrderMsg> _instance;
} _BinanceOrderMsg_default_instance_;
class BinanceCancelMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceCancelMsg> _instance;
} _BinanceCancelMsg_default_instance_;
class BinanceSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BinanceSignedTx> _instance;
} _BinanceSignedTx_default_instance_;
}  // namespace binance
}  // namespace messages
}  // namespace trezor
}  // namespace hw
static void InitDefaultsBinanceGetAddress_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceGetAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceGetAddress_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceGetAddress_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceAddress_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceAddress_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceAddress_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceGetPublicKey_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceGetPublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceGetPublicKey_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceGetPublicKey_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinancePublicKey_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinancePublicKey_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinancePublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinancePublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinancePublicKey_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinancePublicKey_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceSignTx_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceSignTx_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSignTx_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceSignTx_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceTxRequest_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceTxRequest_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceTxRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceTxRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTxRequest_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTxRequest_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceTransferMsg_BinanceInputOutput_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto}, {
      &scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto.base,}};

static void InitDefaultsBinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceTransferMsg_BinanceCoin_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceTransferMsg_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceTransferMsg_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceTransferMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceTransferMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BinanceTransferMsg_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBinanceTransferMsg_messages_2dbinance_2eproto}, {
      &scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto.base,}};

static void InitDefaultsBinanceOrderMsg_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceOrderMsg_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceOrderMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceOrderMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceOrderMsg_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceOrderMsg_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceCancelMsg_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceCancelMsg_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceCancelMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceCancelMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceCancelMsg_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceCancelMsg_messages_2dbinance_2eproto}, {}};

static void InitDefaultsBinanceSignedTx_messages_2dbinance_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::binance::_BinanceSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::binance::BinanceSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::binance::BinanceSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BinanceSignedTx_messages_2dbinance_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBinanceSignedTx_messages_2dbinance_2eproto}, {}};

void InitDefaults_messages_2dbinance_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceGetAddress_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceAddress_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceGetPublicKey_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinancePublicKey_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSignTx_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTxRequest_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceTransferMsg_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceOrderMsg_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceCancelMsg_messages_2dbinance_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BinanceSignedTx_messages_2dbinance_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_messages_2dbinance_2eproto[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_messages_2dbinance_2eproto[3];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_messages_2dbinance_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_messages_2dbinance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetAddress, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetAddress, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceAddress, address_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetPublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetPublicKey, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceGetPublicKey, show_display_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinancePublicKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinancePublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinancePublicKey, public_key_),
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, address_n_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, msg_count_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, account_number_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, chain_id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, memo_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, sequence_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignTx, source_),
  ~0u,
  5,
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTxRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput, address_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput, coins_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin, amount_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin, denom_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg, inputs_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceTransferMsg, outputs_),
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, id_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, ordertype_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, price_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, quantity_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, sender_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, side_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, symbol_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceOrderMsg, timeinforce_),
  0,
  5,
  3,
  4,
  1,
  6,
  2,
  7,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceCancelMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceCancelMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceCancelMsg, refid_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceCancelMsg, sender_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceCancelMsg, symbol_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignedTx, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignedTx, signature_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignedTx, public_key_),
  PROTOBUF_FIELD_OFFSET(::hw::trezor::messages::binance::BinanceSignedTx, json_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::binance::BinanceGetAddress)},
  { 9, 15, sizeof(::hw::trezor::messages::binance::BinanceAddress)},
  { 16, 23, sizeof(::hw::trezor::messages::binance::BinanceGetPublicKey)},
  { 25, 31, sizeof(::hw::trezor::messages::binance::BinancePublicKey)},
  { 32, 44, sizeof(::hw::trezor::messages::binance::BinanceSignTx)},
  { 51, 56, sizeof(::hw::trezor::messages::binance::BinanceTxRequest)},
  { 56, 63, sizeof(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput)},
  { 65, 72, sizeof(::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin)},
  { 74, 81, sizeof(::hw::trezor::messages::binance::BinanceTransferMsg)},
  { 83, 96, sizeof(::hw::trezor::messages::binance::BinanceOrderMsg)},
  { 104, 112, sizeof(::hw::trezor::messages::binance::BinanceCancelMsg)},
  { 115, 123, sizeof(::hw::trezor::messages::binance::BinanceSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinancePublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceTxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceTransferMsg_BinanceInputOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceTransferMsg_BinanceCoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceTransferMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceOrderMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceCancelMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::binance::_BinanceSignedTx_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_messages_2dbinance_2eproto = {
  {}, AddDescriptors_messages_2dbinance_2eproto, "messages-binance.proto", schemas,
  file_default_instances, TableStruct_messages_2dbinance_2eproto::offsets,
  file_level_metadata_messages_2dbinance_2eproto, 12, file_level_enum_descriptors_messages_2dbinance_2eproto, file_level_service_descriptors_messages_2dbinance_2eproto,
};

const char descriptor_table_protodef_messages_2dbinance_2eproto[] =
  "\n\026messages-binance.proto\022\032hw.trezor.mess"
  "ages.binance\"<\n\021BinanceGetAddress\022\021\n\tadd"
  "ress_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\"!\n\016Bi"
  "nanceAddress\022\017\n\007address\030\001 \001(\t\">\n\023Binance"
  "GetPublicKey\022\021\n\taddress_n\030\001 \003(\r\022\024\n\014show_"
  "display\030\002 \001(\010\"&\n\020BinancePublicKey\022\022\n\npub"
  "lic_key\030\001 \001(\014\"\217\001\n\rBinanceSignTx\022\021\n\taddre"
  "ss_n\030\001 \003(\r\022\021\n\tmsg_count\030\002 \001(\r\022\026\n\016account"
  "_number\030\003 \001(\022\022\020\n\010chain_id\030\004 \001(\t\022\014\n\004memo\030"
  "\005 \001(\t\022\020\n\010sequence\030\006 \001(\022\022\016\n\006source\030\007 \001(\022\""
  "\022\n\020BinanceTxRequest\"\333\002\n\022BinanceTransferM"
  "sg\022Q\n\006inputs\030\001 \003(\0132A.hw.trezor.messages."
  "binance.BinanceTransferMsg.BinanceInputO"
  "utput\022R\n\007outputs\030\002 \003(\0132A.hw.trezor.messa"
  "ges.binance.BinanceTransferMsg.BinanceIn"
  "putOutput\032p\n\022BinanceInputOutput\022\017\n\007addre"
  "ss\030\001 \001(\t\022I\n\005coins\030\002 \003(\0132:.hw.trezor.mess"
  "ages.binance.BinanceTransferMsg.BinanceC"
  "oin\032,\n\013BinanceCoin\022\016\n\006amount\030\001 \001(\022\022\r\n\005de"
  "nom\030\002 \001(\t\"\240\004\n\017BinanceOrderMsg\022\n\n\002id\030\001 \001("
  "\t\022O\n\tordertype\030\002 \001(\0162<.hw.trezor.message"
  "s.binance.BinanceOrderMsg.BinanceOrderTy"
  "pe\022\r\n\005price\030\003 \001(\022\022\020\n\010quantity\030\004 \001(\022\022\016\n\006s"
  "ender\030\005 \001(\t\022J\n\004side\030\006 \001(\0162<.hw.trezor.me"
  "ssages.binance.BinanceOrderMsg.BinanceOr"
  "derSide\022\016\n\006symbol\030\007 \001(\t\022S\n\013timeinforce\030\010"
  " \001(\0162>.hw.trezor.messages.binance.Binanc"
  "eOrderMsg.BinanceTimeInForce\"J\n\020BinanceO"
  "rderType\022\016\n\nOT_UNKNOWN\020\000\022\n\n\006MARKET\020\001\022\t\n\005"
  "LIMIT\020\002\022\017\n\013OT_RESERVED\020\003\"7\n\020BinanceOrder"
  "Side\022\020\n\014SIDE_UNKNOWN\020\000\022\007\n\003BUY\020\001\022\010\n\004SELL\020"
  "\002\"I\n\022BinanceTimeInForce\022\017\n\013TIF_UNKNOWN\020\000"
  "\022\007\n\003GTE\020\001\022\020\n\014TIF_RESERVED\020\002\022\007\n\003IOC\020\003\"A\n\020"
  "BinanceCancelMsg\022\r\n\005refid\030\001 \001(\t\022\016\n\006sende"
  "r\030\002 \001(\t\022\016\n\006symbol\030\003 \001(\t\"F\n\017BinanceSigned"
  "Tx\022\021\n\tsignature\030\001 \001(\014\022\022\n\npublic_key\030\002 \001("
  "\014\022\014\n\004json\030\003 \001(\tB;\n#com.satoshilabs.trezo"
  "r.lib.protobufB\024TrezorMessageBinance"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_messages_2dbinance_2eproto = {
  false, InitDefaults_messages_2dbinance_2eproto, 
  descriptor_table_protodef_messages_2dbinance_2eproto,
  "messages-binance.proto", &assign_descriptors_table_messages_2dbinance_2eproto, 1516,
};

void AddDescriptors_messages_2dbinance_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_messages_2dbinance_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2dbinance_2eproto = []() { AddDescriptors_messages_2dbinance_2eproto(); return true; }();
namespace hw {
namespace trezor {
namespace messages {
namespace binance {
const ::google::protobuf::EnumDescriptor* BinanceOrderMsg_BinanceOrderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_messages_2dbinance_2eproto);
  return file_level_enum_descriptors_messages_2dbinance_2eproto[0];
}
bool BinanceOrderMsg_BinanceOrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::OT_UNKNOWN;
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::MARKET;
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::LIMIT;
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::OT_RESERVED;
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::BinanceOrderType_MIN;
const BinanceOrderMsg_BinanceOrderType BinanceOrderMsg::BinanceOrderType_MAX;
const int BinanceOrderMsg::BinanceOrderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BinanceOrderMsg_BinanceOrderSide_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_messages_2dbinance_2eproto);
  return file_level_enum_descriptors_messages_2dbinance_2eproto[1];
}
bool BinanceOrderMsg_BinanceOrderSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinanceOrderMsg_BinanceOrderSide BinanceOrderMsg::SIDE_UNKNOWN;
const BinanceOrderMsg_BinanceOrderSide BinanceOrderMsg::BUY;
const BinanceOrderMsg_BinanceOrderSide BinanceOrderMsg::SELL;
const BinanceOrderMsg_BinanceOrderSide BinanceOrderMsg::BinanceOrderSide_MIN;
const BinanceOrderMsg_BinanceOrderSide BinanceOrderMsg::BinanceOrderSide_MAX;
const int BinanceOrderMsg::BinanceOrderSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BinanceOrderMsg_BinanceTimeInForce_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_messages_2dbinance_2eproto);
  return file_level_enum_descriptors_messages_2dbinance_2eproto[2];
}
bool BinanceOrderMsg_BinanceTimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::TIF_UNKNOWN;
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::GTE;
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::TIF_RESERVED;
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::IOC;
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::BinanceTimeInForce_MIN;
const BinanceOrderMsg_BinanceTimeInForce BinanceOrderMsg::BinanceTimeInForce_MAX;
const int BinanceOrderMsg::BinanceTimeInForce_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BinanceGetAddress::InitAsDefaultInstance() {
}
class BinanceGetAddress::HasBitSetters {
 public:
  static void set_has_show_display(BinanceGetAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceGetAddress::kAddressNFieldNumber;
const int BinanceGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceGetAddress::BinanceGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceGetAddress)
}
BinanceGetAddress::BinanceGetAddress(const BinanceGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceGetAddress)
}

void BinanceGetAddress::SharedCtor() {
  show_display_ = false;
}

BinanceGetAddress::~BinanceGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceGetAddress)
  SharedDtor();
}

void BinanceGetAddress::SharedDtor() {
}

void BinanceGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceGetAddress& BinanceGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceGetAddress_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceGetAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceGetAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceGetAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceGetAddress)
}

::google::protobuf::uint8* BinanceGetAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceGetAddress)
  return target;
}

size_t BinanceGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceGetAddress* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceGetAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceGetAddress)
    MergeFrom(*source);
  }
}

void BinanceGetAddress::MergeFrom(const BinanceGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void BinanceGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceGetAddress::CopyFrom(const BinanceGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceGetAddress::IsInitialized() const {
  return true;
}

void BinanceGetAddress::Swap(BinanceGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceGetAddress::InternalSwap(BinanceGetAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BinanceGetAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceAddress::InitAsDefaultInstance() {
}
class BinanceAddress::HasBitSetters {
 public:
  static void set_has_address(BinanceAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceAddress::BinanceAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceAddress)
}
BinanceAddress::BinanceAddress(const BinanceAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceAddress)
}

void BinanceAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceAddress_messages_2dbinance_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceAddress::~BinanceAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceAddress)
  SharedDtor();
}

void BinanceAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceAddress& BinanceAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceAddress_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceAddress.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceAddress)
}

::google::protobuf::uint8* BinanceAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceAddress)
  return target;
}

size_t BinanceAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceAddress* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceAddress)
    MergeFrom(*source);
  }
}

void BinanceAddress::MergeFrom(const BinanceAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void BinanceAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceAddress::CopyFrom(const BinanceAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceAddress::IsInitialized() const {
  return true;
}

void BinanceAddress::Swap(BinanceAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceAddress::InternalSwap(BinanceAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinanceAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceGetPublicKey::InitAsDefaultInstance() {
}
class BinanceGetPublicKey::HasBitSetters {
 public:
  static void set_has_show_display(BinanceGetPublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceGetPublicKey::kAddressNFieldNumber;
const int BinanceGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceGetPublicKey::BinanceGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceGetPublicKey)
}
BinanceGetPublicKey::BinanceGetPublicKey(const BinanceGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceGetPublicKey)
}

void BinanceGetPublicKey::SharedCtor() {
  show_display_ = false;
}

BinanceGetPublicKey::~BinanceGetPublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceGetPublicKey)
  SharedDtor();
}

void BinanceGetPublicKey::SharedDtor() {
}

void BinanceGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceGetPublicKey& BinanceGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceGetPublicKey_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceGetPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceGetPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool show_display = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show_display(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show_display(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceGetPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceGetPublicKey)
}

::google::protobuf::uint8* BinanceGetPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceGetPublicKey)
  return target;
}

size_t BinanceGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceGetPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceGetPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceGetPublicKey)
    MergeFrom(*source);
  }
}

void BinanceGetPublicKey::MergeFrom(const BinanceGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void BinanceGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceGetPublicKey::CopyFrom(const BinanceGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceGetPublicKey::IsInitialized() const {
  return true;
}

void BinanceGetPublicKey::Swap(BinanceGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceGetPublicKey::InternalSwap(BinanceGetPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
}

::google::protobuf::Metadata BinanceGetPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinancePublicKey::InitAsDefaultInstance() {
}
class BinancePublicKey::HasBitSetters {
 public:
  static void set_has_public_key(BinancePublicKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinancePublicKey::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinancePublicKey::BinancePublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinancePublicKey)
}
BinancePublicKey::BinancePublicKey(const BinancePublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinancePublicKey)
}

void BinancePublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinancePublicKey_messages_2dbinance_2eproto.base);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinancePublicKey::~BinancePublicKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinancePublicKey)
  SharedDtor();
}

void BinancePublicKey::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinancePublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinancePublicKey& BinancePublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinancePublicKey_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinancePublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinancePublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinancePublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinancePublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinancePublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinancePublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinancePublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinancePublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinancePublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinancePublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinancePublicKey)
}

::google::protobuf::uint8* BinancePublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinancePublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinancePublicKey)
  return target;
}

size_t BinancePublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinancePublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes public_key = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinancePublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinancePublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const BinancePublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<BinancePublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinancePublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinancePublicKey)
    MergeFrom(*source);
  }
}

void BinancePublicKey::MergeFrom(const BinancePublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinancePublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _has_bits_[0] |= 0x00000001u;
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void BinancePublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinancePublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinancePublicKey::CopyFrom(const BinancePublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinancePublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinancePublicKey::IsInitialized() const {
  return true;
}

void BinancePublicKey::Swap(BinancePublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinancePublicKey::InternalSwap(BinancePublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinancePublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceSignTx::InitAsDefaultInstance() {
}
class BinanceSignTx::HasBitSetters {
 public:
  static void set_has_msg_count(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_account_number(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_chain_id(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_memo(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_sequence(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_source(BinanceSignTx* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSignTx::kAddressNFieldNumber;
const int BinanceSignTx::kMsgCountFieldNumber;
const int BinanceSignTx::kAccountNumberFieldNumber;
const int BinanceSignTx::kChainIdFieldNumber;
const int BinanceSignTx::kMemoFieldNumber;
const int BinanceSignTx::kSequenceFieldNumber;
const int BinanceSignTx::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSignTx::BinanceSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceSignTx)
}
BinanceSignTx::BinanceSignTx(const BinanceSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chain_id()) {
    chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
  }
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_memo()) {
    memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  ::memcpy(&account_number_, &from.account_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_count_) -
    reinterpret_cast<char*>(&account_number_)) + sizeof(msg_count_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceSignTx)
}

void BinanceSignTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceSignTx_messages_2dbinance_2eproto.base);
  chain_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_count_) -
      reinterpret_cast<char*>(&account_number_)) + sizeof(msg_count_));
}

BinanceSignTx::~BinanceSignTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceSignTx)
  SharedDtor();
}

void BinanceSignTx::SharedDtor() {
  chain_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSignTx& BinanceSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceSignTx_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      chain_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      memo_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&account_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msg_count_) -
        reinterpret_cast<char*>(&account_number_)) + sizeof(msg_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceSignTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceSignTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_address_n(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_address_n();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 msg_count = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_msg_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint64 account_number = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_account_number(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string chain_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceSignTx.chain_id");
        object = msg->mutable_chain_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string memo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceSignTx.memo");
        object = msg->mutable_memo();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional sint64 sequence = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_sequence(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint64 source = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_source(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msg_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_msg_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 account_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_account_number(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &account_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string chain_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chain_id().data(), static_cast<int>(this->chain_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceSignTx.chain_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string memo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->memo().data(), static_cast<int>(this->memo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceSignTx.memo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 sequence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_sequence(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_source(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceSignTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_count = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msg_count(), output);
  }

  // optional sint64 account_number = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->account_number(), output);
  }

  // optional string chain_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignTx.chain_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chain_id(), output);
  }

  // optional string memo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignTx.memo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->memo(), output);
  }

  // optional sint64 sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(6, this->sequence(), output);
  }

  // optional sint64 source = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceSignTx)
}

::google::protobuf::uint8* BinanceSignTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_count = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_count(), target);
  }

  // optional sint64 account_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->account_number(), target);
  }

  // optional string chain_id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chain_id().data(), static_cast<int>(this->chain_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignTx.chain_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chain_id(), target);
  }

  // optional string memo = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->memo().data(), static_cast<int>(this->memo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignTx.memo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->memo(), target);
  }

  // optional sint64 sequence = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(6, this->sequence(), target);
  }

  // optional sint64 source = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceSignTx)
  return target;
}

size_t BinanceSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string chain_id = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chain_id());
    }

    // optional string memo = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->memo());
    }

    // optional sint64 account_number = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->account_number());
    }

    // optional sint64 sequence = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sequence());
    }

    // optional sint64 source = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->source());
    }

    // optional uint32 msg_count = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceSignTx* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceSignTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceSignTx)
    MergeFrom(*source);
  }
}

void BinanceSignTx::MergeFrom(const BinanceSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      chain_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      memo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memo_);
    }
    if (cached_has_bits & 0x00000004u) {
      account_number_ = from.account_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000020u) {
      msg_count_ = from.msg_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinanceSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceSignTx::CopyFrom(const BinanceSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSignTx::IsInitialized() const {
  return true;
}

void BinanceSignTx::Swap(BinanceSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSignTx::InternalSwap(BinanceSignTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  address_n_.InternalSwap(&other->address_n_);
  chain_id_.Swap(&other->chain_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memo_.Swap(&other->memo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_number_, other->account_number_);
  swap(sequence_, other->sequence_);
  swap(source_, other->source_);
  swap(msg_count_, other->msg_count_);
}

::google::protobuf::Metadata BinanceSignTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceTxRequest::InitAsDefaultInstance() {
}
class BinanceTxRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTxRequest::BinanceTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceTxRequest)
}
BinanceTxRequest::BinanceTxRequest(const BinanceTxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceTxRequest)
}

void BinanceTxRequest::SharedCtor() {
}

BinanceTxRequest::~BinanceTxRequest() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceTxRequest)
  SharedDtor();
}

void BinanceTxRequest::SharedDtor() {
}

void BinanceTxRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTxRequest& BinanceTxRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceTxRequest_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceTxRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceTxRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceTxRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceTxRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceTxRequest)
}

::google::protobuf::uint8* BinanceTxRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceTxRequest)
  return target;
}

size_t BinanceTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceTxRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceTxRequest* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceTxRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceTxRequest)
    MergeFrom(*source);
  }
}

void BinanceTxRequest::MergeFrom(const BinanceTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void BinanceTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceTxRequest::CopyFrom(const BinanceTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTxRequest::IsInitialized() const {
  return true;
}

void BinanceTxRequest::Swap(BinanceTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTxRequest::InternalSwap(BinanceTxRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata BinanceTxRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceTransferMsg_BinanceInputOutput::InitAsDefaultInstance() {
}
class BinanceTransferMsg_BinanceInputOutput::HasBitSetters {
 public:
  static void set_has_address(BinanceTransferMsg_BinanceInputOutput* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTransferMsg_BinanceInputOutput::kAddressFieldNumber;
const int BinanceTransferMsg_BinanceInputOutput::kCoinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTransferMsg_BinanceInputOutput::BinanceTransferMsg_BinanceInputOutput()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
}
BinanceTransferMsg_BinanceInputOutput::BinanceTransferMsg_BinanceInputOutput(const BinanceTransferMsg_BinanceInputOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      coins_(from.coins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
}

void BinanceTransferMsg_BinanceInputOutput::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto.base);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceTransferMsg_BinanceInputOutput::~BinanceTransferMsg_BinanceInputOutput() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  SharedDtor();
}

void BinanceTransferMsg_BinanceInputOutput::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTransferMsg_BinanceInputOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTransferMsg_BinanceInputOutput& BinanceTransferMsg_BinanceInputOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceTransferMsg_BinanceInputOutput_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceTransferMsg_BinanceInputOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coins_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceTransferMsg_BinanceInputOutput::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceTransferMsg_BinanceInputOutput*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput.address");
        object = msg->mutable_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin::_InternalParse;
          object = msg->add_coins();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceTransferMsg_BinanceInputOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_coins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceTransferMsg_BinanceInputOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->coins(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
}

::google::protobuf::uint8* BinanceTransferMsg_BinanceInputOutput::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->coins_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->coins(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  return target;
}

size_t BinanceTransferMsg_BinanceInputOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin coins = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->coins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->coins(static_cast<int>(i)));
    }
  }

  // optional string address = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTransferMsg_BinanceInputOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceTransferMsg_BinanceInputOutput* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceTransferMsg_BinanceInputOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
    MergeFrom(*source);
  }
}

void BinanceTransferMsg_BinanceInputOutput::MergeFrom(const BinanceTransferMsg_BinanceInputOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coins_.MergeFrom(from.coins_);
  if (from.has_address()) {
    _has_bits_[0] |= 0x00000001u;
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void BinanceTransferMsg_BinanceInputOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceTransferMsg_BinanceInputOutput::CopyFrom(const BinanceTransferMsg_BinanceInputOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTransferMsg_BinanceInputOutput::IsInitialized() const {
  return true;
}

void BinanceTransferMsg_BinanceInputOutput::Swap(BinanceTransferMsg_BinanceInputOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTransferMsg_BinanceInputOutput::InternalSwap(BinanceTransferMsg_BinanceInputOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&coins_)->InternalSwap(CastToBase(&other->coins_));
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinanceTransferMsg_BinanceInputOutput::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceTransferMsg_BinanceCoin::InitAsDefaultInstance() {
}
class BinanceTransferMsg_BinanceCoin::HasBitSetters {
 public:
  static void set_has_amount(BinanceTransferMsg_BinanceCoin* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_denom(BinanceTransferMsg_BinanceCoin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTransferMsg_BinanceCoin::kAmountFieldNumber;
const int BinanceTransferMsg_BinanceCoin::kDenomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTransferMsg_BinanceCoin::BinanceTransferMsg_BinanceCoin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
}
BinanceTransferMsg_BinanceCoin::BinanceTransferMsg_BinanceCoin(const BinanceTransferMsg_BinanceCoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_denom()) {
    denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
}

void BinanceTransferMsg_BinanceCoin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto.base);
  denom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = PROTOBUF_LONGLONG(0);
}

BinanceTransferMsg_BinanceCoin::~BinanceTransferMsg_BinanceCoin() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  SharedDtor();
}

void BinanceTransferMsg_BinanceCoin::SharedDtor() {
  denom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceTransferMsg_BinanceCoin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTransferMsg_BinanceCoin& BinanceTransferMsg_BinanceCoin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceTransferMsg_BinanceCoin_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceTransferMsg_BinanceCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    denom_.ClearNonDefaultToEmptyNoArena();
  }
  amount_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceTransferMsg_BinanceCoin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceTransferMsg_BinanceCoin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional sint64 amount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_amount(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string denom = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin.denom");
        object = msg->mutable_denom();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceTransferMsg_BinanceCoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_amount(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string denom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_denom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->denom().data(), static_cast<int>(this->denom().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin.denom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceTransferMsg_BinanceCoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->amount(), output);
  }

  // optional string denom = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->denom().data(), static_cast<int>(this->denom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin.denom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->denom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
}

::google::protobuf::uint8* BinanceTransferMsg_BinanceCoin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->amount(), target);
  }

  // optional string denom = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->denom().data(), static_cast<int>(this->denom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin.denom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->denom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  return target;
}

size_t BinanceTransferMsg_BinanceCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string denom = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->denom());
    }

    // optional sint64 amount = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTransferMsg_BinanceCoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceTransferMsg_BinanceCoin* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceTransferMsg_BinanceCoin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
    MergeFrom(*source);
  }
}

void BinanceTransferMsg_BinanceCoin::MergeFrom(const BinanceTransferMsg_BinanceCoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      denom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.denom_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinanceTransferMsg_BinanceCoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceTransferMsg_BinanceCoin::CopyFrom(const BinanceTransferMsg_BinanceCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg.BinanceCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTransferMsg_BinanceCoin::IsInitialized() const {
  return true;
}

void BinanceTransferMsg_BinanceCoin::Swap(BinanceTransferMsg_BinanceCoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTransferMsg_BinanceCoin::InternalSwap(BinanceTransferMsg_BinanceCoin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  denom_.Swap(&other->denom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::google::protobuf::Metadata BinanceTransferMsg_BinanceCoin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceTransferMsg::InitAsDefaultInstance() {
}
class BinanceTransferMsg::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceTransferMsg::kInputsFieldNumber;
const int BinanceTransferMsg::kOutputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceTransferMsg::BinanceTransferMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceTransferMsg)
}
BinanceTransferMsg::BinanceTransferMsg(const BinanceTransferMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceTransferMsg)
}

void BinanceTransferMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceTransferMsg_messages_2dbinance_2eproto.base);
}

BinanceTransferMsg::~BinanceTransferMsg() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceTransferMsg)
  SharedDtor();
}

void BinanceTransferMsg::SharedDtor() {
}

void BinanceTransferMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceTransferMsg& BinanceTransferMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceTransferMsg_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceTransferMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceTransferMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceTransferMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceTransferMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput::_InternalParse;
          object = msg->add_inputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput::_InternalParse;
          object = msg->add_outputs();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceTransferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceTransferMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceTransferMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceTransferMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceTransferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceTransferMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceTransferMsg)
}

::google::protobuf::uint8* BinanceTransferMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceTransferMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->inputs(static_cast<int>(i)), target);
  }

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceTransferMsg)
  return target;
}

size_t BinanceTransferMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceTransferMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput inputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .hw.trezor.messages.binance.BinanceTransferMsg.BinanceInputOutput outputs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceTransferMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceTransferMsg* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceTransferMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceTransferMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceTransferMsg)
    MergeFrom(*source);
  }
}

void BinanceTransferMsg::MergeFrom(const BinanceTransferMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceTransferMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
}

void BinanceTransferMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceTransferMsg::CopyFrom(const BinanceTransferMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceTransferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceTransferMsg::IsInitialized() const {
  return true;
}

void BinanceTransferMsg::Swap(BinanceTransferMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceTransferMsg::InternalSwap(BinanceTransferMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
}

::google::protobuf::Metadata BinanceTransferMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceOrderMsg::InitAsDefaultInstance() {
}
class BinanceOrderMsg::HasBitSetters {
 public:
  static void set_has_id(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_ordertype(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_price(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_quantity(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_sender(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_side(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_symbol(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_timeinforce(BinanceOrderMsg* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceOrderMsg::kIdFieldNumber;
const int BinanceOrderMsg::kOrdertypeFieldNumber;
const int BinanceOrderMsg::kPriceFieldNumber;
const int BinanceOrderMsg::kQuantityFieldNumber;
const int BinanceOrderMsg::kSenderFieldNumber;
const int BinanceOrderMsg::kSideFieldNumber;
const int BinanceOrderMsg::kSymbolFieldNumber;
const int BinanceOrderMsg::kTimeinforceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceOrderMsg::BinanceOrderMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceOrderMsg)
}
BinanceOrderMsg::BinanceOrderMsg(const BinanceOrderMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeinforce_) -
    reinterpret_cast<char*>(&price_)) + sizeof(timeinforce_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceOrderMsg)
}

void BinanceOrderMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceOrderMsg_messages_2dbinance_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeinforce_) -
      reinterpret_cast<char*>(&price_)) + sizeof(timeinforce_));
}

BinanceOrderMsg::~BinanceOrderMsg() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceOrderMsg)
  SharedDtor();
}

void BinanceOrderMsg::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceOrderMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceOrderMsg& BinanceOrderMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceOrderMsg_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceOrderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceOrderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sender_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeinforce_) -
        reinterpret_cast<char*>(&price_)) + sizeof(timeinforce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceOrderMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceOrderMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceOrderMsg.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_ordertype(static_cast<::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint64 price = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_price(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional sint64 quantity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarintZigZag64(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string sender = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceOrderMsg.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderSide_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_side(static_cast<::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderSide>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string symbol = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceOrderMsg.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::hw::trezor::messages::binance::BinanceOrderMsg_BinanceTimeInForce_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_timeinforce(static_cast<::hw::trezor::messages::binance::BinanceOrderMsg_BinanceTimeInForce>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceOrderMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceOrderMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceOrderMsg.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderType_IsValid(value)) {
            set_ordertype(static_cast< ::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 price = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_price(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceOrderMsg.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderSide_IsValid(value)) {
            set_side(static_cast< ::hw::trezor::messages::binance::BinanceOrderMsg_BinanceOrderSide >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string symbol = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceOrderMsg.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hw::trezor::messages::binance::BinanceOrderMsg_BinanceTimeInForce_IsValid(value)) {
            set_timeinforce(static_cast< ::hw::trezor::messages::binance::BinanceOrderMsg_BinanceTimeInForce >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceOrderMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceOrderMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceOrderMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceOrderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ordertype(), output);
  }

  // optional sint64 price = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->price(), output);
  }

  // optional sint64 quantity = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->quantity(), output);
  }

  // optional string sender = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sender(), output);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->side(), output);
  }

  // optional string symbol = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->symbol(), output);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->timeinforce(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceOrderMsg)
}

::google::protobuf::uint8* BinanceOrderMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceOrderMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ordertype(), target);
  }

  // optional sint64 price = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->price(), target);
  }

  // optional sint64 quantity = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->quantity(), target);
  }

  // optional string sender = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sender(), target);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->side(), target);
  }

  // optional string symbol = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceOrderMsg.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol(), target);
  }

  // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->timeinforce(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceOrderMsg)
  return target;
}

size_t BinanceOrderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceOrderMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string sender = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string symbol = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional sint64 price = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->price());
    }

    // optional sint64 quantity = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->quantity());
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderType ordertype = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ordertype());
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceOrderSide side = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .hw.trezor.messages.binance.BinanceOrderMsg.BinanceTimeInForce timeinforce = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->timeinforce());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceOrderMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceOrderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceOrderMsg* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceOrderMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceOrderMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceOrderMsg)
    MergeFrom(*source);
  }
}

void BinanceOrderMsg::MergeFrom(const BinanceOrderMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceOrderMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000008u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000020u) {
      ordertype_ = from.ordertype_;
    }
    if (cached_has_bits & 0x00000040u) {
      side_ = from.side_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeinforce_ = from.timeinforce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinanceOrderMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceOrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceOrderMsg::CopyFrom(const BinanceOrderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceOrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceOrderMsg::IsInitialized() const {
  return true;
}

void BinanceOrderMsg::Swap(BinanceOrderMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceOrderMsg::InternalSwap(BinanceOrderMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(quantity_, other->quantity_);
  swap(ordertype_, other->ordertype_);
  swap(side_, other->side_);
  swap(timeinforce_, other->timeinforce_);
}

::google::protobuf::Metadata BinanceOrderMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceCancelMsg::InitAsDefaultInstance() {
}
class BinanceCancelMsg::HasBitSetters {
 public:
  static void set_has_refid(BinanceCancelMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sender(BinanceCancelMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_symbol(BinanceCancelMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceCancelMsg::kRefidFieldNumber;
const int BinanceCancelMsg::kSenderFieldNumber;
const int BinanceCancelMsg::kSymbolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceCancelMsg::BinanceCancelMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceCancelMsg)
}
BinanceCancelMsg::BinanceCancelMsg(const BinanceCancelMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  refid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_refid()) {
    refid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refid_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender()) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceCancelMsg)
}

void BinanceCancelMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceCancelMsg_messages_2dbinance_2eproto.base);
  refid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceCancelMsg::~BinanceCancelMsg() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceCancelMsg)
  SharedDtor();
}

void BinanceCancelMsg::SharedDtor() {
  refid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceCancelMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceCancelMsg& BinanceCancelMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceCancelMsg_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceCancelMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceCancelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      refid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sender_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      symbol_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceCancelMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceCancelMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string refid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceCancelMsg.refid");
        object = msg->mutable_refid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string sender = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceCancelMsg.sender");
        object = msg->mutable_sender();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string symbol = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceCancelMsg.symbol");
        object = msg->mutable_symbol();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceCancelMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceCancelMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string refid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refid().data(), static_cast<int>(this->refid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceCancelMsg.refid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceCancelMsg.sender");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceCancelMsg.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceCancelMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceCancelMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceCancelMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceCancelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string refid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refid().data(), static_cast<int>(this->refid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.refid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->refid(), output);
  }

  // optional string sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sender(), output);
  }

  // optional string symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceCancelMsg)
}

::google::protobuf::uint8* BinanceCancelMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceCancelMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string refid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refid().data(), static_cast<int>(this->refid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.refid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->refid(), target);
  }

  // optional string sender = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sender(), target);
  }

  // optional string symbol = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceCancelMsg.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceCancelMsg)
  return target;
}

size_t BinanceCancelMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceCancelMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string refid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refid());
    }

    // optional string sender = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

    // optional string symbol = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceCancelMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceCancelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceCancelMsg* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceCancelMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceCancelMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceCancelMsg)
    MergeFrom(*source);
  }
}

void BinanceCancelMsg::MergeFrom(const BinanceCancelMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceCancelMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      refid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.refid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
  }
}

void BinanceCancelMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceCancelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceCancelMsg::CopyFrom(const BinanceCancelMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceCancelMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceCancelMsg::IsInitialized() const {
  return true;
}

void BinanceCancelMsg::Swap(BinanceCancelMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceCancelMsg::InternalSwap(BinanceCancelMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  refid_.Swap(&other->refid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinanceCancelMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BinanceSignedTx::InitAsDefaultInstance() {
}
class BinanceSignedTx::HasBitSetters {
 public:
  static void set_has_signature(BinanceSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_public_key(BinanceSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_json(BinanceSignedTx* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BinanceSignedTx::kSignatureFieldNumber;
const int BinanceSignedTx::kPublicKeyFieldNumber;
const int BinanceSignedTx::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BinanceSignedTx::BinanceSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.binance.BinanceSignedTx)
}
BinanceSignedTx::BinanceSignedTx(const BinanceSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json()) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.binance.BinanceSignedTx)
}

void BinanceSignedTx::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BinanceSignedTx_messages_2dbinance_2eproto.base);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BinanceSignedTx::~BinanceSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.binance.BinanceSignedTx)
  SharedDtor();
}

void BinanceSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BinanceSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinanceSignedTx& BinanceSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BinanceSignedTx_messages_2dbinance_2eproto.base);
  return *internal_default_instance();
}


void BinanceSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.binance.BinanceSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      json_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinanceSignedTx::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BinanceSignedTx*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_signature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes public_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_public_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string json = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("hw.trezor.messages.binance.BinanceSignedTx.json");
        object = msg->mutable_json();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinanceSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.binance.BinanceSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string json = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json().data(), static_cast<int>(this->json().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.binance.BinanceSignedTx.json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.binance.BinanceSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.binance.BinanceSignedTx)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinanceSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.binance.BinanceSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // optional string json = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignedTx.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.binance.BinanceSignedTx)
}

::google::protobuf::uint8* BinanceSignedTx::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.binance.BinanceSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // optional string json = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), static_cast<int>(this->json().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.binance.BinanceSignedTx.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.binance.BinanceSignedTx)
  return target;
}

size_t BinanceSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.binance.BinanceSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes signature = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes public_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional string json = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->json());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinanceSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.binance.BinanceSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const BinanceSignedTx* source =
      ::google::protobuf::DynamicCastToGenerated<BinanceSignedTx>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.binance.BinanceSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.binance.BinanceSignedTx)
    MergeFrom(*source);
  }
}

void BinanceSignedTx::MergeFrom(const BinanceSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.binance.BinanceSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
    }
  }
}

void BinanceSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.binance.BinanceSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinanceSignedTx::CopyFrom(const BinanceSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.binance.BinanceSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinanceSignedTx::IsInitialized() const {
  return true;
}

void BinanceSignedTx::Swap(BinanceSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BinanceSignedTx::InternalSwap(BinanceSignedTx* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  json_.Swap(&other->json_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata BinanceSignedTx::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_messages_2dbinance_2eproto);
  return ::file_level_metadata_messages_2dbinance_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace binance
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceGetAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceGetAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceGetPublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceGetPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinancePublicKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinancePublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinancePublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceSignTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceSignTx >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceTxRequest* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceTxRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceInputOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceTransferMsg_BinanceCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceTransferMsg* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceTransferMsg >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceTransferMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceOrderMsg* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceOrderMsg >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceOrderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceCancelMsg* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceCancelMsg >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceCancelMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hw::trezor::messages::binance::BinanceSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::binance::BinanceSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::binance::BinanceSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
