// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-crypto.proto

#include "messages-crypto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2dcrypto_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dcrypto_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IdentityType;
}  // namespace protobuf_messages_2dcrypto_2eproto
namespace hw {
namespace trezor {
namespace messages {
namespace crypto {
class CipherKeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CipherKeyValue>
      _instance;
} _CipherKeyValue_default_instance_;
class CipheredKeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CipheredKeyValue>
      _instance;
} _CipheredKeyValue_default_instance_;
class IdentityTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IdentityType>
      _instance;
} _IdentityType_default_instance_;
class SignIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignIdentity>
      _instance;
} _SignIdentity_default_instance_;
class SignedIdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignedIdentity>
      _instance;
} _SignedIdentity_default_instance_;
class GetECDHSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetECDHSessionKey>
      _instance;
} _GetECDHSessionKey_default_instance_;
class ECDHSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ECDHSessionKey>
      _instance;
} _ECDHSessionKey_default_instance_;
class CosiCommitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CosiCommit>
      _instance;
} _CosiCommit_default_instance_;
class CosiCommitmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CosiCommitment>
      _instance;
} _CosiCommitment_default_instance_;
class CosiSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CosiSign>
      _instance;
} _CosiSign_default_instance_;
class CosiSignatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CosiSignature>
      _instance;
} _CosiSignature_default_instance_;
}  // namespace crypto
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace protobuf_messages_2dcrypto_2eproto {
static void InitDefaultsCipherKeyValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CipherKeyValue_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CipherKeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CipherKeyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CipherKeyValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCipherKeyValue}, {}};

static void InitDefaultsCipheredKeyValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CipheredKeyValue_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CipheredKeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CipheredKeyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CipheredKeyValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCipheredKeyValue}, {}};

static void InitDefaultsIdentityType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_IdentityType_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::IdentityType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::IdentityType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IdentityType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIdentityType}, {}};

static void InitDefaultsSignIdentity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_SignIdentity_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::SignIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::SignIdentity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SignIdentity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSignIdentity}, {
      &protobuf_messages_2dcrypto_2eproto::scc_info_IdentityType.base,}};

static void InitDefaultsSignedIdentity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_SignedIdentity_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::SignedIdentity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::SignedIdentity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignedIdentity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignedIdentity}, {}};

static void InitDefaultsGetECDHSessionKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_GetECDHSessionKey_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::GetECDHSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::GetECDHSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetECDHSessionKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetECDHSessionKey}, {
      &protobuf_messages_2dcrypto_2eproto::scc_info_IdentityType.base,}};

static void InitDefaultsECDHSessionKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_ECDHSessionKey_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::ECDHSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::ECDHSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ECDHSessionKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsECDHSessionKey}, {}};

static void InitDefaultsCosiCommit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CosiCommit_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CosiCommit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CosiCommit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CosiCommit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCosiCommit}, {}};

static void InitDefaultsCosiCommitment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CosiCommitment_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CosiCommitment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CosiCommitment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CosiCommitment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCosiCommitment}, {}};

static void InitDefaultsCosiSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CosiSign_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CosiSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CosiSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CosiSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCosiSign}, {}};

static void InitDefaultsCosiSignature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::crypto::_CosiSignature_default_instance_;
    new (ptr) ::hw::trezor::messages::crypto::CosiSignature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::crypto::CosiSignature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CosiSignature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCosiSignature}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CipherKeyValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CipheredKeyValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IdentityType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignIdentity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignedIdentity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetECDHSessionKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ECDHSessionKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CosiCommit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CosiCommitment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CosiSign.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CosiSignature.base);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, encrypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, ask_on_encrypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, ask_on_decrypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipherKeyValue, iv_),
  ~0u,
  0,
  1,
  3,
  4,
  5,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipheredKeyValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipheredKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CipheredKeyValue, value_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, proto_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::IdentityType, index_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, challenge_hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, challenge_visual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignIdentity, ecdsa_curve_name_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignedIdentity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignedIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignedIdentity, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignedIdentity, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::SignedIdentity, signature_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::GetECDHSessionKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::GetECDHSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::GetECDHSessionKey, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::GetECDHSessionKey, peer_public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::GetECDHSessionKey, ecdsa_curve_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::ECDHSessionKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::ECDHSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::ECDHSessionKey, session_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommit, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommit, data_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommitment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommitment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommitment, commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiCommitment, pubkey_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, global_commitment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSign, global_pubkey_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSignature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::crypto::CosiSignature, signature_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::hw::trezor::messages::crypto::CipherKeyValue)},
  { 19, 25, sizeof(::hw::trezor::messages::crypto::CipheredKeyValue)},
  { 26, 37, sizeof(::hw::trezor::messages::crypto::IdentityType)},
  { 43, 52, sizeof(::hw::trezor::messages::crypto::SignIdentity)},
  { 56, 64, sizeof(::hw::trezor::messages::crypto::SignedIdentity)},
  { 67, 75, sizeof(::hw::trezor::messages::crypto::GetECDHSessionKey)},
  { 78, 84, sizeof(::hw::trezor::messages::crypto::ECDHSessionKey)},
  { 85, 92, sizeof(::hw::trezor::messages::crypto::CosiCommit)},
  { 94, 101, sizeof(::hw::trezor::messages::crypto::CosiCommitment)},
  { 103, 112, sizeof(::hw::trezor::messages::crypto::CosiSign)},
  { 116, 122, sizeof(::hw::trezor::messages::crypto::CosiSignature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CipherKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CipheredKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_IdentityType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_SignIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_SignedIdentity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_GetECDHSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_ECDHSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CosiCommit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CosiCommitment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CosiSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::crypto::_CosiSignature_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages-crypto.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025messages-crypto.proto\022\031hw.trezor.messa"
      "ges.crypto\"\214\001\n\016CipherKeyValue\022\021\n\taddress"
      "_n\030\001 \003(\r\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\014\022\017\n\007"
      "encrypt\030\004 \001(\010\022\026\n\016ask_on_encrypt\030\005 \001(\010\022\026\n"
      "\016ask_on_decrypt\030\006 \001(\010\022\n\n\002iv\030\007 \001(\014\"!\n\020Cip"
      "heredKeyValue\022\r\n\005value\030\001 \001(\014\"g\n\014Identity"
      "Type\022\r\n\005proto\030\001 \001(\t\022\014\n\004user\030\002 \001(\t\022\014\n\004hos"
      "t\030\003 \001(\t\022\014\n\004port\030\004 \001(\t\022\014\n\004path\030\005 \001(\t\022\020\n\005i"
      "ndex\030\006 \001(\r:\0010\"\227\001\n\014SignIdentity\0229\n\010identi"
      "ty\030\001 \001(\0132\'.hw.trezor.messages.crypto.Ide"
      "ntityType\022\030\n\020challenge_hidden\030\002 \001(\014\022\030\n\020c"
      "hallenge_visual\030\003 \001(\t\022\030\n\020ecdsa_curve_nam"
      "e\030\004 \001(\t\"H\n\016SignedIdentity\022\017\n\007address\030\001 \001"
      "(\t\022\022\n\npublic_key\030\002 \001(\014\022\021\n\tsignature\030\003 \001("
      "\014\"\201\001\n\021GetECDHSessionKey\0229\n\010identity\030\001 \001("
      "\0132\'.hw.trezor.messages.crypto.IdentityTy"
      "pe\022\027\n\017peer_public_key\030\002 \001(\014\022\030\n\020ecdsa_cur"
      "ve_name\030\003 \001(\t\"%\n\016ECDHSessionKey\022\023\n\013sessi"
      "on_key\030\001 \001(\014\"-\n\nCosiCommit\022\021\n\taddress_n\030"
      "\001 \003(\r\022\014\n\004data\030\002 \001(\014\"4\n\016CosiCommitment\022\022\n"
      "\ncommitment\030\001 \001(\014\022\016\n\006pubkey\030\002 \001(\014\"]\n\010Cos"
      "iSign\022\021\n\taddress_n\030\001 \003(\r\022\014\n\004data\030\002 \001(\014\022\031"
      "\n\021global_commitment\030\003 \001(\014\022\025\n\rglobal_pubk"
      "ey\030\004 \001(\014\"\"\n\rCosiSignature\022\021\n\tsignature\030\001"
      " \001(\014B:\n#com.satoshilabs.trezor.lib.proto"
      "bufB\023TrezorMessageCrypto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-crypto.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2dcrypto_2eproto
namespace hw {
namespace trezor {
namespace messages {
namespace crypto {

// ===================================================================

void CipherKeyValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CipherKeyValue::kAddressNFieldNumber;
const int CipherKeyValue::kKeyFieldNumber;
const int CipherKeyValue::kValueFieldNumber;
const int CipherKeyValue::kEncryptFieldNumber;
const int CipherKeyValue::kAskOnEncryptFieldNumber;
const int CipherKeyValue::kAskOnDecryptFieldNumber;
const int CipherKeyValue::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CipherKeyValue::CipherKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CipherKeyValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CipherKeyValue)
}
CipherKeyValue::CipherKeyValue(const CipherKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_iv()) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  ::memcpy(&encrypt_, &from.encrypt_,
    static_cast<size_t>(reinterpret_cast<char*>(&ask_on_decrypt_) -
    reinterpret_cast<char*>(&encrypt_)) + sizeof(ask_on_decrypt_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CipherKeyValue)
}

void CipherKeyValue::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encrypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_on_decrypt_) -
      reinterpret_cast<char*>(&encrypt_)) + sizeof(ask_on_decrypt_));
}

CipherKeyValue::~CipherKeyValue() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CipherKeyValue)
  SharedDtor();
}

void CipherKeyValue::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CipherKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CipherKeyValue::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CipherKeyValue& CipherKeyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CipherKeyValue.base);
  return *internal_default_instance();
}


void CipherKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CipherKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      iv_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&encrypt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ask_on_decrypt_) -
      reinterpret_cast<char*>(&encrypt_)) + sizeof(ask_on_decrypt_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CipherKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CipherKeyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.CipherKeyValue.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_encrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ask_on_encrypt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ask_on_encrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ask_on_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ask_on_decrypt = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ask_on_decrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ask_on_decrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes iv = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CipherKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CipherKeyValue)
  return false;
#undef DO_
}

void CipherKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CipherKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.CipherKeyValue.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // optional bool encrypt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->encrypt(), output);
  }

  // optional bool ask_on_encrypt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ask_on_encrypt(), output);
  }

  // optional bool ask_on_decrypt = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ask_on_decrypt(), output);
  }

  // optional bytes iv = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->iv(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CipherKeyValue)
}

::google::protobuf::uint8* CipherKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CipherKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.CipherKeyValue.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional bool encrypt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->encrypt(), target);
  }

  // optional bool ask_on_encrypt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ask_on_encrypt(), target);
  }

  // optional bool ask_on_decrypt = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ask_on_decrypt(), target);
  }

  // optional bytes iv = 7;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->iv(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CipherKeyValue)
  return target;
}

size_t CipherKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CipherKeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional bytes iv = 7;
    if (has_iv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // optional bool encrypt = 4;
    if (has_encrypt()) {
      total_size += 1 + 1;
    }

    // optional bool ask_on_encrypt = 5;
    if (has_ask_on_encrypt()) {
      total_size += 1 + 1;
    }

    // optional bool ask_on_decrypt = 6;
    if (has_ask_on_decrypt()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CipherKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CipherKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CipherKeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CipherKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CipherKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CipherKeyValue)
    MergeFrom(*source);
  }
}

void CipherKeyValue::MergeFrom(const CipherKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CipherKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_iv();
      iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
    }
    if (cached_has_bits & 0x00000008u) {
      encrypt_ = from.encrypt_;
    }
    if (cached_has_bits & 0x00000010u) {
      ask_on_encrypt_ = from.ask_on_encrypt_;
    }
    if (cached_has_bits & 0x00000020u) {
      ask_on_decrypt_ = from.ask_on_decrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CipherKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CipherKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CipherKeyValue::CopyFrom(const CipherKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CipherKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CipherKeyValue::IsInitialized() const {
  return true;
}

void CipherKeyValue::Swap(CipherKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CipherKeyValue::InternalSwap(CipherKeyValue* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iv_.Swap(&other->iv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encrypt_, other->encrypt_);
  swap(ask_on_encrypt_, other->ask_on_encrypt_);
  swap(ask_on_decrypt_, other->ask_on_decrypt_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CipherKeyValue::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CipheredKeyValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CipheredKeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CipheredKeyValue::CipheredKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CipheredKeyValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CipheredKeyValue)
}
CipheredKeyValue::CipheredKeyValue(const CipheredKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CipheredKeyValue)
}

void CipheredKeyValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CipheredKeyValue::~CipheredKeyValue() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CipheredKeyValue)
  SharedDtor();
}

void CipheredKeyValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CipheredKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CipheredKeyValue::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CipheredKeyValue& CipheredKeyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CipheredKeyValue.base);
  return *internal_default_instance();
}


void CipheredKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CipheredKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CipheredKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CipheredKeyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CipheredKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CipheredKeyValue)
  return false;
#undef DO_
}

void CipheredKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CipheredKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CipheredKeyValue)
}

::google::protobuf::uint8* CipheredKeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CipheredKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes value = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CipheredKeyValue)
  return target;
}

size_t CipheredKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CipheredKeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes value = 1;
  if (has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CipheredKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CipheredKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CipheredKeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CipheredKeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CipheredKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CipheredKeyValue)
    MergeFrom(*source);
  }
}

void CipheredKeyValue::MergeFrom(const CipheredKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CipheredKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    set_has_value();
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void CipheredKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CipheredKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CipheredKeyValue::CopyFrom(const CipheredKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CipheredKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CipheredKeyValue::IsInitialized() const {
  return true;
}

void CipheredKeyValue::Swap(CipheredKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CipheredKeyValue::InternalSwap(CipheredKeyValue* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CipheredKeyValue::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IdentityType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentityType::kProtoFieldNumber;
const int IdentityType::kUserFieldNumber;
const int IdentityType::kHostFieldNumber;
const int IdentityType::kPortFieldNumber;
const int IdentityType::kPathFieldNumber;
const int IdentityType::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentityType::IdentityType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_IdentityType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.IdentityType)
}
IdentityType::IdentityType(const IdentityType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proto()) {
    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_port()) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.IdentityType)
}

void IdentityType::SharedCtor() {
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
}

IdentityType::~IdentityType() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.IdentityType)
  SharedDtor();
}

void IdentityType::SharedDtor() {
  proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IdentityType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IdentityType::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdentityType& IdentityType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_IdentityType.base);
  return *internal_default_instance();
}


void IdentityType::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.IdentityType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      proto_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      host_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      port_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IdentityType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.IdentityType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string proto = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proto().data(), static_cast<int>(this->proto().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.IdentityType.proto");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.IdentityType.user");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.IdentityType.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->port().data(), static_cast<int>(this->port().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.IdentityType.port");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.IdentityType.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 index = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.IdentityType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.IdentityType)
  return false;
#undef DO_
}

void IdentityType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.IdentityType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proto = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proto(), output);
  }

  // optional string user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->host(), output);
  }

  // optional string port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->port(), output);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->path(), output);
  }

  // optional uint32 index = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.IdentityType)
}

::google::protobuf::uint8* IdentityType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.IdentityType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proto = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proto(), target);
  }

  // optional string user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // optional string host = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->host(), target);
  }

  // optional string port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->port().data(), static_cast<int>(this->port().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->port(), target);
  }

  // optional string path = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.IdentityType.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->path(), target);
  }

  // optional uint32 index = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.IdentityType)
  return target;
}

size_t IdentityType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.IdentityType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string proto = 1;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proto());
    }

    // optional string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

    // optional string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 index = 6 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentityType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.IdentityType)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentityType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentityType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.IdentityType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.IdentityType)
    MergeFrom(*source);
  }
}

void IdentityType::MergeFrom(const IdentityType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.IdentityType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proto();
      proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_port();
      port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000020u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IdentityType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.IdentityType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentityType::CopyFrom(const IdentityType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.IdentityType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityType::IsInitialized() const {
  return true;
}

void IdentityType::Swap(IdentityType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentityType::InternalSwap(IdentityType* other) {
  using std::swap;
  proto_.Swap(&other->proto_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  port_.Swap(&other->port_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IdentityType::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignIdentity::InitAsDefaultInstance() {
  ::hw::trezor::messages::crypto::_SignIdentity_default_instance_._instance.get_mutable()->identity_ = const_cast< ::hw::trezor::messages::crypto::IdentityType*>(
      ::hw::trezor::messages::crypto::IdentityType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignIdentity::kIdentityFieldNumber;
const int SignIdentity::kChallengeHiddenFieldNumber;
const int SignIdentity::kChallengeVisualFieldNumber;
const int SignIdentity::kEcdsaCurveNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignIdentity::SignIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_SignIdentity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.SignIdentity)
}
SignIdentity::SignIdentity(const SignIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_hidden_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge_hidden()) {
    challenge_hidden_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_hidden_);
  }
  challenge_visual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge_visual()) {
    challenge_visual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_visual_);
  }
  ecdsa_curve_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ecdsa_curve_name()) {
    ecdsa_curve_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ecdsa_curve_name_);
  }
  if (from.has_identity()) {
    identity_ = new ::hw::trezor::messages::crypto::IdentityType(*from.identity_);
  } else {
    identity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.SignIdentity)
}

void SignIdentity::SharedCtor() {
  challenge_hidden_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_visual_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ecdsa_curve_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_ = NULL;
}

SignIdentity::~SignIdentity() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.SignIdentity)
  SharedDtor();
}

void SignIdentity::SharedDtor() {
  challenge_hidden_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  challenge_visual_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ecdsa_curve_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void SignIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignIdentity::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignIdentity& SignIdentity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_SignIdentity.base);
  return *internal_default_instance();
}


void SignIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.SignIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      challenge_hidden_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_visual_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ecdsa_curve_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(identity_ != NULL);
      identity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.SignIdentity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes challenge_hidden = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge_hidden()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string challenge_visual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_challenge_visual()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->challenge_visual().data(), static_cast<int>(this->challenge_visual().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.SignIdentity.challenge_visual");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ecdsa_curve_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ecdsa_curve_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.SignIdentity.ecdsa_curve_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.SignIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.SignIdentity)
  return false;
#undef DO_
}

void SignIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.SignIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_identity(), output);
  }

  // optional bytes challenge_hidden = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->challenge_hidden(), output);
  }

  // optional string challenge_visual = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_visual().data(), static_cast<int>(this->challenge_visual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignIdentity.challenge_visual");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->challenge_visual(), output);
  }

  // optional string ecdsa_curve_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignIdentity.ecdsa_curve_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ecdsa_curve_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.SignIdentity)
}

::google::protobuf::uint8* SignIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.SignIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_identity(), deterministic, target);
  }

  // optional bytes challenge_hidden = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->challenge_hidden(), target);
  }

  // optional string challenge_visual = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->challenge_visual().data(), static_cast<int>(this->challenge_visual().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignIdentity.challenge_visual");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->challenge_visual(), target);
  }

  // optional string ecdsa_curve_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignIdentity.ecdsa_curve_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ecdsa_curve_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.SignIdentity)
  return target;
}

size_t SignIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.SignIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes challenge_hidden = 2;
    if (has_challenge_hidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challenge_hidden());
    }

    // optional string challenge_visual = 3;
    if (has_challenge_visual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->challenge_visual());
    }

    // optional string ecdsa_curve_name = 4;
    if (has_ecdsa_curve_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ecdsa_curve_name());
    }

    // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.SignIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const SignIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.SignIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.SignIdentity)
    MergeFrom(*source);
  }
}

void SignIdentity::MergeFrom(const SignIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.SignIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_challenge_hidden();
      challenge_hidden_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_hidden_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_challenge_visual();
      challenge_visual_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_visual_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ecdsa_curve_name();
      ecdsa_curve_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ecdsa_curve_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_identity()->::hw::trezor::messages::crypto::IdentityType::MergeFrom(from.identity());
    }
  }
}

void SignIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.SignIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignIdentity::CopyFrom(const SignIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.SignIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignIdentity::IsInitialized() const {
  return true;
}

void SignIdentity::Swap(SignIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignIdentity::InternalSwap(SignIdentity* other) {
  using std::swap;
  challenge_hidden_.Swap(&other->challenge_hidden_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  challenge_visual_.Swap(&other->challenge_visual_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ecdsa_curve_name_.Swap(&other->ecdsa_curve_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignIdentity::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignedIdentity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedIdentity::kAddressFieldNumber;
const int SignedIdentity::kPublicKeyFieldNumber;
const int SignedIdentity::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedIdentity::SignedIdentity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_SignedIdentity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.SignedIdentity)
}
SignedIdentity::SignedIdentity(const SignedIdentity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.SignedIdentity)
}

void SignedIdentity::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignedIdentity::~SignedIdentity() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.SignedIdentity)
  SharedDtor();
}

void SignedIdentity::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignedIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignedIdentity::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignedIdentity& SignedIdentity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_SignedIdentity.base);
  return *internal_default_instance();
}


void SignedIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.SignedIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignedIdentity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.SignedIdentity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.SignedIdentity.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.SignedIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.SignedIdentity)
  return false;
#undef DO_
}

void SignedIdentity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.SignedIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignedIdentity.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.SignedIdentity)
}

::google::protobuf::uint8* SignedIdentity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.SignedIdentity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.SignedIdentity.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // optional bytes signature = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.SignedIdentity)
  return target;
}

size_t SignedIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.SignedIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

    // optional bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignedIdentity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.SignedIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedIdentity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedIdentity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.SignedIdentity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.SignedIdentity)
    MergeFrom(*source);
  }
}

void SignedIdentity::MergeFrom(const SignedIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.SignedIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
  }
}

void SignedIdentity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.SignedIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedIdentity::CopyFrom(const SignedIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.SignedIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedIdentity::IsInitialized() const {
  return true;
}

void SignedIdentity::Swap(SignedIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedIdentity::InternalSwap(SignedIdentity* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignedIdentity::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetECDHSessionKey::InitAsDefaultInstance() {
  ::hw::trezor::messages::crypto::_GetECDHSessionKey_default_instance_._instance.get_mutable()->identity_ = const_cast< ::hw::trezor::messages::crypto::IdentityType*>(
      ::hw::trezor::messages::crypto::IdentityType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetECDHSessionKey::kIdentityFieldNumber;
const int GetECDHSessionKey::kPeerPublicKeyFieldNumber;
const int GetECDHSessionKey::kEcdsaCurveNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetECDHSessionKey::GetECDHSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_GetECDHSessionKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.GetECDHSessionKey)
}
GetECDHSessionKey::GetECDHSessionKey(const GetECDHSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_peer_public_key()) {
    peer_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_public_key_);
  }
  ecdsa_curve_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ecdsa_curve_name()) {
    ecdsa_curve_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ecdsa_curve_name_);
  }
  if (from.has_identity()) {
    identity_ = new ::hw::trezor::messages::crypto::IdentityType(*from.identity_);
  } else {
    identity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.GetECDHSessionKey)
}

void GetECDHSessionKey::SharedCtor() {
  peer_public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ecdsa_curve_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_ = NULL;
}

GetECDHSessionKey::~GetECDHSessionKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.GetECDHSessionKey)
  SharedDtor();
}

void GetECDHSessionKey::SharedDtor() {
  peer_public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ecdsa_curve_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void GetECDHSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetECDHSessionKey::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetECDHSessionKey& GetECDHSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_GetECDHSessionKey.base);
  return *internal_default_instance();
}


void GetECDHSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      peer_public_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ecdsa_curve_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(identity_ != NULL);
      identity_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetECDHSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes peer_public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_peer_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ecdsa_curve_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ecdsa_curve_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.crypto.GetECDHSessionKey.ecdsa_curve_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.GetECDHSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.GetECDHSessionKey)
  return false;
#undef DO_
}

void GetECDHSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_identity(), output);
  }

  // optional bytes peer_public_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->peer_public_key(), output);
  }

  // optional string ecdsa_curve_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.GetECDHSessionKey.ecdsa_curve_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ecdsa_curve_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.GetECDHSessionKey)
}

::google::protobuf::uint8* GetECDHSessionKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_identity(), deterministic, target);
  }

  // optional bytes peer_public_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->peer_public_key(), target);
  }

  // optional string ecdsa_curve_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ecdsa_curve_name().data(), static_cast<int>(this->ecdsa_curve_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.crypto.GetECDHSessionKey.ecdsa_curve_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ecdsa_curve_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.GetECDHSessionKey)
  return target;
}

size_t GetECDHSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes peer_public_key = 2;
    if (has_peer_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->peer_public_key());
    }

    // optional string ecdsa_curve_name = 3;
    if (has_ecdsa_curve_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ecdsa_curve_name());
    }

    // optional .hw.trezor.messages.crypto.IdentityType identity = 1;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *identity_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetECDHSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const GetECDHSessionKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetECDHSessionKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.GetECDHSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.GetECDHSessionKey)
    MergeFrom(*source);
  }
}

void GetECDHSessionKey::MergeFrom(const GetECDHSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_peer_public_key();
      peer_public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_public_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ecdsa_curve_name();
      ecdsa_curve_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ecdsa_curve_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_identity()->::hw::trezor::messages::crypto::IdentityType::MergeFrom(from.identity());
    }
  }
}

void GetECDHSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetECDHSessionKey::CopyFrom(const GetECDHSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.GetECDHSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetECDHSessionKey::IsInitialized() const {
  return true;
}

void GetECDHSessionKey::Swap(GetECDHSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetECDHSessionKey::InternalSwap(GetECDHSessionKey* other) {
  using std::swap;
  peer_public_key_.Swap(&other->peer_public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ecdsa_curve_name_.Swap(&other->ecdsa_curve_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetECDHSessionKey::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ECDHSessionKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ECDHSessionKey::kSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ECDHSessionKey::ECDHSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_ECDHSessionKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.ECDHSessionKey)
}
ECDHSessionKey::ECDHSessionKey(const ECDHSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_key()) {
    session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.ECDHSessionKey)
}

void ECDHSessionKey::SharedCtor() {
  session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ECDHSessionKey::~ECDHSessionKey() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.ECDHSessionKey)
  SharedDtor();
}

void ECDHSessionKey::SharedDtor() {
  session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ECDHSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ECDHSessionKey::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ECDHSessionKey& ECDHSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_ECDHSessionKey.base);
  return *internal_default_instance();
}


void ECDHSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.ECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ECDHSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.ECDHSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes session_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.ECDHSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.ECDHSessionKey)
  return false;
#undef DO_
}

void ECDHSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.ECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes session_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->session_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.ECDHSessionKey)
}

::google::protobuf::uint8* ECDHSessionKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.ECDHSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes session_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->session_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.ECDHSessionKey)
  return target;
}

size_t ECDHSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.ECDHSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes session_key = 1;
  if (has_session_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->session_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ECDHSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.ECDHSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ECDHSessionKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ECDHSessionKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.ECDHSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.ECDHSessionKey)
    MergeFrom(*source);
  }
}

void ECDHSessionKey::MergeFrom(const ECDHSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.ECDHSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_session_key()) {
    set_has_session_key();
    session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_key_);
  }
}

void ECDHSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.ECDHSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECDHSessionKey::CopyFrom(const ECDHSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.ECDHSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECDHSessionKey::IsInitialized() const {
  return true;
}

void ECDHSessionKey::Swap(ECDHSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ECDHSessionKey::InternalSwap(ECDHSessionKey* other) {
  using std::swap;
  session_key_.Swap(&other->session_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ECDHSessionKey::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CosiCommit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosiCommit::kAddressNFieldNumber;
const int CosiCommit::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosiCommit::CosiCommit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CosiCommit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CosiCommit)
}
CosiCommit::CosiCommit(const CosiCommit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CosiCommit)
}

void CosiCommit::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CosiCommit::~CosiCommit() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CosiCommit)
  SharedDtor();
}

void CosiCommit::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosiCommit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CosiCommit::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosiCommit& CosiCommit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CosiCommit.base);
  return *internal_default_instance();
}


void CosiCommit::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CosiCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosiCommit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CosiCommit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CosiCommit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CosiCommit)
  return false;
#undef DO_
}

void CosiCommit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CosiCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CosiCommit)
}

::google::protobuf::uint8* CosiCommit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CosiCommit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CosiCommit)
  return target;
}

size_t CosiCommit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CosiCommit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bytes data = 2;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosiCommit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CosiCommit)
  GOOGLE_DCHECK_NE(&from, this);
  const CosiCommit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosiCommit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CosiCommit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CosiCommit)
    MergeFrom(*source);
  }
}

void CosiCommit::MergeFrom(const CosiCommit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CosiCommit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void CosiCommit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CosiCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosiCommit::CopyFrom(const CosiCommit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CosiCommit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosiCommit::IsInitialized() const {
  return true;
}

void CosiCommit::Swap(CosiCommit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosiCommit::InternalSwap(CosiCommit* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CosiCommit::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CosiCommitment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosiCommitment::kCommitmentFieldNumber;
const int CosiCommitment::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosiCommitment::CosiCommitment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CosiCommitment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CosiCommitment)
}
CosiCommitment::CosiCommitment(const CosiCommitment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_commitment()) {
    commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitment_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pubkey()) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CosiCommitment)
}

void CosiCommitment::SharedCtor() {
  commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CosiCommitment::~CosiCommitment() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CosiCommitment)
  SharedDtor();
}

void CosiCommitment::SharedDtor() {
  commitment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosiCommitment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CosiCommitment::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosiCommitment& CosiCommitment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CosiCommitment.base);
  return *internal_default_instance();
}


void CosiCommitment::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CosiCommitment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      commitment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pubkey_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosiCommitment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CosiCommitment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes commitment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pubkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CosiCommitment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CosiCommitment)
  return false;
#undef DO_
}

void CosiCommitment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CosiCommitment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes commitment = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->commitment(), output);
  }

  // optional bytes pubkey = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CosiCommitment)
}

::google::protobuf::uint8* CosiCommitment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CosiCommitment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes commitment = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->commitment(), target);
  }

  // optional bytes pubkey = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CosiCommitment)
  return target;
}

size_t CosiCommitment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CosiCommitment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes commitment = 1;
    if (has_commitment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->commitment());
    }

    // optional bytes pubkey = 2;
    if (has_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pubkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosiCommitment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CosiCommitment)
  GOOGLE_DCHECK_NE(&from, this);
  const CosiCommitment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosiCommitment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CosiCommitment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CosiCommitment)
    MergeFrom(*source);
  }
}

void CosiCommitment::MergeFrom(const CosiCommitment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CosiCommitment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_commitment();
      commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commitment_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pubkey();
      pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
    }
  }
}

void CosiCommitment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CosiCommitment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosiCommitment::CopyFrom(const CosiCommitment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CosiCommitment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosiCommitment::IsInitialized() const {
  return true;
}

void CosiCommitment::Swap(CosiCommitment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosiCommitment::InternalSwap(CosiCommitment* other) {
  using std::swap;
  commitment_.Swap(&other->commitment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CosiCommitment::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CosiSign::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosiSign::kAddressNFieldNumber;
const int CosiSign::kDataFieldNumber;
const int CosiSign::kGlobalCommitmentFieldNumber;
const int CosiSign::kGlobalPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosiSign::CosiSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CosiSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CosiSign)
}
CosiSign::CosiSign(const CosiSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  global_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_global_commitment()) {
    global_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_commitment_);
  }
  global_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_global_pubkey()) {
    global_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_pubkey_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CosiSign)
}

void CosiSign::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_commitment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CosiSign::~CosiSign() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CosiSign)
  SharedDtor();
}

void CosiSign::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_commitment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosiSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CosiSign::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosiSign& CosiSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CosiSign.base);
  return *internal_default_instance();
}


void CosiSign::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CosiSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      global_commitment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      global_pubkey_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosiSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CosiSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes global_commitment = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_global_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes global_pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_global_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CosiSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CosiSign)
  return false;
#undef DO_
}

void CosiSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CosiSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional bytes global_commitment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->global_commitment(), output);
  }

  // optional bytes global_pubkey = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->global_pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CosiSign)
}

::google::protobuf::uint8* CosiSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CosiSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional bytes global_commitment = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->global_commitment(), target);
  }

  // optional bytes global_pubkey = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->global_pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CosiSign)
  return target;
}

size_t CosiSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CosiSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bytes global_commitment = 3;
    if (has_global_commitment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->global_commitment());
    }

    // optional bytes global_pubkey = 4;
    if (has_global_pubkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->global_pubkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosiSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CosiSign)
  GOOGLE_DCHECK_NE(&from, this);
  const CosiSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosiSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CosiSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CosiSign)
    MergeFrom(*source);
  }
}

void CosiSign::MergeFrom(const CosiSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CosiSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_global_commitment();
      global_commitment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_commitment_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_global_pubkey();
      global_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.global_pubkey_);
    }
  }
}

void CosiSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CosiSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosiSign::CopyFrom(const CosiSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CosiSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosiSign::IsInitialized() const {
  return true;
}

void CosiSign::Swap(CosiSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosiSign::InternalSwap(CosiSign* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  global_commitment_.Swap(&other->global_commitment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  global_pubkey_.Swap(&other->global_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CosiSign::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CosiSignature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CosiSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CosiSignature::CosiSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dcrypto_2eproto::scc_info_CosiSignature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.crypto.CosiSignature)
}
CosiSignature::CosiSignature(const CosiSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.crypto.CosiSignature)
}

void CosiSignature::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CosiSignature::~CosiSignature() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.crypto.CosiSignature)
  SharedDtor();
}

void CosiSignature::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CosiSignature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CosiSignature::descriptor() {
  ::protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CosiSignature& CosiSignature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dcrypto_2eproto::scc_info_CosiSignature.base);
  return *internal_default_instance();
}


void CosiSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.crypto.CosiSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    signature_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CosiSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.crypto.CosiSignature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.crypto.CosiSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.crypto.CosiSignature)
  return false;
#undef DO_
}

void CosiSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.crypto.CosiSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.crypto.CosiSignature)
}

::google::protobuf::uint8* CosiSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.crypto.CosiSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.crypto.CosiSignature)
  return target;
}

size_t CosiSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.crypto.CosiSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CosiSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.crypto.CosiSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const CosiSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CosiSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.crypto.CosiSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.crypto.CosiSignature)
    MergeFrom(*source);
  }
}

void CosiSignature::MergeFrom(const CosiSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.crypto.CosiSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    set_has_signature();
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void CosiSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.crypto.CosiSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CosiSignature::CopyFrom(const CosiSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.crypto.CosiSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosiSignature::IsInitialized() const {
  return true;
}

void CosiSignature::Swap(CosiSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CosiSignature::InternalSwap(CosiSignature* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CosiSignature::GetMetadata() const {
  protobuf_messages_2dcrypto_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dcrypto_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CipherKeyValue* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CipherKeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CipherKeyValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CipheredKeyValue* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CipheredKeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CipheredKeyValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::IdentityType* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::IdentityType >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::IdentityType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::SignIdentity* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::SignIdentity >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::SignIdentity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::SignedIdentity* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::SignedIdentity >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::SignedIdentity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::GetECDHSessionKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::GetECDHSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::GetECDHSessionKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::ECDHSessionKey* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::ECDHSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::ECDHSessionKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CosiCommit* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CosiCommit >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CosiCommit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CosiCommitment* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CosiCommitment >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CosiCommitment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CosiSign* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CosiSign >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CosiSign >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::crypto::CosiSignature* Arena::CreateMaybeMessage< ::hw::trezor::messages::crypto::CosiSignature >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::crypto::CosiSignature >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
