// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-ripple.proto

#include "messages-ripple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2dripple_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dripple_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignTx_RipplePayment;
}  // namespace protobuf_messages_2dripple_2eproto
namespace hw {
namespace trezor {
namespace messages {
namespace ripple {
class RippleGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleGetAddress>
      _instance;
} _RippleGetAddress_default_instance_;
class RippleAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleAddress>
      _instance;
} _RippleAddress_default_instance_;
class RippleSignTx_RipplePaymentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignTx_RipplePayment>
      _instance;
} _RippleSignTx_RipplePayment_default_instance_;
class RippleSignTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignTx>
      _instance;
} _RippleSignTx_default_instance_;
class RippleSignedTxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RippleSignedTx>
      _instance;
} _RippleSignedTx_default_instance_;
}  // namespace ripple
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace protobuf_messages_2dripple_2eproto {
static void InitDefaultsRippleGetAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleGetAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleGetAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleGetAddress}, {}};

static void InitDefaultsRippleAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleAddress_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleAddress}, {}};

static void InitDefaultsRippleSignTx_RipplePayment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignTx_RipplePayment_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignTx_RipplePayment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleSignTx_RipplePayment}, {}};

static void InitDefaultsRippleSignTx() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignTx_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RippleSignTx =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRippleSignTx}, {
      &protobuf_messages_2dripple_2eproto::scc_info_RippleSignTx_RipplePayment.base,}};

static void InitDefaultsRippleSignedTx() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hw::trezor::messages::ripple::_RippleSignedTx_default_instance_;
    new (ptr) ::hw::trezor::messages::ripple::RippleSignedTx();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hw::trezor::messages::ripple::RippleSignedTx::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RippleSignedTx =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRippleSignedTx}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RippleGetAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignTx_RipplePayment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignTx.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RippleSignedTx.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleGetAddress, show_display_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleAddress, address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, destination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment, destination_tag_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, fee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, last_ledger_sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignTx, payment_),
  ~0u,
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hw::trezor::messages::ripple::RippleSignedTx, serialized_tx_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hw::trezor::messages::ripple::RippleGetAddress)},
  { 9, 15, sizeof(::hw::trezor::messages::ripple::RippleAddress)},
  { 16, 24, sizeof(::hw::trezor::messages::ripple::RippleSignTx_RipplePayment)},
  { 27, 38, sizeof(::hw::trezor::messages::ripple::RippleSignTx)},
  { 44, 51, sizeof(::hw::trezor::messages::ripple::RippleSignedTx)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignTx_RipplePayment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignTx_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hw::trezor::messages::ripple::_RippleSignedTx_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages-ripple.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025messages-ripple.proto\022\031hw.trezor.messa"
      "ges.ripple\";\n\020RippleGetAddress\022\021\n\taddres"
      "s_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\" \n\rRippl"
      "eAddress\022\017\n\007address\030\001 \001(\t\"\204\002\n\014RippleSign"
      "Tx\022\021\n\taddress_n\030\001 \003(\r\022\013\n\003fee\030\002 \001(\004\022\r\n\005fl"
      "ags\030\003 \001(\r\022\020\n\010sequence\030\004 \001(\r\022\034\n\024last_ledg"
      "er_sequence\030\005 \001(\r\022F\n\007payment\030\006 \001(\01325.hw."
      "trezor.messages.ripple.RippleSignTx.Ripp"
      "lePayment\032M\n\rRipplePayment\022\016\n\006amount\030\001 \001"
      "(\004\022\023\n\013destination\030\002 \001(\t\022\027\n\017destination_t"
      "ag\030\003 \001(\r\":\n\016RippleSignedTx\022\021\n\tsignature\030"
      "\001 \001(\014\022\025\n\rserialized_tx\030\002 \001(\014B:\n#com.sato"
      "shilabs.trezor.lib.protobufB\023TrezorMessa"
      "geRipple"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-ripple.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2dripple_2eproto
namespace hw {
namespace trezor {
namespace messages {
namespace ripple {

// ===================================================================

void RippleGetAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleGetAddress::kAddressNFieldNumber;
const int RippleGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleGetAddress::RippleGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dripple_2eproto::scc_info_RippleGetAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleGetAddress)
}
RippleGetAddress::RippleGetAddress(const RippleGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleGetAddress)
}

void RippleGetAddress::SharedCtor() {
  show_display_ = false;
}

RippleGetAddress::~RippleGetAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleGetAddress)
  SharedDtor();
}

void RippleGetAddress::SharedDtor() {
}

void RippleGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RippleGetAddress::descriptor() {
  ::protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RippleGetAddress& RippleGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dripple_2eproto::scc_info_RippleGetAddress.base);
  return *internal_default_instance();
}


void RippleGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_show_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleGetAddress)
  return false;
#undef DO_
}

void RippleGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleGetAddress)
}

::google::protobuf::uint8* RippleGetAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleGetAddress)
  return target;
}

size_t RippleGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  if (has_show_display()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleGetAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RippleGetAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleGetAddress)
    MergeFrom(*source);
  }
}

void RippleGetAddress::MergeFrom(const RippleGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void RippleGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleGetAddress::CopyFrom(const RippleGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleGetAddress::IsInitialized() const {
  return true;
}

void RippleGetAddress::Swap(RippleGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleGetAddress::InternalSwap(RippleGetAddress* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RippleGetAddress::GetMetadata() const {
  protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RippleAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleAddress::RippleAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dripple_2eproto::scc_info_RippleAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleAddress)
}
RippleAddress::RippleAddress(const RippleAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleAddress)
}

void RippleAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RippleAddress::~RippleAddress() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleAddress)
  SharedDtor();
}

void RippleAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RippleAddress::descriptor() {
  ::protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RippleAddress& RippleAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dripple_2eproto::scc_info_RippleAddress.base);
  return *internal_default_instance();
}


void RippleAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.ripple.RippleAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleAddress)
  return false;
#undef DO_
}

void RippleAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleAddress)
}

::google::protobuf::uint8* RippleAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleAddress)
  return target;
}

size_t RippleAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RippleAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleAddress)
    MergeFrom(*source);
  }
}

void RippleAddress::MergeFrom(const RippleAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    set_has_address();
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void RippleAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleAddress::CopyFrom(const RippleAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleAddress::IsInitialized() const {
  return true;
}

void RippleAddress::Swap(RippleAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleAddress::InternalSwap(RippleAddress* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RippleAddress::GetMetadata() const {
  protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RippleSignTx_RipplePayment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignTx_RipplePayment::kAmountFieldNumber;
const int RippleSignTx_RipplePayment::kDestinationFieldNumber;
const int RippleSignTx_RipplePayment::kDestinationTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignTx_RipplePayment::RippleSignTx_RipplePayment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dripple_2eproto::scc_info_RippleSignTx_RipplePayment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}
RippleSignTx_RipplePayment::RippleSignTx_RipplePayment(const RippleSignTx_RipplePayment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination()) {
    destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&destination_tag_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}

void RippleSignTx_RipplePayment::SharedCtor() {
  destination_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&destination_tag_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
}

RippleSignTx_RipplePayment::~RippleSignTx_RipplePayment() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  SharedDtor();
}

void RippleSignTx_RipplePayment::SharedDtor() {
  destination_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleSignTx_RipplePayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RippleSignTx_RipplePayment::descriptor() {
  ::protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RippleSignTx_RipplePayment& RippleSignTx_RipplePayment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dripple_2eproto::scc_info_RippleSignTx_RipplePayment.base);
  return *internal_default_instance();
}


void RippleSignTx_RipplePayment::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    destination_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destination_tag_) -
        reinterpret_cast<char*>(&amount_)) + sizeof(destination_tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleSignTx_RipplePayment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string destination = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 destination_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_destination_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destination_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return false;
#undef DO_
}

void RippleSignTx_RipplePayment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->destination(), output);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destination_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
}

::google::protobuf::uint8* RippleSignTx_RipplePayment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string destination = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hw.trezor.messages.ripple.RippleSignTx.RipplePayment.destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->destination(), target);
  }

  // optional uint32 destination_tag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destination_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  return target;
}

size_t RippleSignTx_RipplePayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string destination = 2;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

    // optional uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional uint32 destination_tag = 3;
    if (has_destination_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destination_tag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignTx_RipplePayment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignTx_RipplePayment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RippleSignTx_RipplePayment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
    MergeFrom(*source);
  }
}

void RippleSignTx_RipplePayment::MergeFrom(const RippleSignTx_RipplePayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_destination();
      destination_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_);
    }
    if (cached_has_bits & 0x00000002u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      destination_tag_ = from.destination_tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RippleSignTx_RipplePayment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignTx_RipplePayment::CopyFrom(const RippleSignTx_RipplePayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignTx.RipplePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignTx_RipplePayment::IsInitialized() const {
  return true;
}

void RippleSignTx_RipplePayment::Swap(RippleSignTx_RipplePayment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignTx_RipplePayment::InternalSwap(RippleSignTx_RipplePayment* other) {
  using std::swap;
  destination_.Swap(&other->destination_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(destination_tag_, other->destination_tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RippleSignTx_RipplePayment::GetMetadata() const {
  protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RippleSignTx::InitAsDefaultInstance() {
  ::hw::trezor::messages::ripple::_RippleSignTx_default_instance_._instance.get_mutable()->payment_ = const_cast< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment*>(
      ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignTx::kAddressNFieldNumber;
const int RippleSignTx::kFeeFieldNumber;
const int RippleSignTx::kFlagsFieldNumber;
const int RippleSignTx::kSequenceFieldNumber;
const int RippleSignTx::kLastLedgerSequenceFieldNumber;
const int RippleSignTx::kPaymentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignTx::RippleSignTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dripple_2eproto::scc_info_RippleSignTx.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignTx)
}
RippleSignTx::RippleSignTx(const RippleSignTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_payment()) {
    payment_ = new ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment(*from.payment_);
  } else {
    payment_ = NULL;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_ledger_sequence_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(last_ledger_sequence_));
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignTx)
}

void RippleSignTx::SharedCtor() {
  ::memset(&payment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_ledger_sequence_) -
      reinterpret_cast<char*>(&payment_)) + sizeof(last_ledger_sequence_));
}

RippleSignTx::~RippleSignTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignTx)
  SharedDtor();
}

void RippleSignTx::SharedDtor() {
  if (this != internal_default_instance()) delete payment_;
}

void RippleSignTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RippleSignTx::descriptor() {
  ::protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RippleSignTx& RippleSignTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dripple_2eproto::scc_info_RippleSignTx.base);
  return *internal_default_instance();
}


void RippleSignTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(payment_ != NULL);
    payment_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_ledger_sequence_) -
        reinterpret_cast<char*>(&fee_)) + sizeof(last_ledger_sequence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleSignTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fee = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_fee();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_ledger_sequence = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_last_ledger_sequence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_ledger_sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignTx)
  return false;
#undef DO_
}

void RippleSignTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fee(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequence(), output);
  }

  // optional uint32 last_ledger_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_ledger_sequence(), output);
  }

  // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_payment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignTx)
}

::google::protobuf::uint8* RippleSignTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fee(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional uint32 sequence = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sequence(), target);
  }

  // optional uint32 last_ledger_sequence = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_ledger_sequence(), target);
  }

  // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_payment(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignTx)
  return target;
}

size_t RippleSignTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .hw.trezor.messages.ripple.RippleSignTx.RipplePayment payment = 6;
    if (has_payment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *payment_);
    }

    // optional uint64 fee = 2;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fee());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 sequence = 4;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional uint32 last_ledger_sequence = 5;
    if (has_last_ledger_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_ledger_sequence());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RippleSignTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignTx)
    MergeFrom(*source);
  }
}

void RippleSignTx::MergeFrom(const RippleSignTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_payment()->::hw::trezor::messages::ripple::RippleSignTx_RipplePayment::MergeFrom(from.payment());
    }
    if (cached_has_bits & 0x00000002u) {
      fee_ = from.fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      sequence_ = from.sequence_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_ledger_sequence_ = from.last_ledger_sequence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RippleSignTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignTx::CopyFrom(const RippleSignTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignTx::IsInitialized() const {
  return true;
}

void RippleSignTx::Swap(RippleSignTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignTx::InternalSwap(RippleSignTx* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(payment_, other->payment_);
  swap(fee_, other->fee_);
  swap(flags_, other->flags_);
  swap(sequence_, other->sequence_);
  swap(last_ledger_sequence_, other->last_ledger_sequence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RippleSignTx::GetMetadata() const {
  protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RippleSignedTx::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RippleSignedTx::kSignatureFieldNumber;
const int RippleSignedTx::kSerializedTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RippleSignedTx::RippleSignedTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dripple_2eproto::scc_info_RippleSignedTx.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hw.trezor.messages.ripple.RippleSignedTx)
}
RippleSignedTx::RippleSignedTx(const RippleSignedTx& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_tx()) {
    serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:hw.trezor.messages.ripple.RippleSignedTx)
}

void RippleSignedTx::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RippleSignedTx::~RippleSignedTx() {
  // @@protoc_insertion_point(destructor:hw.trezor.messages.ripple.RippleSignedTx)
  SharedDtor();
}

void RippleSignedTx::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_tx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RippleSignedTx::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RippleSignedTx::descriptor() {
  ::protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RippleSignedTx& RippleSignedTx::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dripple_2eproto::scc_info_RippleSignedTx.base);
  return *internal_default_instance();
}


void RippleSignedTx::Clear() {
// @@protoc_insertion_point(message_clear_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_tx_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RippleSignedTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hw.trezor.messages.ripple.RippleSignedTx)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_tx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hw.trezor.messages.ripple.RippleSignedTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hw.trezor.messages.ripple.RippleSignedTx)
  return false;
#undef DO_
}

void RippleSignedTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serialized_tx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hw.trezor.messages.ripple.RippleSignedTx)
}

::google::protobuf::uint8* RippleSignedTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hw.trezor.messages.ripple.RippleSignedTx)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes serialized_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serialized_tx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hw.trezor.messages.ripple.RippleSignedTx)
  return target;
}

size_t RippleSignedTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hw.trezor.messages.ripple.RippleSignedTx)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes serialized_tx = 2;
    if (has_serialized_tx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_tx());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RippleSignedTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  const RippleSignedTx* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RippleSignedTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hw.trezor.messages.ripple.RippleSignedTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hw.trezor.messages.ripple.RippleSignedTx)
    MergeFrom(*source);
  }
}

void RippleSignedTx::MergeFrom(const RippleSignedTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serialized_tx();
      serialized_tx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_tx_);
    }
  }
}

void RippleSignedTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RippleSignedTx::CopyFrom(const RippleSignedTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hw.trezor.messages.ripple.RippleSignedTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RippleSignedTx::IsInitialized() const {
  return true;
}

void RippleSignedTx::Swap(RippleSignedTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RippleSignedTx::InternalSwap(RippleSignedTx* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialized_tx_.Swap(&other->serialized_tx_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RippleSignedTx::GetMetadata() const {
  protobuf_messages_2dripple_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dripple_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ripple
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::ripple::RippleGetAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleGetAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::ripple::RippleAddress* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleAddress >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignTx_RipplePayment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::ripple::RippleSignTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignTx >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hw::trezor::messages::ripple::RippleSignedTx* Arena::CreateMaybeMessage< ::hw::trezor::messages::ripple::RippleSignedTx >(Arena* arena) {
  return Arena::CreateInternal< ::hw::trezor::messages::ripple::RippleSignedTx >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
