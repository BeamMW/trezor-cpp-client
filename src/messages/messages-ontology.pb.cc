// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-ontology.proto

#include "messages-ontology.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2dontology_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignOntIdRegister_OntologyOntIdRegister;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignTransfer_OntologyTransfer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignWithdrawOng_OntologyWithdrawOng;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OntologyTransaction_OntologyTxAttribute;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2dontology_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OntologyTransaction;
}  // namespace protobuf_messages_2dontology_2eproto
class OntologyTransaction_OntologyTxAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyTransaction_OntologyTxAttribute>
      _instance;
} _OntologyTransaction_OntologyTxAttribute_default_instance_;
class OntologyTransactionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyTransaction>
      _instance;
} _OntologyTransaction_default_instance_;
class OntologyGetPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyGetPublicKey>
      _instance;
} _OntologyGetPublicKey_default_instance_;
class OntologyPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyPublicKey>
      _instance;
} _OntologyPublicKey_default_instance_;
class OntologyGetAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyGetAddress>
      _instance;
} _OntologyGetAddress_default_instance_;
class OntologyAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologyAddress>
      _instance;
} _OntologyAddress_default_instance_;
class OntologySignTransfer_OntologyTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignTransfer_OntologyTransfer>
      _instance;
} _OntologySignTransfer_OntologyTransfer_default_instance_;
class OntologySignTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignTransfer>
      _instance;
} _OntologySignTransfer_default_instance_;
class OntologySignedTransferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignedTransfer>
      _instance;
} _OntologySignedTransfer_default_instance_;
class OntologySignWithdrawOng_OntologyWithdrawOngDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignWithdrawOng_OntologyWithdrawOng>
      _instance;
} _OntologySignWithdrawOng_OntologyWithdrawOng_default_instance_;
class OntologySignWithdrawOngDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignWithdrawOng>
      _instance;
} _OntologySignWithdrawOng_default_instance_;
class OntologySignedWithdrawOngDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignedWithdrawOng>
      _instance;
} _OntologySignedWithdrawOng_default_instance_;
class OntologySignOntIdRegister_OntologyOntIdRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignOntIdRegister_OntologyOntIdRegister>
      _instance;
} _OntologySignOntIdRegister_OntologyOntIdRegister_default_instance_;
class OntologySignOntIdRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignOntIdRegister>
      _instance;
} _OntologySignOntIdRegister_default_instance_;
class OntologySignedOntIdRegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignedOntIdRegister>
      _instance;
} _OntologySignedOntIdRegister_default_instance_;
class OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>
      _instance;
} _OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute_default_instance_;
class OntologySignOntIdAddAttributes_OntologyOntIdAddAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes>
      _instance;
} _OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_default_instance_;
class OntologySignOntIdAddAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignOntIdAddAttributes>
      _instance;
} _OntologySignOntIdAddAttributes_default_instance_;
class OntologySignedOntIdAddAttributesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OntologySignedOntIdAddAttributes>
      _instance;
} _OntologySignedOntIdAddAttributes_default_instance_;
namespace protobuf_messages_2dontology_2eproto {
static void InitDefaultsOntologyTransaction_OntologyTxAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyTransaction_OntologyTxAttribute_default_instance_;
    new (ptr) ::OntologyTransaction_OntologyTxAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyTransaction_OntologyTxAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologyTransaction_OntologyTxAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologyTransaction_OntologyTxAttribute}, {}};

static void InitDefaultsOntologyTransaction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyTransaction_default_instance_;
    new (ptr) ::OntologyTransaction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyTransaction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OntologyTransaction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOntologyTransaction}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction_OntologyTxAttribute.base,}};

static void InitDefaultsOntologyGetPublicKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyGetPublicKey_default_instance_;
    new (ptr) ::OntologyGetPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyGetPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologyGetPublicKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologyGetPublicKey}, {}};

static void InitDefaultsOntologyPublicKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyPublicKey_default_instance_;
    new (ptr) ::OntologyPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologyPublicKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologyPublicKey}, {}};

static void InitDefaultsOntologyGetAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyGetAddress_default_instance_;
    new (ptr) ::OntologyGetAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyGetAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologyGetAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologyGetAddress}, {}};

static void InitDefaultsOntologyAddress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologyAddress_default_instance_;
    new (ptr) ::OntologyAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologyAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologyAddress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologyAddress}, {}};

static void InitDefaultsOntologySignTransfer_OntologyTransfer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignTransfer_OntologyTransfer_default_instance_;
    new (ptr) ::OntologySignTransfer_OntologyTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignTransfer_OntologyTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignTransfer_OntologyTransfer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignTransfer_OntologyTransfer}, {}};

static void InitDefaultsOntologySignTransfer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignTransfer_default_instance_;
    new (ptr) ::OntologySignTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OntologySignTransfer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOntologySignTransfer}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base,
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignTransfer_OntologyTransfer.base,}};

static void InitDefaultsOntologySignedTransfer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignedTransfer_default_instance_;
    new (ptr) ::OntologySignedTransfer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignedTransfer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignedTransfer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignedTransfer}, {}};

static void InitDefaultsOntologySignWithdrawOng_OntologyWithdrawOng() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignWithdrawOng_OntologyWithdrawOng_default_instance_;
    new (ptr) ::OntologySignWithdrawOng_OntologyWithdrawOng();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignWithdrawOng_OntologyWithdrawOng::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignWithdrawOng_OntologyWithdrawOng =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignWithdrawOng_OntologyWithdrawOng}, {}};

static void InitDefaultsOntologySignWithdrawOng() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignWithdrawOng_default_instance_;
    new (ptr) ::OntologySignWithdrawOng();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignWithdrawOng::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OntologySignWithdrawOng =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOntologySignWithdrawOng}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base,
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignWithdrawOng_OntologyWithdrawOng.base,}};

static void InitDefaultsOntologySignedWithdrawOng() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignedWithdrawOng_default_instance_;
    new (ptr) ::OntologySignedWithdrawOng();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignedWithdrawOng::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignedWithdrawOng =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignedWithdrawOng}, {}};

static void InitDefaultsOntologySignOntIdRegister_OntologyOntIdRegister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignOntIdRegister_OntologyOntIdRegister_default_instance_;
    new (ptr) ::OntologySignOntIdRegister_OntologyOntIdRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignOntIdRegister_OntologyOntIdRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignOntIdRegister_OntologyOntIdRegister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignOntIdRegister_OntologyOntIdRegister}, {}};

static void InitDefaultsOntologySignOntIdRegister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignOntIdRegister_default_instance_;
    new (ptr) ::OntologySignOntIdRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignOntIdRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OntologySignOntIdRegister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOntologySignOntIdRegister}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base,
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdRegister_OntologyOntIdRegister.base,}};

static void InitDefaultsOntologySignedOntIdRegister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignedOntIdRegister_default_instance_;
    new (ptr) ::OntologySignedOntIdRegister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignedOntIdRegister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignedOntIdRegister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignedOntIdRegister}, {}};

static void InitDefaultsOntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute_default_instance_;
    new (ptr) ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute}, {}};

static void InitDefaultsOntologySignOntIdAddAttributes_OntologyOntIdAddAttributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_default_instance_;
    new (ptr) ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOntologySignOntIdAddAttributes_OntologyOntIdAddAttributes}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute.base,}};

static void InitDefaultsOntologySignOntIdAddAttributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignOntIdAddAttributes_default_instance_;
    new (ptr) ::OntologySignOntIdAddAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignOntIdAddAttributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OntologySignOntIdAddAttributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOntologySignOntIdAddAttributes}, {
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base,
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes.base,}};

static void InitDefaultsOntologySignedOntIdAddAttributes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OntologySignedOntIdAddAttributes_default_instance_;
    new (ptr) ::OntologySignedOntIdAddAttributes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OntologySignedOntIdAddAttributes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OntologySignedOntIdAddAttributes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOntologySignedOntIdAddAttributes}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyTransaction_OntologyTxAttribute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyTransaction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyGetPublicKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyPublicKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyGetAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologyAddress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignTransfer_OntologyTransfer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignTransfer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignedTransfer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignWithdrawOng_OntologyWithdrawOng.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignWithdrawOng.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignedWithdrawOng.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignOntIdRegister_OntologyOntIdRegister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignOntIdRegister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignedOntIdRegister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignOntIdAddAttributes.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OntologySignedOntIdAddAttributes.base);
}

::google::protobuf::Metadata file_level_metadata[19];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction_OntologyTxAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction_OntologyTxAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction_OntologyTxAttribute, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction_OntologyTxAttribute, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, gas_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, gas_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, payer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyTransaction, tx_attributes_),
  1,
  2,
  5,
  3,
  4,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetPublicKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetPublicKey, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetPublicKey, show_display_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyPublicKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyPublicKey, public_key_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetAddress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetAddress, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyGetAddress, show_display_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyAddress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologyAddress, address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, asset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, from_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer_OntologyTransfer, to_address_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignTransfer, transfer_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedTransfer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedTransfer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedTransfer, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedTransfer, payload_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng_OntologyWithdrawOng, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng_OntologyWithdrawOng, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng_OntologyWithdrawOng, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng_OntologyWithdrawOng, from_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng_OntologyWithdrawOng, to_address_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignWithdrawOng, withdraw_ong_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedWithdrawOng, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedWithdrawOng, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedWithdrawOng, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedWithdrawOng, payload_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister_OntologyOntIdRegister, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister_OntologyOntIdRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister_OntologyOntIdRegister, ont_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister_OntologyOntIdRegister, public_key_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdRegister, ont_id_register_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdRegister, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdRegister, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdRegister, payload_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes, ont_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes, public_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes, ont_id_attributes_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes, address_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignOntIdAddAttributes, ont_id_add_attributes_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdAddAttributes, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdAddAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdAddAttributes, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OntologySignedOntIdAddAttributes, payload_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::OntologyTransaction_OntologyTxAttribute)},
  { 9, 21, sizeof(::OntologyTransaction)},
  { 28, 35, sizeof(::OntologyGetPublicKey)},
  { 37, 43, sizeof(::OntologyPublicKey)},
  { 44, 51, sizeof(::OntologyGetAddress)},
  { 53, 59, sizeof(::OntologyAddress)},
  { 60, 69, sizeof(::OntologySignTransfer_OntologyTransfer)},
  { 73, 81, sizeof(::OntologySignTransfer)},
  { 84, 91, sizeof(::OntologySignedTransfer)},
  { 93, 101, sizeof(::OntologySignWithdrawOng_OntologyWithdrawOng)},
  { 104, 112, sizeof(::OntologySignWithdrawOng)},
  { 115, 122, sizeof(::OntologySignedWithdrawOng)},
  { 124, 131, sizeof(::OntologySignOntIdRegister_OntologyOntIdRegister)},
  { 133, 141, sizeof(::OntologySignOntIdRegister)},
  { 144, 151, sizeof(::OntologySignedOntIdRegister)},
  { 153, 161, sizeof(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute)},
  { 164, 172, sizeof(::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes)},
  { 175, 183, sizeof(::OntologySignOntIdAddAttributes)},
  { 186, 193, sizeof(::OntologySignedOntIdAddAttributes)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyTransaction_OntologyTxAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyTransaction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyGetPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyGetAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologyAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignTransfer_OntologyTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignedTransfer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignWithdrawOng_OntologyWithdrawOng_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignWithdrawOng_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignedWithdrawOng_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignOntIdRegister_OntologyOntIdRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignOntIdRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignedOntIdRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignOntIdAddAttributes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OntologySignedOntIdAddAttributes_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages-ontology.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 19);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027messages-ontology.proto\"\355\001\n\023OntologyTr"
      "ansaction\022\017\n\007version\030\001 \001(\r\022\014\n\004type\030\002 \001(\r"
      "\022\r\n\005nonce\030\003 \001(\r\022\021\n\tgas_price\030\004 \001(\004\022\021\n\tga"
      "s_limit\030\005 \001(\004\022\r\n\005payer\030\006 \001(\t\022\?\n\rtx_attri"
      "butes\030\007 \003(\0132(.OntologyTransaction.Ontolo"
      "gyTxAttribute\0322\n\023OntologyTxAttribute\022\r\n\005"
      "usage\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"\?\n\024OntologyGet"
      "PublicKey\022\021\n\taddress_n\030\001 \003(\r\022\024\n\014show_dis"
      "play\030\002 \001(\010\"\'\n\021OntologyPublicKey\022\022\n\npubli"
      "c_key\030\001 \001(\014\"=\n\022OntologyGetAddress\022\021\n\tadd"
      "ress_n\030\001 \003(\r\022\024\n\014show_display\030\002 \001(\010\"\"\n\017On"
      "tologyAddress\022\017\n\007address\030\001 \001(\t\"\305\002\n\024Ontol"
      "ogySignTransfer\022\021\n\taddress_n\030\001 \003(\r\022)\n\013tr"
      "ansaction\030\002 \001(\0132\024.OntologyTransaction\0228\n"
      "\010transfer\030\003 \001(\0132&.OntologySignTransfer.O"
      "ntologyTransfer\032\264\001\n\020OntologyTransfer\022C\n\005"
      "asset\030\001 \001(\01624.OntologySignTransfer.Ontol"
      "ogyTransfer.OntologyAsset\022\016\n\006amount\030\002 \001("
      "\004\022\024\n\014from_address\030\003 \001(\t\022\022\n\nto_address\030\004 "
      "\001(\t\"!\n\rOntologyAsset\022\007\n\003ONT\020\001\022\007\n\003ONG\020\002\"<"
      "\n\026OntologySignedTransfer\022\021\n\tsignature\030\001 "
      "\001(\014\022\017\n\007payload\030\002 \001(\014\"\354\001\n\027OntologySignWit"
      "hdrawOng\022\021\n\taddress_n\030\001 \003(\r\022)\n\013transacti"
      "on\030\002 \001(\0132\024.OntologyTransaction\022B\n\014withdr"
      "aw_ong\030\003 \001(\0132,.OntologySignWithdrawOng.O"
      "ntologyWithdrawOng\032O\n\023OntologyWithdrawOn"
      "g\022\016\n\006amount\030\001 \001(\004\022\024\n\014from_address\030\002 \001(\t\022"
      "\022\n\nto_address\030\003 \001(\t\"\?\n\031OntologySignedWit"
      "hdrawOng\022\021\n\tsignature\030\001 \001(\014\022\017\n\007payload\030\002"
      " \001(\014\"\341\001\n\031OntologySignOntIdRegister\022\021\n\tad"
      "dress_n\030\001 \003(\r\022)\n\013transaction\030\002 \001(\0132\024.Ont"
      "ologyTransaction\022I\n\017ont_id_register\030\003 \001("
      "\01320.OntologySignOntIdRegister.OntologyOn"
      "tIdRegister\032;\n\025OntologyOntIdRegister\022\016\n\006"
      "ont_id\030\001 \001(\t\022\022\n\npublic_key\030\002 \001(\014\"A\n\033Onto"
      "logySignedOntIdRegister\022\021\n\tsignature\030\001 \001"
      "(\014\022\017\n\007payload\030\002 \001(\014\"\256\003\n\036OntologySignOntI"
      "dAddAttributes\022\021\n\taddress_n\030\001 \003(\r\022)\n\013tra"
      "nsaction\030\002 \001(\0132\024.OntologyTransaction\022Y\n\025"
      "ont_id_add_attributes\030\003 \001(\0132:.OntologySi"
      "gnOntIdAddAttributes.OntologyOntIdAddAtt"
      "ributes\032\362\001\n\032OntologyOntIdAddAttributes\022\016"
      "\n\006ont_id\030\001 \001(\t\022\022\n\npublic_key\030\002 \001(\014\022l\n\021on"
      "t_id_attributes\030\003 \003(\0132Q.OntologySignOntI"
      "dAddAttributes.OntologyOntIdAddAttribute"
      "s.OntologyOntIdAttribute\032B\n\026OntologyOntI"
      "dAttribute\022\013\n\003key\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n"
      "\005value\030\003 \001(\t\"F\n OntologySignedOntIdAddAt"
      "tributes\022\021\n\tsignature\030\001 \001(\014\022\017\n\007payload\030\002"
      " \001(\014B<\n#com.satoshilabs.trezor.lib.proto"
      "bufB\025TrezorMessageOntology"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2026);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages-ontology.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2dontology_2eproto
const ::google::protobuf::EnumDescriptor* OntologySignTransfer_OntologyTransfer_OntologyAsset_descriptor() {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2dontology_2eproto::file_level_enum_descriptors[0];
}
bool OntologySignTransfer_OntologyTransfer_OntologyAsset_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OntologySignTransfer_OntologyTransfer_OntologyAsset OntologySignTransfer_OntologyTransfer::ONT;
const OntologySignTransfer_OntologyTransfer_OntologyAsset OntologySignTransfer_OntologyTransfer::ONG;
const OntologySignTransfer_OntologyTransfer_OntologyAsset OntologySignTransfer_OntologyTransfer::OntologyAsset_MIN;
const OntologySignTransfer_OntologyTransfer_OntologyAsset OntologySignTransfer_OntologyTransfer::OntologyAsset_MAX;
const int OntologySignTransfer_OntologyTransfer::OntologyAsset_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OntologyTransaction_OntologyTxAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyTransaction_OntologyTxAttribute::kUsageFieldNumber;
const int OntologyTransaction_OntologyTxAttribute::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyTransaction_OntologyTxAttribute::OntologyTransaction_OntologyTxAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction_OntologyTxAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyTransaction.OntologyTxAttribute)
}
OntologyTransaction_OntologyTxAttribute::OntologyTransaction_OntologyTxAttribute(const OntologyTransaction_OntologyTxAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  usage_ = from.usage_;
  // @@protoc_insertion_point(copy_constructor:OntologyTransaction.OntologyTxAttribute)
}

void OntologyTransaction_OntologyTxAttribute::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usage_ = 0u;
}

OntologyTransaction_OntologyTxAttribute::~OntologyTransaction_OntologyTxAttribute() {
  // @@protoc_insertion_point(destructor:OntologyTransaction.OntologyTxAttribute)
  SharedDtor();
}

void OntologyTransaction_OntologyTxAttribute::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologyTransaction_OntologyTxAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyTransaction_OntologyTxAttribute::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyTransaction_OntologyTxAttribute& OntologyTransaction_OntologyTxAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction_OntologyTxAttribute.base);
  return *internal_default_instance();
}


void OntologyTransaction_OntologyTxAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyTransaction.OntologyTxAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  usage_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyTransaction_OntologyTxAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyTransaction.OntologyTxAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 usage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyTransaction.OntologyTxAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyTransaction.OntologyTxAttribute)
  return false;
#undef DO_
}

void OntologyTransaction_OntologyTxAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyTransaction.OntologyTxAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 usage = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usage(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyTransaction.OntologyTxAttribute)
}

::google::protobuf::uint8* OntologyTransaction_OntologyTxAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyTransaction.OntologyTxAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 usage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usage(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyTransaction.OntologyTxAttribute)
  return target;
}

size_t OntologyTransaction_OntologyTxAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyTransaction.OntologyTxAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 usage = 1;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyTransaction_OntologyTxAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyTransaction.OntologyTxAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyTransaction_OntologyTxAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyTransaction_OntologyTxAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyTransaction.OntologyTxAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyTransaction.OntologyTxAttribute)
    MergeFrom(*source);
  }
}

void OntologyTransaction_OntologyTxAttribute::MergeFrom(const OntologyTransaction_OntologyTxAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyTransaction.OntologyTxAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OntologyTransaction_OntologyTxAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyTransaction.OntologyTxAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyTransaction_OntologyTxAttribute::CopyFrom(const OntologyTransaction_OntologyTxAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyTransaction.OntologyTxAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyTransaction_OntologyTxAttribute::IsInitialized() const {
  return true;
}

void OntologyTransaction_OntologyTxAttribute::Swap(OntologyTransaction_OntologyTxAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyTransaction_OntologyTxAttribute::InternalSwap(OntologyTransaction_OntologyTxAttribute* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usage_, other->usage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyTransaction_OntologyTxAttribute::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologyTransaction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyTransaction::kVersionFieldNumber;
const int OntologyTransaction::kTypeFieldNumber;
const int OntologyTransaction::kNonceFieldNumber;
const int OntologyTransaction::kGasPriceFieldNumber;
const int OntologyTransaction::kGasLimitFieldNumber;
const int OntologyTransaction::kPayerFieldNumber;
const int OntologyTransaction::kTxAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyTransaction::OntologyTransaction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyTransaction)
}
OntologyTransaction::OntologyTransaction(const OntologyTransaction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tx_attributes_(from.tx_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payer()) {
    payer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payer_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:OntologyTransaction)
}

void OntologyTransaction::SharedCtor() {
  payer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
}

OntologyTransaction::~OntologyTransaction() {
  // @@protoc_insertion_point(destructor:OntologyTransaction)
  SharedDtor();
}

void OntologyTransaction::SharedDtor() {
  payer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologyTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyTransaction::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyTransaction& OntologyTransaction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyTransaction.base);
  return *internal_default_instance();
}


void OntologyTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payer_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&version_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyTransaction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gas_price = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_gas_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gas_limit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_gas_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gas_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->payer().data(), static_cast<int>(this->payer().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologyTransaction.payer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OntologyTransaction.OntologyTxAttribute tx_attributes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tx_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyTransaction)
  return false;
#undef DO_
}

void OntologyTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 nonce = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nonce(), output);
  }

  // optional uint64 gas_price = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gas_price(), output);
  }

  // optional uint64 gas_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gas_limit(), output);
  }

  // optional string payer = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payer().data(), static_cast<int>(this->payer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologyTransaction.payer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payer(), output);
  }

  // repeated .OntologyTransaction.OntologyTxAttribute tx_attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_attributes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->tx_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyTransaction)
}

::google::protobuf::uint8* OntologyTransaction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyTransaction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 nonce = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nonce(), target);
  }

  // optional uint64 gas_price = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gas_price(), target);
  }

  // optional uint64 gas_limit = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gas_limit(), target);
  }

  // optional string payer = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->payer().data(), static_cast<int>(this->payer().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologyTransaction.payer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->payer(), target);
  }

  // repeated .OntologyTransaction.OntologyTxAttribute tx_attributes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_attributes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->tx_attributes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyTransaction)
  return target;
}

size_t OntologyTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OntologyTransaction.OntologyTxAttribute tx_attributes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tx_attributes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string payer = 6;
    if (has_payer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payer());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 gas_price = 4;
    if (has_gas_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_price());
    }

    // optional uint64 gas_limit = 5;
    if (has_gas_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gas_limit());
    }

    // optional uint32 nonce = 3;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyTransaction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyTransaction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyTransaction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyTransaction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyTransaction)
    MergeFrom(*source);
  }
}

void OntologyTransaction::MergeFrom(const OntologyTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_attributes_.MergeFrom(from.tx_attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payer();
      payer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payer_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      gas_price_ = from.gas_price_;
    }
    if (cached_has_bits & 0x00000010u) {
      gas_limit_ = from.gas_limit_;
    }
    if (cached_has_bits & 0x00000020u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OntologyTransaction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyTransaction::CopyFrom(const OntologyTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyTransaction::IsInitialized() const {
  return true;
}

void OntologyTransaction::Swap(OntologyTransaction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyTransaction::InternalSwap(OntologyTransaction* other) {
  using std::swap;
  CastToBase(&tx_attributes_)->InternalSwap(CastToBase(&other->tx_attributes_));
  payer_.Swap(&other->payer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(gas_price_, other->gas_price_);
  swap(gas_limit_, other->gas_limit_);
  swap(nonce_, other->nonce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyTransaction::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologyGetPublicKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyGetPublicKey::kAddressNFieldNumber;
const int OntologyGetPublicKey::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyGetPublicKey::OntologyGetPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyGetPublicKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyGetPublicKey)
}
OntologyGetPublicKey::OntologyGetPublicKey(const OntologyGetPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:OntologyGetPublicKey)
}

void OntologyGetPublicKey::SharedCtor() {
  show_display_ = false;
}

OntologyGetPublicKey::~OntologyGetPublicKey() {
  // @@protoc_insertion_point(destructor:OntologyGetPublicKey)
  SharedDtor();
}

void OntologyGetPublicKey::SharedDtor() {
}

void OntologyGetPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyGetPublicKey::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyGetPublicKey& OntologyGetPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyGetPublicKey.base);
  return *internal_default_instance();
}


void OntologyGetPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyGetPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyGetPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_show_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyGetPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyGetPublicKey)
  return false;
#undef DO_
}

void OntologyGetPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyGetPublicKey)
}

::google::protobuf::uint8* OntologyGetPublicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyGetPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyGetPublicKey)
  return target;
}

size_t OntologyGetPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyGetPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  if (has_show_display()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyGetPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyGetPublicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyGetPublicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyGetPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyGetPublicKey)
    MergeFrom(*source);
  }
}

void OntologyGetPublicKey::MergeFrom(const OntologyGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyGetPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void OntologyGetPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyGetPublicKey::CopyFrom(const OntologyGetPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyGetPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyGetPublicKey::IsInitialized() const {
  return true;
}

void OntologyGetPublicKey::Swap(OntologyGetPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyGetPublicKey::InternalSwap(OntologyGetPublicKey* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyGetPublicKey::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologyPublicKey::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyPublicKey::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyPublicKey::OntologyPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyPublicKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyPublicKey)
}
OntologyPublicKey::OntologyPublicKey(const OntologyPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologyPublicKey)
}

void OntologyPublicKey::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologyPublicKey::~OntologyPublicKey() {
  // @@protoc_insertion_point(destructor:OntologyPublicKey)
  SharedDtor();
}

void OntologyPublicKey::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologyPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyPublicKey::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyPublicKey& OntologyPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyPublicKey.base);
  return *internal_default_instance();
}


void OntologyPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    public_key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes public_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyPublicKey)
  return false;
#undef DO_
}

void OntologyPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyPublicKey)
}

::google::protobuf::uint8* OntologyPublicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyPublicKey)
  return target;
}

size_t OntologyPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes public_key = 1;
  if (has_public_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyPublicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyPublicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyPublicKey)
    MergeFrom(*source);
  }
}

void OntologyPublicKey::MergeFrom(const OntologyPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    set_has_public_key();
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
}

void OntologyPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyPublicKey::CopyFrom(const OntologyPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyPublicKey::IsInitialized() const {
  return true;
}

void OntologyPublicKey::Swap(OntologyPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyPublicKey::InternalSwap(OntologyPublicKey* other) {
  using std::swap;
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyPublicKey::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologyGetAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyGetAddress::kAddressNFieldNumber;
const int OntologyGetAddress::kShowDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyGetAddress::OntologyGetAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyGetAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyGetAddress)
}
OntologyGetAddress::OntologyGetAddress(const OntologyGetAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_display_ = from.show_display_;
  // @@protoc_insertion_point(copy_constructor:OntologyGetAddress)
}

void OntologyGetAddress::SharedCtor() {
  show_display_ = false;
}

OntologyGetAddress::~OntologyGetAddress() {
  // @@protoc_insertion_point(destructor:OntologyGetAddress)
  SharedDtor();
}

void OntologyGetAddress::SharedDtor() {
}

void OntologyGetAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyGetAddress::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyGetAddress& OntologyGetAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyGetAddress.base);
  return *internal_default_instance();
}


void OntologyGetAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  show_display_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyGetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyGetAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_display = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_show_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyGetAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyGetAddress)
  return false;
#undef DO_
}

void OntologyGetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyGetAddress)
}

::google::protobuf::uint8* OntologyGetAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyGetAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool show_display = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyGetAddress)
  return target;
}

size_t OntologyGetAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyGetAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  // optional bool show_display = 2;
  if (has_show_display()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyGetAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyGetAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyGetAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyGetAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyGetAddress)
    MergeFrom(*source);
  }
}

void OntologyGetAddress::MergeFrom(const OntologyGetAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyGetAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  if (from.has_show_display()) {
    set_show_display(from.show_display());
  }
}

void OntologyGetAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyGetAddress::CopyFrom(const OntologyGetAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyGetAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyGetAddress::IsInitialized() const {
  return true;
}

void OntologyGetAddress::Swap(OntologyGetAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyGetAddress::InternalSwap(OntologyGetAddress* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(show_display_, other->show_display_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyGetAddress::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologyAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologyAddress::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologyAddress::OntologyAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologyAddress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologyAddress)
}
OntologyAddress::OntologyAddress(const OntologyAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologyAddress)
}

void OntologyAddress::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologyAddress::~OntologyAddress() {
  // @@protoc_insertion_point(destructor:OntologyAddress)
  SharedDtor();
}

void OntologyAddress::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologyAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologyAddress::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologyAddress& OntologyAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologyAddress.base);
  return *internal_default_instance();
}


void OntologyAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologyAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    address_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologyAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologyAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologyAddress.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologyAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologyAddress)
  return false;
#undef DO_
}

void OntologyAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologyAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologyAddress.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologyAddress)
}

::google::protobuf::uint8* OntologyAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologyAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologyAddress.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologyAddress)
  return target;
}

size_t OntologyAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologyAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologyAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologyAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologyAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologyAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologyAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologyAddress)
    MergeFrom(*source);
  }
}

void OntologyAddress::MergeFrom(const OntologyAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologyAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    set_has_address();
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void OntologyAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologyAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologyAddress::CopyFrom(const OntologyAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologyAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologyAddress::IsInitialized() const {
  return true;
}

void OntologyAddress::Swap(OntologyAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologyAddress::InternalSwap(OntologyAddress* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologyAddress::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignTransfer_OntologyTransfer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignTransfer_OntologyTransfer::kAssetFieldNumber;
const int OntologySignTransfer_OntologyTransfer::kAmountFieldNumber;
const int OntologySignTransfer_OntologyTransfer::kFromAddressFieldNumber;
const int OntologySignTransfer_OntologyTransfer::kToAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignTransfer_OntologyTransfer::OntologySignTransfer_OntologyTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignTransfer_OntologyTransfer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignTransfer.OntologyTransfer)
}
OntologySignTransfer_OntologyTransfer::OntologySignTransfer_OntologyTransfer(const OntologySignTransfer_OntologyTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_address()) {
    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_address()) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&asset_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(asset_));
  // @@protoc_insertion_point(copy_constructor:OntologySignTransfer.OntologyTransfer)
}

void OntologySignTransfer_OntologyTransfer::SharedCtor() {
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
  asset_ = 1;
}

OntologySignTransfer_OntologyTransfer::~OntologySignTransfer_OntologyTransfer() {
  // @@protoc_insertion_point(destructor:OntologySignTransfer.OntologyTransfer)
  SharedDtor();
}

void OntologySignTransfer_OntologyTransfer::SharedDtor() {
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignTransfer_OntologyTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignTransfer_OntologyTransfer::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignTransfer_OntologyTransfer& OntologySignTransfer_OntologyTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignTransfer_OntologyTransfer.base);
  return *internal_default_instance();
}


void OntologySignTransfer_OntologyTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignTransfer.OntologyTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    amount_ = GOOGLE_ULONGLONG(0);
    asset_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignTransfer_OntologyTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignTransfer.OntologyTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::OntologySignTransfer_OntologyTransfer_OntologyAsset_IsValid(value)) {
            set_asset(static_cast< ::OntologySignTransfer_OntologyTransfer_OntologyAsset >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 amount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_address().data(), static_cast<int>(this->from_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignTransfer.OntologyTransfer.from_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_address().data(), static_cast<int>(this->to_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignTransfer.OntologyTransfer.to_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignTransfer.OntologyTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignTransfer.OntologyTransfer)
  return false;
#undef DO_
}

void OntologySignTransfer_OntologyTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignTransfer.OntologyTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->asset(), output);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->amount(), output);
  }

  // optional string from_address = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_address().data(), static_cast<int>(this->from_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignTransfer.OntologyTransfer.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_address(), output);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignTransfer.OntologyTransfer.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignTransfer.OntologyTransfer)
}

::google::protobuf::uint8* OntologySignTransfer_OntologyTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignTransfer.OntologyTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->asset(), target);
  }

  // optional uint64 amount = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->amount(), target);
  }

  // optional string from_address = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_address().data(), static_cast<int>(this->from_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignTransfer.OntologyTransfer.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_address(), target);
  }

  // optional string to_address = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignTransfer.OntologyTransfer.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignTransfer.OntologyTransfer)
  return target;
}

size_t OntologySignTransfer_OntologyTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignTransfer.OntologyTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string from_address = 3;
    if (has_from_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_address());
    }

    // optional string to_address = 4;
    if (has_to_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_address());
    }

    // optional uint64 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

    // optional .OntologySignTransfer.OntologyTransfer.OntologyAsset asset = 1;
    if (has_asset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->asset());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignTransfer_OntologyTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignTransfer.OntologyTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignTransfer_OntologyTransfer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignTransfer_OntologyTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignTransfer.OntologyTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignTransfer.OntologyTransfer)
    MergeFrom(*source);
  }
}

void OntologySignTransfer_OntologyTransfer::MergeFrom(const OntologySignTransfer_OntologyTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignTransfer.OntologyTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_address();
      from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_address();
      to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      asset_ = from.asset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OntologySignTransfer_OntologyTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignTransfer.OntologyTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignTransfer_OntologyTransfer::CopyFrom(const OntologySignTransfer_OntologyTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignTransfer.OntologyTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignTransfer_OntologyTransfer::IsInitialized() const {
  return true;
}

void OntologySignTransfer_OntologyTransfer::Swap(OntologySignTransfer_OntologyTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignTransfer_OntologyTransfer::InternalSwap(OntologySignTransfer_OntologyTransfer* other) {
  using std::swap;
  from_address_.Swap(&other->from_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(asset_, other->asset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignTransfer_OntologyTransfer::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignTransfer::InitAsDefaultInstance() {
  ::_OntologySignTransfer_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::OntologyTransaction*>(
      ::OntologyTransaction::internal_default_instance());
  ::_OntologySignTransfer_default_instance_._instance.get_mutable()->transfer_ = const_cast< ::OntologySignTransfer_OntologyTransfer*>(
      ::OntologySignTransfer_OntologyTransfer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignTransfer::kAddressNFieldNumber;
const int OntologySignTransfer::kTransactionFieldNumber;
const int OntologySignTransfer::kTransferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignTransfer::OntologySignTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignTransfer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignTransfer)
}
OntologySignTransfer::OntologySignTransfer(const OntologySignTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::OntologyTransaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_transfer()) {
    transfer_ = new ::OntologySignTransfer_OntologyTransfer(*from.transfer_);
  } else {
    transfer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignTransfer)
}

void OntologySignTransfer::SharedCtor() {
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(transfer_));
}

OntologySignTransfer::~OntologySignTransfer() {
  // @@protoc_insertion_point(destructor:OntologySignTransfer)
  SharedDtor();
}

void OntologySignTransfer::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete transfer_;
}

void OntologySignTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignTransfer::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignTransfer& OntologySignTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignTransfer.base);
  return *internal_default_instance();
}


void OntologySignTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transaction_ != NULL);
      transaction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transfer_ != NULL);
      transfer_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologyTransaction transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologySignTransfer.OntologyTransfer transfer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignTransfer)
  return false;
#undef DO_
}

void OntologySignTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_transaction(), output);
  }

  // optional .OntologySignTransfer.OntologyTransfer transfer = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_transfer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignTransfer)
}

::google::protobuf::uint8* OntologySignTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_transaction(), deterministic, target);
  }

  // optional .OntologySignTransfer.OntologyTransfer transfer = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_transfer(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignTransfer)
  return target;
}

size_t OntologySignTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OntologyTransaction transaction = 2;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_);
    }

    // optional .OntologySignTransfer.OntologyTransfer transfer = 3;
    if (has_transfer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transfer_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignTransfer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignTransfer)
    MergeFrom(*source);
  }
}

void OntologySignTransfer::MergeFrom(const OntologySignTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transaction()->::OntologyTransaction::MergeFrom(from.transaction());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_transfer()->::OntologySignTransfer_OntologyTransfer::MergeFrom(from.transfer());
    }
  }
}

void OntologySignTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignTransfer::CopyFrom(const OntologySignTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignTransfer::IsInitialized() const {
  return true;
}

void OntologySignTransfer::Swap(OntologySignTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignTransfer::InternalSwap(OntologySignTransfer* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(transaction_, other->transaction_);
  swap(transfer_, other->transfer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignTransfer::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignedTransfer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignedTransfer::kSignatureFieldNumber;
const int OntologySignedTransfer::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignedTransfer::OntologySignedTransfer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignedTransfer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignedTransfer)
}
OntologySignedTransfer::OntologySignedTransfer(const OntologySignedTransfer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignedTransfer)
}

void OntologySignedTransfer::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignedTransfer::~OntologySignedTransfer() {
  // @@protoc_insertion_point(destructor:OntologySignedTransfer)
  SharedDtor();
}

void OntologySignedTransfer::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignedTransfer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignedTransfer::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignedTransfer& OntologySignedTransfer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignedTransfer.base);
  return *internal_default_instance();
}


void OntologySignedTransfer::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignedTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignedTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignedTransfer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignedTransfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignedTransfer)
  return false;
#undef DO_
}

void OntologySignedTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignedTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignedTransfer)
}

::google::protobuf::uint8* OntologySignedTransfer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignedTransfer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignedTransfer)
  return target;
}

size_t OntologySignedTransfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignedTransfer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignedTransfer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignedTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignedTransfer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignedTransfer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignedTransfer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignedTransfer)
    MergeFrom(*source);
  }
}

void OntologySignedTransfer::MergeFrom(const OntologySignedTransfer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignedTransfer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
}

void OntologySignedTransfer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignedTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignedTransfer::CopyFrom(const OntologySignedTransfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignedTransfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignedTransfer::IsInitialized() const {
  return true;
}

void OntologySignedTransfer::Swap(OntologySignedTransfer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignedTransfer::InternalSwap(OntologySignedTransfer* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignedTransfer::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignWithdrawOng_OntologyWithdrawOng::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignWithdrawOng_OntologyWithdrawOng::kAmountFieldNumber;
const int OntologySignWithdrawOng_OntologyWithdrawOng::kFromAddressFieldNumber;
const int OntologySignWithdrawOng_OntologyWithdrawOng::kToAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignWithdrawOng_OntologyWithdrawOng::OntologySignWithdrawOng_OntologyWithdrawOng()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignWithdrawOng_OntologyWithdrawOng.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignWithdrawOng.OntologyWithdrawOng)
}
OntologySignWithdrawOng_OntologyWithdrawOng::OntologySignWithdrawOng_OntologyWithdrawOng(const OntologySignWithdrawOng_OntologyWithdrawOng& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_address()) {
    from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
  }
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_address()) {
    to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
  }
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:OntologySignWithdrawOng.OntologyWithdrawOng)
}

void OntologySignWithdrawOng_OntologyWithdrawOng::SharedCtor() {
  from_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = GOOGLE_ULONGLONG(0);
}

OntologySignWithdrawOng_OntologyWithdrawOng::~OntologySignWithdrawOng_OntologyWithdrawOng() {
  // @@protoc_insertion_point(destructor:OntologySignWithdrawOng.OntologyWithdrawOng)
  SharedDtor();
}

void OntologySignWithdrawOng_OntologyWithdrawOng::SharedDtor() {
  from_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignWithdrawOng_OntologyWithdrawOng::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignWithdrawOng_OntologyWithdrawOng::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignWithdrawOng_OntologyWithdrawOng& OntologySignWithdrawOng_OntologyWithdrawOng::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignWithdrawOng_OntologyWithdrawOng.base);
  return *internal_default_instance();
}


void OntologySignWithdrawOng_OntologyWithdrawOng::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_address_.ClearNonDefaultToEmptyNoArena();
    }
  }
  amount_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignWithdrawOng_OntologyWithdrawOng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 amount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_address().data(), static_cast<int>(this->from_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignWithdrawOng.OntologyWithdrawOng.from_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_address().data(), static_cast<int>(this->to_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignWithdrawOng.OntologyWithdrawOng.to_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignWithdrawOng.OntologyWithdrawOng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignWithdrawOng.OntologyWithdrawOng)
  return false;
#undef DO_
}

void OntologySignWithdrawOng_OntologyWithdrawOng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->amount(), output);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_address().data(), static_cast<int>(this->from_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignWithdrawOng.OntologyWithdrawOng.from_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_address(), output);
  }

  // optional string to_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignWithdrawOng.OntologyWithdrawOng.to_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignWithdrawOng.OntologyWithdrawOng)
}

::google::protobuf::uint8* OntologySignWithdrawOng_OntologyWithdrawOng::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 amount = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->amount(), target);
  }

  // optional string from_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_address().data(), static_cast<int>(this->from_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignWithdrawOng.OntologyWithdrawOng.from_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_address(), target);
  }

  // optional string to_address = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_address().data(), static_cast<int>(this->to_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignWithdrawOng.OntologyWithdrawOng.to_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignWithdrawOng.OntologyWithdrawOng)
  return target;
}

size_t OntologySignWithdrawOng_OntologyWithdrawOng::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string from_address = 2;
    if (has_from_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_address());
    }

    // optional string to_address = 3;
    if (has_to_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_address());
    }

    // optional uint64 amount = 1;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->amount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignWithdrawOng_OntologyWithdrawOng::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignWithdrawOng_OntologyWithdrawOng* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignWithdrawOng_OntologyWithdrawOng>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignWithdrawOng.OntologyWithdrawOng)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignWithdrawOng.OntologyWithdrawOng)
    MergeFrom(*source);
  }
}

void OntologySignWithdrawOng_OntologyWithdrawOng::MergeFrom(const OntologySignWithdrawOng_OntologyWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_address();
      from_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_address();
      to_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      amount_ = from.amount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OntologySignWithdrawOng_OntologyWithdrawOng::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignWithdrawOng_OntologyWithdrawOng::CopyFrom(const OntologySignWithdrawOng_OntologyWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignWithdrawOng.OntologyWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignWithdrawOng_OntologyWithdrawOng::IsInitialized() const {
  return true;
}

void OntologySignWithdrawOng_OntologyWithdrawOng::Swap(OntologySignWithdrawOng_OntologyWithdrawOng* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignWithdrawOng_OntologyWithdrawOng::InternalSwap(OntologySignWithdrawOng_OntologyWithdrawOng* other) {
  using std::swap;
  from_address_.Swap(&other->from_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_address_.Swap(&other->to_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignWithdrawOng_OntologyWithdrawOng::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignWithdrawOng::InitAsDefaultInstance() {
  ::_OntologySignWithdrawOng_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::OntologyTransaction*>(
      ::OntologyTransaction::internal_default_instance());
  ::_OntologySignWithdrawOng_default_instance_._instance.get_mutable()->withdraw_ong_ = const_cast< ::OntologySignWithdrawOng_OntologyWithdrawOng*>(
      ::OntologySignWithdrawOng_OntologyWithdrawOng::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignWithdrawOng::kAddressNFieldNumber;
const int OntologySignWithdrawOng::kTransactionFieldNumber;
const int OntologySignWithdrawOng::kWithdrawOngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignWithdrawOng::OntologySignWithdrawOng()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignWithdrawOng.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignWithdrawOng)
}
OntologySignWithdrawOng::OntologySignWithdrawOng(const OntologySignWithdrawOng& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::OntologyTransaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_withdraw_ong()) {
    withdraw_ong_ = new ::OntologySignWithdrawOng_OntologyWithdrawOng(*from.withdraw_ong_);
  } else {
    withdraw_ong_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignWithdrawOng)
}

void OntologySignWithdrawOng::SharedCtor() {
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&withdraw_ong_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(withdraw_ong_));
}

OntologySignWithdrawOng::~OntologySignWithdrawOng() {
  // @@protoc_insertion_point(destructor:OntologySignWithdrawOng)
  SharedDtor();
}

void OntologySignWithdrawOng::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete withdraw_ong_;
}

void OntologySignWithdrawOng::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignWithdrawOng::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignWithdrawOng& OntologySignWithdrawOng::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignWithdrawOng.base);
  return *internal_default_instance();
}


void OntologySignWithdrawOng::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transaction_ != NULL);
      transaction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(withdraw_ong_ != NULL);
      withdraw_ong_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignWithdrawOng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignWithdrawOng)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologyTransaction transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologySignWithdrawOng.OntologyWithdrawOng withdraw_ong = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_withdraw_ong()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignWithdrawOng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignWithdrawOng)
  return false;
#undef DO_
}

void OntologySignWithdrawOng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_transaction(), output);
  }

  // optional .OntologySignWithdrawOng.OntologyWithdrawOng withdraw_ong = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_withdraw_ong(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignWithdrawOng)
}

::google::protobuf::uint8* OntologySignWithdrawOng::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_transaction(), deterministic, target);
  }

  // optional .OntologySignWithdrawOng.OntologyWithdrawOng withdraw_ong = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_withdraw_ong(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignWithdrawOng)
  return target;
}

size_t OntologySignWithdrawOng::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignWithdrawOng)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OntologyTransaction transaction = 2;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_);
    }

    // optional .OntologySignWithdrawOng.OntologyWithdrawOng withdraw_ong = 3;
    if (has_withdraw_ong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *withdraw_ong_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignWithdrawOng::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignWithdrawOng* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignWithdrawOng>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignWithdrawOng)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignWithdrawOng)
    MergeFrom(*source);
  }
}

void OntologySignWithdrawOng::MergeFrom(const OntologySignWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transaction()->::OntologyTransaction::MergeFrom(from.transaction());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_withdraw_ong()->::OntologySignWithdrawOng_OntologyWithdrawOng::MergeFrom(from.withdraw_ong());
    }
  }
}

void OntologySignWithdrawOng::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignWithdrawOng::CopyFrom(const OntologySignWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignWithdrawOng::IsInitialized() const {
  return true;
}

void OntologySignWithdrawOng::Swap(OntologySignWithdrawOng* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignWithdrawOng::InternalSwap(OntologySignWithdrawOng* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(transaction_, other->transaction_);
  swap(withdraw_ong_, other->withdraw_ong_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignWithdrawOng::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignedWithdrawOng::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignedWithdrawOng::kSignatureFieldNumber;
const int OntologySignedWithdrawOng::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignedWithdrawOng::OntologySignedWithdrawOng()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignedWithdrawOng.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignedWithdrawOng)
}
OntologySignedWithdrawOng::OntologySignedWithdrawOng(const OntologySignedWithdrawOng& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignedWithdrawOng)
}

void OntologySignedWithdrawOng::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignedWithdrawOng::~OntologySignedWithdrawOng() {
  // @@protoc_insertion_point(destructor:OntologySignedWithdrawOng)
  SharedDtor();
}

void OntologySignedWithdrawOng::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignedWithdrawOng::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignedWithdrawOng::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignedWithdrawOng& OntologySignedWithdrawOng::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignedWithdrawOng.base);
  return *internal_default_instance();
}


void OntologySignedWithdrawOng::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignedWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignedWithdrawOng::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignedWithdrawOng)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignedWithdrawOng)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignedWithdrawOng)
  return false;
#undef DO_
}

void OntologySignedWithdrawOng::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignedWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignedWithdrawOng)
}

::google::protobuf::uint8* OntologySignedWithdrawOng::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignedWithdrawOng)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignedWithdrawOng)
  return target;
}

size_t OntologySignedWithdrawOng::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignedWithdrawOng)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignedWithdrawOng::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignedWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignedWithdrawOng* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignedWithdrawOng>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignedWithdrawOng)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignedWithdrawOng)
    MergeFrom(*source);
  }
}

void OntologySignedWithdrawOng::MergeFrom(const OntologySignedWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignedWithdrawOng)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
}

void OntologySignedWithdrawOng::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignedWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignedWithdrawOng::CopyFrom(const OntologySignedWithdrawOng& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignedWithdrawOng)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignedWithdrawOng::IsInitialized() const {
  return true;
}

void OntologySignedWithdrawOng::Swap(OntologySignedWithdrawOng* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignedWithdrawOng::InternalSwap(OntologySignedWithdrawOng* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignedWithdrawOng::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignOntIdRegister_OntologyOntIdRegister::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignOntIdRegister_OntologyOntIdRegister::kOntIdFieldNumber;
const int OntologySignOntIdRegister_OntologyOntIdRegister::kPublicKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignOntIdRegister_OntologyOntIdRegister::OntologySignOntIdRegister_OntologyOntIdRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdRegister_OntologyOntIdRegister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignOntIdRegister.OntologyOntIdRegister)
}
OntologySignOntIdRegister_OntologyOntIdRegister::OntologySignOntIdRegister_OntologyOntIdRegister(const OntologySignOntIdRegister_OntologyOntIdRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ont_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ont_id()) {
    ont_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ont_id_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignOntIdRegister.OntologyOntIdRegister)
}

void OntologySignOntIdRegister_OntologyOntIdRegister::SharedCtor() {
  ont_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignOntIdRegister_OntologyOntIdRegister::~OntologySignOntIdRegister_OntologyOntIdRegister() {
  // @@protoc_insertion_point(destructor:OntologySignOntIdRegister.OntologyOntIdRegister)
  SharedDtor();
}

void OntologySignOntIdRegister_OntologyOntIdRegister::SharedDtor() {
  ont_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignOntIdRegister_OntologyOntIdRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignOntIdRegister_OntologyOntIdRegister::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignOntIdRegister_OntologyOntIdRegister& OntologySignOntIdRegister_OntologyOntIdRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdRegister_OntologyOntIdRegister.base);
  return *internal_default_instance();
}


void OntologySignOntIdRegister_OntologyOntIdRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ont_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignOntIdRegister_OntologyOntIdRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ont_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ont_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ont_id().data(), static_cast<int>(this->ont_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignOntIdRegister.OntologyOntIdRegister.ont_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignOntIdRegister.OntologyOntIdRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignOntIdRegister.OntologyOntIdRegister)
  return false;
#undef DO_
}

void OntologySignOntIdRegister_OntologyOntIdRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ont_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ont_id().data(), static_cast<int>(this->ont_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdRegister.OntologyOntIdRegister.ont_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ont_id(), output);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignOntIdRegister.OntologyOntIdRegister)
}

::google::protobuf::uint8* OntologySignOntIdRegister_OntologyOntIdRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ont_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ont_id().data(), static_cast<int>(this->ont_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdRegister.OntologyOntIdRegister.ont_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ont_id(), target);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignOntIdRegister.OntologyOntIdRegister)
  return target;
}

size_t OntologySignOntIdRegister_OntologyOntIdRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string ont_id = 1;
    if (has_ont_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ont_id());
    }

    // optional bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignOntIdRegister_OntologyOntIdRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignOntIdRegister_OntologyOntIdRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignOntIdRegister_OntologyOntIdRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignOntIdRegister.OntologyOntIdRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignOntIdRegister.OntologyOntIdRegister)
    MergeFrom(*source);
  }
}

void OntologySignOntIdRegister_OntologyOntIdRegister::MergeFrom(const OntologySignOntIdRegister_OntologyOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ont_id();
      ont_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ont_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
}

void OntologySignOntIdRegister_OntologyOntIdRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignOntIdRegister_OntologyOntIdRegister::CopyFrom(const OntologySignOntIdRegister_OntologyOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignOntIdRegister.OntologyOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignOntIdRegister_OntologyOntIdRegister::IsInitialized() const {
  return true;
}

void OntologySignOntIdRegister_OntologyOntIdRegister::Swap(OntologySignOntIdRegister_OntologyOntIdRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignOntIdRegister_OntologyOntIdRegister::InternalSwap(OntologySignOntIdRegister_OntologyOntIdRegister* other) {
  using std::swap;
  ont_id_.Swap(&other->ont_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignOntIdRegister_OntologyOntIdRegister::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignOntIdRegister::InitAsDefaultInstance() {
  ::_OntologySignOntIdRegister_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::OntologyTransaction*>(
      ::OntologyTransaction::internal_default_instance());
  ::_OntologySignOntIdRegister_default_instance_._instance.get_mutable()->ont_id_register_ = const_cast< ::OntologySignOntIdRegister_OntologyOntIdRegister*>(
      ::OntologySignOntIdRegister_OntologyOntIdRegister::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignOntIdRegister::kAddressNFieldNumber;
const int OntologySignOntIdRegister::kTransactionFieldNumber;
const int OntologySignOntIdRegister::kOntIdRegisterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignOntIdRegister::OntologySignOntIdRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdRegister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignOntIdRegister)
}
OntologySignOntIdRegister::OntologySignOntIdRegister(const OntologySignOntIdRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::OntologyTransaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_ont_id_register()) {
    ont_id_register_ = new ::OntologySignOntIdRegister_OntologyOntIdRegister(*from.ont_id_register_);
  } else {
    ont_id_register_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignOntIdRegister)
}

void OntologySignOntIdRegister::SharedCtor() {
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ont_id_register_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(ont_id_register_));
}

OntologySignOntIdRegister::~OntologySignOntIdRegister() {
  // @@protoc_insertion_point(destructor:OntologySignOntIdRegister)
  SharedDtor();
}

void OntologySignOntIdRegister::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete ont_id_register_;
}

void OntologySignOntIdRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignOntIdRegister::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignOntIdRegister& OntologySignOntIdRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdRegister.base);
  return *internal_default_instance();
}


void OntologySignOntIdRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transaction_ != NULL);
      transaction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ont_id_register_ != NULL);
      ont_id_register_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignOntIdRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignOntIdRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologyTransaction transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologySignOntIdRegister.OntologyOntIdRegister ont_id_register = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ont_id_register()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignOntIdRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignOntIdRegister)
  return false;
#undef DO_
}

void OntologySignOntIdRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_transaction(), output);
  }

  // optional .OntologySignOntIdRegister.OntologyOntIdRegister ont_id_register = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ont_id_register(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignOntIdRegister)
}

::google::protobuf::uint8* OntologySignOntIdRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_transaction(), deterministic, target);
  }

  // optional .OntologySignOntIdRegister.OntologyOntIdRegister ont_id_register = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ont_id_register(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignOntIdRegister)
  return target;
}

size_t OntologySignOntIdRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignOntIdRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OntologyTransaction transaction = 2;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_);
    }

    // optional .OntologySignOntIdRegister.OntologyOntIdRegister ont_id_register = 3;
    if (has_ont_id_register()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ont_id_register_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignOntIdRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignOntIdRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignOntIdRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignOntIdRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignOntIdRegister)
    MergeFrom(*source);
  }
}

void OntologySignOntIdRegister::MergeFrom(const OntologySignOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transaction()->::OntologyTransaction::MergeFrom(from.transaction());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ont_id_register()->::OntologySignOntIdRegister_OntologyOntIdRegister::MergeFrom(from.ont_id_register());
    }
  }
}

void OntologySignOntIdRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignOntIdRegister::CopyFrom(const OntologySignOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignOntIdRegister::IsInitialized() const {
  return true;
}

void OntologySignOntIdRegister::Swap(OntologySignOntIdRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignOntIdRegister::InternalSwap(OntologySignOntIdRegister* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(transaction_, other->transaction_);
  swap(ont_id_register_, other->ont_id_register_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignOntIdRegister::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignedOntIdRegister::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignedOntIdRegister::kSignatureFieldNumber;
const int OntologySignedOntIdRegister::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignedOntIdRegister::OntologySignedOntIdRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignedOntIdRegister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignedOntIdRegister)
}
OntologySignedOntIdRegister::OntologySignedOntIdRegister(const OntologySignedOntIdRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignedOntIdRegister)
}

void OntologySignedOntIdRegister::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignedOntIdRegister::~OntologySignedOntIdRegister() {
  // @@protoc_insertion_point(destructor:OntologySignedOntIdRegister)
  SharedDtor();
}

void OntologySignedOntIdRegister::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignedOntIdRegister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignedOntIdRegister::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignedOntIdRegister& OntologySignedOntIdRegister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignedOntIdRegister.base);
  return *internal_default_instance();
}


void OntologySignedOntIdRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignedOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignedOntIdRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignedOntIdRegister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignedOntIdRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignedOntIdRegister)
  return false;
#undef DO_
}

void OntologySignedOntIdRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignedOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignedOntIdRegister)
}

::google::protobuf::uint8* OntologySignedOntIdRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignedOntIdRegister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignedOntIdRegister)
  return target;
}

size_t OntologySignedOntIdRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignedOntIdRegister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignedOntIdRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignedOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignedOntIdRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignedOntIdRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignedOntIdRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignedOntIdRegister)
    MergeFrom(*source);
  }
}

void OntologySignedOntIdRegister::MergeFrom(const OntologySignedOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignedOntIdRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
}

void OntologySignedOntIdRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignedOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignedOntIdRegister::CopyFrom(const OntologySignedOntIdRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignedOntIdRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignedOntIdRegister::IsInitialized() const {
  return true;
}

void OntologySignedOntIdRegister::Swap(OntologySignedOntIdRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignedOntIdRegister::InternalSwap(OntologySignedOntIdRegister* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignedOntIdRegister::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::kKeyFieldNumber;
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::kTypeFieldNumber;
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
}
OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::~OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute() {
  // @@protoc_insertion_point(destructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  SharedDtor();
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute& OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute.base);
  return *internal_default_instance();
}


void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  return false;
#undef DO_
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
}

::google::protobuf::uint8* OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  return target;
}

size_t OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
    MergeFrom(*source);
  }
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::MergeFrom(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::CopyFrom(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::IsInitialized() const {
  return true;
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::Swap(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::InternalSwap(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::kOntIdFieldNumber;
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::kPublicKeyFieldNumber;
const int OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::kOntIdAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
}
OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ont_id_attributes_(from.ont_id_attributes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ont_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ont_id()) {
    ont_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ont_id_);
  }
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_public_key()) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::SharedCtor() {
  ont_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::~OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes() {
  // @@protoc_insertion_point(destructor:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  SharedDtor();
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::SharedDtor() {
  ont_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes& OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes.base);
  return *internal_default_instance();
}


void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ont_id_attributes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ont_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      public_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ont_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ont_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ont_id().data(), static_cast<int>(this->ont_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.ont_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes public_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute ont_id_attributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_ont_id_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  return false;
#undef DO_
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ont_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ont_id().data(), static_cast<int>(this->ont_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.ont_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ont_id(), output);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // repeated .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute ont_id_attributes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ont_id_attributes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->ont_id_attributes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
}

::google::protobuf::uint8* OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string ont_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ont_id().data(), static_cast<int>(this->ont_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.ont_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ont_id(), target);
  }

  // optional bytes public_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->public_key(), target);
  }

  // repeated .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute ont_id_attributes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ont_id_attributes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->ont_id_attributes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  return target;
}

size_t OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes.OntologyOntIdAttribute ont_id_attributes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->ont_id_attributes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ont_id_attributes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string ont_id = 1;
    if (has_ont_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ont_id());
    }

    // optional bytes public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->public_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
    MergeFrom(*source);
  }
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::MergeFrom(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ont_id_attributes_.MergeFrom(from.ont_id_attributes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ont_id();
      ont_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ont_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_public_key();
      public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
    }
  }
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::CopyFrom(const OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::IsInitialized() const {
  return true;
}

void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::Swap(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::InternalSwap(OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes* other) {
  using std::swap;
  CastToBase(&ont_id_attributes_)->InternalSwap(CastToBase(&other->ont_id_attributes_));
  ont_id_.Swap(&other->ont_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  public_key_.Swap(&other->public_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignOntIdAddAttributes::InitAsDefaultInstance() {
  ::_OntologySignOntIdAddAttributes_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::OntologyTransaction*>(
      ::OntologyTransaction::internal_default_instance());
  ::_OntologySignOntIdAddAttributes_default_instance_._instance.get_mutable()->ont_id_add_attributes_ = const_cast< ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes*>(
      ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignOntIdAddAttributes::kAddressNFieldNumber;
const int OntologySignOntIdAddAttributes::kTransactionFieldNumber;
const int OntologySignOntIdAddAttributes::kOntIdAddAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignOntIdAddAttributes::OntologySignOntIdAddAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignOntIdAddAttributes)
}
OntologySignOntIdAddAttributes::OntologySignOntIdAddAttributes(const OntologySignOntIdAddAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      address_n_(from.address_n_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_transaction()) {
    transaction_ = new ::OntologyTransaction(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_ont_id_add_attributes()) {
    ont_id_add_attributes_ = new ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes(*from.ont_id_add_attributes_);
  } else {
    ont_id_add_attributes_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignOntIdAddAttributes)
}

void OntologySignOntIdAddAttributes::SharedCtor() {
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ont_id_add_attributes_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(ont_id_add_attributes_));
}

OntologySignOntIdAddAttributes::~OntologySignOntIdAddAttributes() {
  // @@protoc_insertion_point(destructor:OntologySignOntIdAddAttributes)
  SharedDtor();
}

void OntologySignOntIdAddAttributes::SharedDtor() {
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete ont_id_add_attributes_;
}

void OntologySignOntIdAddAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignOntIdAddAttributes::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignOntIdAddAttributes& OntologySignOntIdAddAttributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignOntIdAddAttributes.base);
  return *internal_default_instance();
}


void OntologySignOntIdAddAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_n_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(transaction_ != NULL);
      transaction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ont_id_add_attributes_ != NULL);
      ont_id_add_attributes_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignOntIdAddAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignOntIdAddAttributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 address_n = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_address_n())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_address_n())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologyTransaction transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes ont_id_add_attributes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ont_id_add_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignOntIdAddAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignOntIdAddAttributes)
  return false;
#undef DO_
}

void OntologySignOntIdAddAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  for (int i = 0, n = this->address_n_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->address_n(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_transaction(), output);
  }

  // optional .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes ont_id_add_attributes = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ont_id_add_attributes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignOntIdAddAttributes)
}

::google::protobuf::uint8* OntologySignOntIdAddAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 address_n = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->address_n_, target);

  cached_has_bits = _has_bits_[0];
  // optional .OntologyTransaction transaction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_transaction(), deterministic, target);
  }

  // optional .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes ont_id_add_attributes = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ont_id_add_attributes(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignOntIdAddAttributes)
  return target;
}

size_t OntologySignOntIdAddAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignOntIdAddAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 address_n = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->address_n_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->address_n_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .OntologyTransaction transaction = 2;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_);
    }

    // optional .OntologySignOntIdAddAttributes.OntologyOntIdAddAttributes ont_id_add_attributes = 3;
    if (has_ont_id_add_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ont_id_add_attributes_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignOntIdAddAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignOntIdAddAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignOntIdAddAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignOntIdAddAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignOntIdAddAttributes)
    MergeFrom(*source);
  }
}

void OntologySignOntIdAddAttributes::MergeFrom(const OntologySignOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  address_n_.MergeFrom(from.address_n_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_transaction()->::OntologyTransaction::MergeFrom(from.transaction());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ont_id_add_attributes()->::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes::MergeFrom(from.ont_id_add_attributes());
    }
  }
}

void OntologySignOntIdAddAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignOntIdAddAttributes::CopyFrom(const OntologySignOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignOntIdAddAttributes::IsInitialized() const {
  return true;
}

void OntologySignOntIdAddAttributes::Swap(OntologySignOntIdAddAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignOntIdAddAttributes::InternalSwap(OntologySignOntIdAddAttributes* other) {
  using std::swap;
  address_n_.InternalSwap(&other->address_n_);
  swap(transaction_, other->transaction_);
  swap(ont_id_add_attributes_, other->ont_id_add_attributes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignOntIdAddAttributes::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OntologySignedOntIdAddAttributes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OntologySignedOntIdAddAttributes::kSignatureFieldNumber;
const int OntologySignedOntIdAddAttributes::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OntologySignedOntIdAddAttributes::OntologySignedOntIdAddAttributes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2dontology_2eproto::scc_info_OntologySignedOntIdAddAttributes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OntologySignedOntIdAddAttributes)
}
OntologySignedOntIdAddAttributes::OntologySignedOntIdAddAttributes(const OntologySignedOntIdAddAttributes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:OntologySignedOntIdAddAttributes)
}

void OntologySignedOntIdAddAttributes::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

OntologySignedOntIdAddAttributes::~OntologySignedOntIdAddAttributes() {
  // @@protoc_insertion_point(destructor:OntologySignedOntIdAddAttributes)
  SharedDtor();
}

void OntologySignedOntIdAddAttributes::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OntologySignedOntIdAddAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OntologySignedOntIdAddAttributes::descriptor() {
  ::protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OntologySignedOntIdAddAttributes& OntologySignedOntIdAddAttributes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2dontology_2eproto::scc_info_OntologySignedOntIdAddAttributes.base);
  return *internal_default_instance();
}


void OntologySignedOntIdAddAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:OntologySignedOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      payload_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OntologySignedOntIdAddAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OntologySignedOntIdAddAttributes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:OntologySignedOntIdAddAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OntologySignedOntIdAddAttributes)
  return false;
#undef DO_
}

void OntologySignedOntIdAddAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OntologySignedOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:OntologySignedOntIdAddAttributes)
}

::google::protobuf::uint8* OntologySignedOntIdAddAttributes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OntologySignedOntIdAddAttributes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional bytes payload = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OntologySignedOntIdAddAttributes)
  return target;
}

size_t OntologySignedOntIdAddAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OntologySignedOntIdAddAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OntologySignedOntIdAddAttributes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OntologySignedOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const OntologySignedOntIdAddAttributes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OntologySignedOntIdAddAttributes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OntologySignedOntIdAddAttributes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OntologySignedOntIdAddAttributes)
    MergeFrom(*source);
  }
}

void OntologySignedOntIdAddAttributes::MergeFrom(const OntologySignedOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OntologySignedOntIdAddAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
}

void OntologySignedOntIdAddAttributes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OntologySignedOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OntologySignedOntIdAddAttributes::CopyFrom(const OntologySignedOntIdAddAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OntologySignedOntIdAddAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OntologySignedOntIdAddAttributes::IsInitialized() const {
  return true;
}

void OntologySignedOntIdAddAttributes::Swap(OntologySignedOntIdAddAttributes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OntologySignedOntIdAddAttributes::InternalSwap(OntologySignedOntIdAddAttributes* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OntologySignedOntIdAddAttributes::GetMetadata() const {
  protobuf_messages_2dontology_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2dontology_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyTransaction_OntologyTxAttribute* Arena::CreateMaybeMessage< ::OntologyTransaction_OntologyTxAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyTransaction_OntologyTxAttribute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyTransaction* Arena::CreateMaybeMessage< ::OntologyTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyTransaction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyGetPublicKey* Arena::CreateMaybeMessage< ::OntologyGetPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyGetPublicKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyPublicKey* Arena::CreateMaybeMessage< ::OntologyPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyPublicKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyGetAddress* Arena::CreateMaybeMessage< ::OntologyGetAddress >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyGetAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologyAddress* Arena::CreateMaybeMessage< ::OntologyAddress >(Arena* arena) {
  return Arena::CreateInternal< ::OntologyAddress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignTransfer_OntologyTransfer* Arena::CreateMaybeMessage< ::OntologySignTransfer_OntologyTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignTransfer_OntologyTransfer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignTransfer* Arena::CreateMaybeMessage< ::OntologySignTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignTransfer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignedTransfer* Arena::CreateMaybeMessage< ::OntologySignedTransfer >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignedTransfer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignWithdrawOng_OntologyWithdrawOng* Arena::CreateMaybeMessage< ::OntologySignWithdrawOng_OntologyWithdrawOng >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignWithdrawOng_OntologyWithdrawOng >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignWithdrawOng* Arena::CreateMaybeMessage< ::OntologySignWithdrawOng >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignWithdrawOng >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignedWithdrawOng* Arena::CreateMaybeMessage< ::OntologySignedWithdrawOng >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignedWithdrawOng >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignOntIdRegister_OntologyOntIdRegister* Arena::CreateMaybeMessage< ::OntologySignOntIdRegister_OntologyOntIdRegister >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignOntIdRegister_OntologyOntIdRegister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignOntIdRegister* Arena::CreateMaybeMessage< ::OntologySignOntIdRegister >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignOntIdRegister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignedOntIdRegister* Arena::CreateMaybeMessage< ::OntologySignedOntIdRegister >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignedOntIdRegister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute* Arena::CreateMaybeMessage< ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes_OntologyOntIdAttribute >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes* Arena::CreateMaybeMessage< ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignOntIdAddAttributes_OntologyOntIdAddAttributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignOntIdAddAttributes* Arena::CreateMaybeMessage< ::OntologySignOntIdAddAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignOntIdAddAttributes >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OntologySignedOntIdAddAttributes* Arena::CreateMaybeMessage< ::OntologySignedOntIdAddAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::OntologySignedOntIdAddAttributes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
