// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages-beam.proto

#ifndef PROTOBUF_INCLUDED_messages_2dbeam_2eproto
#define PROTOBUF_INCLUDED_messages_2dbeam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2dbeam_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2dbeam_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_messages_2dbeam_2eproto();
namespace hw {
namespace trezor {
namespace messages {
namespace beam {
class BeamCoinID;
class BeamCoinIDDefaultTypeInternal;
extern BeamCoinIDDefaultTypeInternal _BeamCoinID_default_instance_;
class BeamECCPoint;
class BeamECCPointDefaultTypeInternal;
extern BeamECCPointDefaultTypeInternal _BeamECCPoint_default_instance_;
class BeamGenerateKey;
class BeamGenerateKeyDefaultTypeInternal;
extern BeamGenerateKeyDefaultTypeInternal _BeamGenerateKey_default_instance_;
class BeamGenerateNonce;
class BeamGenerateNonceDefaultTypeInternal;
extern BeamGenerateNonceDefaultTypeInternal _BeamGenerateNonce_default_instance_;
class BeamGenerateRangeproof;
class BeamGenerateRangeproofDefaultTypeInternal;
extern BeamGenerateRangeproofDefaultTypeInternal _BeamGenerateRangeproof_default_instance_;
class BeamGetNoncePublic;
class BeamGetNoncePublicDefaultTypeInternal;
extern BeamGetNoncePublicDefaultTypeInternal _BeamGetNoncePublic_default_instance_;
class BeamGetOwnerKey;
class BeamGetOwnerKeyDefaultTypeInternal;
extern BeamGetOwnerKeyDefaultTypeInternal _BeamGetOwnerKey_default_instance_;
class BeamGetPublicKey;
class BeamGetPublicKeyDefaultTypeInternal;
extern BeamGetPublicKeyDefaultTypeInternal _BeamGetPublicKey_default_instance_;
class BeamKeyIDV;
class BeamKeyIDVDefaultTypeInternal;
extern BeamKeyIDVDefaultTypeInternal _BeamKeyIDV_default_instance_;
class BeamOwnerKey;
class BeamOwnerKeyDefaultTypeInternal;
extern BeamOwnerKeyDefaultTypeInternal _BeamOwnerKey_default_instance_;
class BeamRangeproofData;
class BeamRangeproofDataDefaultTypeInternal;
extern BeamRangeproofDataDefaultTypeInternal _BeamRangeproofData_default_instance_;
class BeamSignMessage;
class BeamSignMessageDefaultTypeInternal;
extern BeamSignMessageDefaultTypeInternal _BeamSignMessage_default_instance_;
class BeamSignTransaction;
class BeamSignTransactionDefaultTypeInternal;
extern BeamSignTransactionDefaultTypeInternal _BeamSignTransaction_default_instance_;
class BeamSignTransactionReceive;
class BeamSignTransactionReceiveDefaultTypeInternal;
extern BeamSignTransactionReceiveDefaultTypeInternal _BeamSignTransactionReceive_default_instance_;
class BeamSignTransactionReceiveResult;
class BeamSignTransactionReceiveResultDefaultTypeInternal;
extern BeamSignTransactionReceiveResultDefaultTypeInternal _BeamSignTransactionReceiveResult_default_instance_;
class BeamSignTransactionSend;
class BeamSignTransactionSendDefaultTypeInternal;
extern BeamSignTransactionSendDefaultTypeInternal _BeamSignTransactionSend_default_instance_;
class BeamSignTransactionSendResult;
class BeamSignTransactionSendResultDefaultTypeInternal;
extern BeamSignTransactionSendResultDefaultTypeInternal _BeamSignTransactionSendResult_default_instance_;
class BeamSignTransactionSplit;
class BeamSignTransactionSplitDefaultTypeInternal;
extern BeamSignTransactionSplitDefaultTypeInternal _BeamSignTransactionSplit_default_instance_;
class BeamSignTransactionSplitResult;
class BeamSignTransactionSplitResultDefaultTypeInternal;
extern BeamSignTransactionSplitResultDefaultTypeInternal _BeamSignTransactionSplitResult_default_instance_;
class BeamSignTransaction_BeamKernelParametersOld;
class BeamSignTransaction_BeamKernelParametersOldDefaultTypeInternal;
extern BeamSignTransaction_BeamKernelParametersOldDefaultTypeInternal _BeamSignTransaction_BeamKernelParametersOld_default_instance_;
class BeamSignature;
class BeamSignatureDefaultTypeInternal;
extern BeamSignatureDefaultTypeInternal _BeamSignature_default_instance_;
class BeamSignedTransaction;
class BeamSignedTransactionDefaultTypeInternal;
extern BeamSignedTransactionDefaultTypeInternal _BeamSignedTransaction_default_instance_;
class BeamTxCommon;
class BeamTxCommonDefaultTypeInternal;
extern BeamTxCommonDefaultTypeInternal _BeamTxCommon_default_instance_;
class BeamTxCommon_BeamKernelParameters;
class BeamTxCommon_BeamKernelParametersDefaultTypeInternal;
extern BeamTxCommon_BeamKernelParametersDefaultTypeInternal _BeamTxCommon_BeamKernelParameters_default_instance_;
class BeamTxMutualInfo;
class BeamTxMutualInfoDefaultTypeInternal;
extern BeamTxMutualInfoDefaultTypeInternal _BeamTxMutualInfo_default_instance_;
class BeamVerifyMessage;
class BeamVerifyMessageDefaultTypeInternal;
extern BeamVerifyMessageDefaultTypeInternal _BeamVerifyMessage_default_instance_;
}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw
namespace google {
namespace protobuf {
template<> ::hw::trezor::messages::beam::BeamCoinID* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamCoinID>(Arena*);
template<> ::hw::trezor::messages::beam::BeamECCPoint* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGenerateKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGenerateKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGenerateNonce* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGenerateNonce>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGenerateRangeproof* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGenerateRangeproof>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGetNoncePublic* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGetNoncePublic>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGetOwnerKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGetOwnerKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamGetPublicKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamGetPublicKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamKeyIDV* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamKeyIDV>(Arena*);
template<> ::hw::trezor::messages::beam::BeamOwnerKey* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamOwnerKey>(Arena*);
template<> ::hw::trezor::messages::beam::BeamRangeproofData* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamRangeproofData>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignMessage>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransaction* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransaction>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionReceive* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionReceive>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionReceiveResult* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionReceiveResult>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionSend* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSend>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionSendResult* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSendResult>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionSplit* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSplit>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransactionSplitResult* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSplitResult>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignature* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(Arena*);
template<> ::hw::trezor::messages::beam::BeamSignedTransaction* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignedTransaction>(Arena*);
template<> ::hw::trezor::messages::beam::BeamTxCommon* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon>(Arena*);
template<> ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters>(Arena*);
template<> ::hw::trezor::messages::beam::BeamTxMutualInfo* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxMutualInfo>(Arena*);
template<> ::hw::trezor::messages::beam::BeamVerifyMessage* Arena::CreateMaybeMessage<::hw::trezor::messages::beam::BeamVerifyMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hw {
namespace trezor {
namespace messages {
namespace beam {

// ===================================================================

class BeamKeyIDV final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamKeyIDV) */ {
 public:
  BeamKeyIDV();
  virtual ~BeamKeyIDV();

  BeamKeyIDV(const BeamKeyIDV& from);

  inline BeamKeyIDV& operator=(const BeamKeyIDV& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamKeyIDV(BeamKeyIDV&& from) noexcept
    : BeamKeyIDV() {
    *this = ::std::move(from);
  }

  inline BeamKeyIDV& operator=(BeamKeyIDV&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamKeyIDV& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamKeyIDV* internal_default_instance() {
    return reinterpret_cast<const BeamKeyIDV*>(
               &_BeamKeyIDV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BeamKeyIDV* other);
  friend void swap(BeamKeyIDV& a, BeamKeyIDV& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamKeyIDV* New() const final {
    return CreateMaybeMessage<BeamKeyIDV>(nullptr);
  }

  BeamKeyIDV* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamKeyIDV>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamKeyIDV& from);
  void MergeFrom(const BeamKeyIDV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamKeyIDV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 idx = 1;
  bool has_idx() const;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::google::protobuf::uint64 idx() const;
  void set_idx(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 sub_idx = 3;
  bool has_sub_idx() const;
  void clear_sub_idx();
  static const int kSubIdxFieldNumber = 3;
  ::google::protobuf::uint32 sub_idx() const;
  void set_sub_idx(::google::protobuf::uint32 value);

  // optional uint64 value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  ::google::protobuf::uint64 value() const;
  void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamKeyIDV)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 idx_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sub_idx_;
  ::google::protobuf::uint64 value_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamCoinID final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamCoinID) */ {
 public:
  BeamCoinID();
  virtual ~BeamCoinID();

  BeamCoinID(const BeamCoinID& from);

  inline BeamCoinID& operator=(const BeamCoinID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamCoinID(BeamCoinID&& from) noexcept
    : BeamCoinID() {
    *this = ::std::move(from);
  }

  inline BeamCoinID& operator=(BeamCoinID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamCoinID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamCoinID* internal_default_instance() {
    return reinterpret_cast<const BeamCoinID*>(
               &_BeamCoinID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BeamCoinID* other);
  friend void swap(BeamCoinID& a, BeamCoinID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamCoinID* New() const final {
    return CreateMaybeMessage<BeamCoinID>(nullptr);
  }

  BeamCoinID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamCoinID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamCoinID& from);
  void MergeFrom(const BeamCoinID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamCoinID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 idx = 1;
  bool has_idx() const;
  void clear_idx();
  static const int kIdxFieldNumber = 1;
  ::google::protobuf::uint64 idx() const;
  void set_idx(::google::protobuf::uint64 value);

  // optional uint32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // optional uint32 sub_idx = 3;
  bool has_sub_idx() const;
  void clear_sub_idx();
  static const int kSubIdxFieldNumber = 3;
  ::google::protobuf::uint32 sub_idx() const;
  void set_sub_idx(::google::protobuf::uint32 value);

  // optional uint64 amount = 4;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  ::google::protobuf::uint64 amount() const;
  void set_amount(::google::protobuf::uint64 value);

  // optional uint32 asset_id = 5;
  bool has_asset_id() const;
  void clear_asset_id();
  static const int kAssetIdFieldNumber = 5;
  ::google::protobuf::uint32 asset_id() const;
  void set_asset_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamCoinID)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 idx_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sub_idx_;
  ::google::protobuf::uint64 amount_;
  ::google::protobuf::uint32 asset_id_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGenerateKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGenerateKey) */ {
 public:
  BeamGenerateKey();
  virtual ~BeamGenerateKey();

  BeamGenerateKey(const BeamGenerateKey& from);

  inline BeamGenerateKey& operator=(const BeamGenerateKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGenerateKey(BeamGenerateKey&& from) noexcept
    : BeamGenerateKey() {
    *this = ::std::move(from);
  }

  inline BeamGenerateKey& operator=(BeamGenerateKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGenerateKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGenerateKey* internal_default_instance() {
    return reinterpret_cast<const BeamGenerateKey*>(
               &_BeamGenerateKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BeamGenerateKey* other);
  friend void swap(BeamGenerateKey& a, BeamGenerateKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGenerateKey* New() const final {
    return CreateMaybeMessage<BeamGenerateKey>(nullptr);
  }

  BeamGenerateKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGenerateKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGenerateKey& from);
  void MergeFrom(const BeamGenerateKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGenerateKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
  bool has_kidv() const;
  void clear_kidv();
  static const int kKidvFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamKeyIDV& kidv() const;
  ::hw::trezor::messages::beam::BeamKeyIDV* release_kidv();
  ::hw::trezor::messages::beam::BeamKeyIDV* mutable_kidv();
  void set_allocated_kidv(::hw::trezor::messages::beam::BeamKeyIDV* kidv);

  // optional bool is_coin_key = 2;
  bool has_is_coin_key() const;
  void clear_is_coin_key();
  static const int kIsCoinKeyFieldNumber = 2;
  bool is_coin_key() const;
  void set_is_coin_key(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGenerateKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamKeyIDV* kidv_;
  bool is_coin_key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGenerateNonce final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGenerateNonce) */ {
 public:
  BeamGenerateNonce();
  virtual ~BeamGenerateNonce();

  BeamGenerateNonce(const BeamGenerateNonce& from);

  inline BeamGenerateNonce& operator=(const BeamGenerateNonce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGenerateNonce(BeamGenerateNonce&& from) noexcept
    : BeamGenerateNonce() {
    *this = ::std::move(from);
  }

  inline BeamGenerateNonce& operator=(BeamGenerateNonce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGenerateNonce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGenerateNonce* internal_default_instance() {
    return reinterpret_cast<const BeamGenerateNonce*>(
               &_BeamGenerateNonce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BeamGenerateNonce* other);
  friend void swap(BeamGenerateNonce& a, BeamGenerateNonce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGenerateNonce* New() const final {
    return CreateMaybeMessage<BeamGenerateNonce>(nullptr);
  }

  BeamGenerateNonce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGenerateNonce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGenerateNonce& from);
  void MergeFrom(const BeamGenerateNonce& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGenerateNonce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot = 1;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 1;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGenerateNonce)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 slot_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGetNoncePublic final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGetNoncePublic) */ {
 public:
  BeamGetNoncePublic();
  virtual ~BeamGetNoncePublic();

  BeamGetNoncePublic(const BeamGetNoncePublic& from);

  inline BeamGetNoncePublic& operator=(const BeamGetNoncePublic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGetNoncePublic(BeamGetNoncePublic&& from) noexcept
    : BeamGetNoncePublic() {
    *this = ::std::move(from);
  }

  inline BeamGetNoncePublic& operator=(BeamGetNoncePublic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGetNoncePublic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGetNoncePublic* internal_default_instance() {
    return reinterpret_cast<const BeamGetNoncePublic*>(
               &_BeamGetNoncePublic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BeamGetNoncePublic* other);
  friend void swap(BeamGetNoncePublic& a, BeamGetNoncePublic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGetNoncePublic* New() const final {
    return CreateMaybeMessage<BeamGetNoncePublic>(nullptr);
  }

  BeamGetNoncePublic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGetNoncePublic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGetNoncePublic& from);
  void MergeFrom(const BeamGetNoncePublic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGetNoncePublic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 slot = 1;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 1;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGetNoncePublic)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 slot_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamECCPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamECCPoint) */ {
 public:
  BeamECCPoint();
  virtual ~BeamECCPoint();

  BeamECCPoint(const BeamECCPoint& from);

  inline BeamECCPoint& operator=(const BeamECCPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamECCPoint(BeamECCPoint&& from) noexcept
    : BeamECCPoint() {
    *this = ::std::move(from);
  }

  inline BeamECCPoint& operator=(BeamECCPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamECCPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamECCPoint* internal_default_instance() {
    return reinterpret_cast<const BeamECCPoint*>(
               &_BeamECCPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BeamECCPoint* other);
  friend void swap(BeamECCPoint& a, BeamECCPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamECCPoint* New() const final {
    return CreateMaybeMessage<BeamECCPoint>(nullptr);
  }

  BeamECCPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamECCPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamECCPoint& from);
  void MergeFrom(const BeamECCPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamECCPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::std::string& x() const;
  void set_x(const ::std::string& value);
  #if LANG_CXX11
  void set_x(::std::string&& value);
  #endif
  void set_x(const char* value);
  void set_x(const void* value, size_t size);
  ::std::string* mutable_x();
  ::std::string* release_x();
  void set_allocated_x(::std::string* x);

  // optional bool y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  bool y() const;
  void set_y(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamECCPoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr x_;
  bool y_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignature final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignature) */ {
 public:
  BeamSignature();
  virtual ~BeamSignature();

  BeamSignature(const BeamSignature& from);

  inline BeamSignature& operator=(const BeamSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignature(BeamSignature&& from) noexcept
    : BeamSignature() {
    *this = ::std::move(from);
  }

  inline BeamSignature& operator=(BeamSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignature* internal_default_instance() {
    return reinterpret_cast<const BeamSignature*>(
               &_BeamSignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BeamSignature* other);
  friend void swap(BeamSignature& a, BeamSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignature* New() const final {
    return CreateMaybeMessage<BeamSignature>(nullptr);
  }

  BeamSignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignature& from);
  void MergeFrom(const BeamSignature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes sign_k = 2;
  bool has_sign_k() const;
  void clear_sign_k();
  static const int kSignKFieldNumber = 2;
  const ::std::string& sign_k() const;
  void set_sign_k(const ::std::string& value);
  #if LANG_CXX11
  void set_sign_k(::std::string&& value);
  #endif
  void set_sign_k(const char* value);
  void set_sign_k(const void* value, size_t size);
  ::std::string* mutable_sign_k();
  ::std::string* release_sign_k();
  void set_allocated_sign_k(::std::string* sign_k);

  // optional .hw.trezor.messages.beam.BeamECCPoint nonce_pub = 1;
  bool has_nonce_pub() const;
  void clear_nonce_pub();
  static const int kNoncePubFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamECCPoint& nonce_pub() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_nonce_pub();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_nonce_pub();
  void set_allocated_nonce_pub(::hw::trezor::messages::beam::BeamECCPoint* nonce_pub);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignature)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sign_k_;
  ::hw::trezor::messages::beam::BeamECCPoint* nonce_pub_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignMessage) */ {
 public:
  BeamSignMessage();
  virtual ~BeamSignMessage();

  BeamSignMessage(const BeamSignMessage& from);

  inline BeamSignMessage& operator=(const BeamSignMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignMessage(BeamSignMessage&& from) noexcept
    : BeamSignMessage() {
    *this = ::std::move(from);
  }

  inline BeamSignMessage& operator=(BeamSignMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignMessage* internal_default_instance() {
    return reinterpret_cast<const BeamSignMessage*>(
               &_BeamSignMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BeamSignMessage* other);
  friend void swap(BeamSignMessage& a, BeamSignMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignMessage* New() const final {
    return CreateMaybeMessage<BeamSignMessage>(nullptr);
  }

  BeamSignMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignMessage& from);
  void MergeFrom(const BeamSignMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint64 kid_idx = 2;
  bool has_kid_idx() const;
  void clear_kid_idx();
  static const int kKidIdxFieldNumber = 2;
  ::google::protobuf::uint64 kid_idx() const;
  void set_kid_idx(::google::protobuf::uint64 value);

  // optional uint32 kid_sub_idx = 3;
  bool has_kid_sub_idx() const;
  void clear_kid_sub_idx();
  static const int kKidSubIdxFieldNumber = 3;
  ::google::protobuf::uint32 kid_sub_idx() const;
  void set_kid_sub_idx(::google::protobuf::uint32 value);

  // optional bool show_display = 4;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 4;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint64 kid_idx_;
  ::google::protobuf::uint32 kid_sub_idx_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamVerifyMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamVerifyMessage) */ {
 public:
  BeamVerifyMessage();
  virtual ~BeamVerifyMessage();

  BeamVerifyMessage(const BeamVerifyMessage& from);

  inline BeamVerifyMessage& operator=(const BeamVerifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamVerifyMessage(BeamVerifyMessage&& from) noexcept
    : BeamVerifyMessage() {
    *this = ::std::move(from);
  }

  inline BeamVerifyMessage& operator=(BeamVerifyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamVerifyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamVerifyMessage* internal_default_instance() {
    return reinterpret_cast<const BeamVerifyMessage*>(
               &_BeamVerifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BeamVerifyMessage* other);
  friend void swap(BeamVerifyMessage& a, BeamVerifyMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamVerifyMessage* New() const final {
    return CreateMaybeMessage<BeamVerifyMessage>(nullptr);
  }

  BeamVerifyMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamVerifyMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamVerifyMessage& from);
  void MergeFrom(const BeamVerifyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamVerifyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // optional .hw.trezor.messages.beam.BeamSignature signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignature& signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature);

  // optional .hw.trezor.messages.beam.BeamECCPoint public_key = 2;
  bool has_public_key() const;
  void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamECCPoint& public_key() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_public_key();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_public_key();
  void set_allocated_public_key(::hw::trezor::messages::beam::BeamECCPoint* public_key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamVerifyMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::hw::trezor::messages::beam::BeamSignature* signature_;
  ::hw::trezor::messages::beam::BeamECCPoint* public_key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGetPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGetPublicKey) */ {
 public:
  BeamGetPublicKey();
  virtual ~BeamGetPublicKey();

  BeamGetPublicKey(const BeamGetPublicKey& from);

  inline BeamGetPublicKey& operator=(const BeamGetPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGetPublicKey(BeamGetPublicKey&& from) noexcept
    : BeamGetPublicKey() {
    *this = ::std::move(from);
  }

  inline BeamGetPublicKey& operator=(BeamGetPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGetPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGetPublicKey* internal_default_instance() {
    return reinterpret_cast<const BeamGetPublicKey*>(
               &_BeamGetPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(BeamGetPublicKey* other);
  friend void swap(BeamGetPublicKey& a, BeamGetPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGetPublicKey* New() const final {
    return CreateMaybeMessage<BeamGetPublicKey>(nullptr);
  }

  BeamGetPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGetPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGetPublicKey& from);
  void MergeFrom(const BeamGetPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGetPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 kid_idx = 1;
  bool has_kid_idx() const;
  void clear_kid_idx();
  static const int kKidIdxFieldNumber = 1;
  ::google::protobuf::uint64 kid_idx() const;
  void set_kid_idx(::google::protobuf::uint64 value);

  // optional uint32 kid_sub_idx = 2;
  bool has_kid_sub_idx() const;
  void clear_kid_sub_idx();
  static const int kKidSubIdxFieldNumber = 2;
  ::google::protobuf::uint32 kid_sub_idx() const;
  void set_kid_sub_idx(::google::protobuf::uint32 value);

  // optional bool show_display = 3;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 3;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGetPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 kid_idx_;
  ::google::protobuf::uint32 kid_sub_idx_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGetOwnerKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGetOwnerKey) */ {
 public:
  BeamGetOwnerKey();
  virtual ~BeamGetOwnerKey();

  BeamGetOwnerKey(const BeamGetOwnerKey& from);

  inline BeamGetOwnerKey& operator=(const BeamGetOwnerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGetOwnerKey(BeamGetOwnerKey&& from) noexcept
    : BeamGetOwnerKey() {
    *this = ::std::move(from);
  }

  inline BeamGetOwnerKey& operator=(BeamGetOwnerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGetOwnerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGetOwnerKey* internal_default_instance() {
    return reinterpret_cast<const BeamGetOwnerKey*>(
               &_BeamGetOwnerKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(BeamGetOwnerKey* other);
  friend void swap(BeamGetOwnerKey& a, BeamGetOwnerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGetOwnerKey* New() const final {
    return CreateMaybeMessage<BeamGetOwnerKey>(nullptr);
  }

  BeamGetOwnerKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGetOwnerKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGetOwnerKey& from);
  void MergeFrom(const BeamGetOwnerKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGetOwnerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool show_display = 1;
  bool has_show_display() const;
  void clear_show_display();
  static const int kShowDisplayFieldNumber = 1;
  bool show_display() const;
  void set_show_display(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGetOwnerKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool show_display_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamOwnerKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamOwnerKey) */ {
 public:
  BeamOwnerKey();
  virtual ~BeamOwnerKey();

  BeamOwnerKey(const BeamOwnerKey& from);

  inline BeamOwnerKey& operator=(const BeamOwnerKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamOwnerKey(BeamOwnerKey&& from) noexcept
    : BeamOwnerKey() {
    *this = ::std::move(from);
  }

  inline BeamOwnerKey& operator=(BeamOwnerKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamOwnerKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamOwnerKey* internal_default_instance() {
    return reinterpret_cast<const BeamOwnerKey*>(
               &_BeamOwnerKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(BeamOwnerKey* other);
  friend void swap(BeamOwnerKey& a, BeamOwnerKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamOwnerKey* New() const final {
    return CreateMaybeMessage<BeamOwnerKey>(nullptr);
  }

  BeamOwnerKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamOwnerKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamOwnerKey& from);
  void MergeFrom(const BeamOwnerKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamOwnerKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamOwnerKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamGenerateRangeproof final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamGenerateRangeproof) */ {
 public:
  BeamGenerateRangeproof();
  virtual ~BeamGenerateRangeproof();

  BeamGenerateRangeproof(const BeamGenerateRangeproof& from);

  inline BeamGenerateRangeproof& operator=(const BeamGenerateRangeproof& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamGenerateRangeproof(BeamGenerateRangeproof&& from) noexcept
    : BeamGenerateRangeproof() {
    *this = ::std::move(from);
  }

  inline BeamGenerateRangeproof& operator=(BeamGenerateRangeproof&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamGenerateRangeproof& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamGenerateRangeproof* internal_default_instance() {
    return reinterpret_cast<const BeamGenerateRangeproof*>(
               &_BeamGenerateRangeproof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(BeamGenerateRangeproof* other);
  friend void swap(BeamGenerateRangeproof& a, BeamGenerateRangeproof& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamGenerateRangeproof* New() const final {
    return CreateMaybeMessage<BeamGenerateRangeproof>(nullptr);
  }

  BeamGenerateRangeproof* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamGenerateRangeproof>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamGenerateRangeproof& from);
  void MergeFrom(const BeamGenerateRangeproof& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamGenerateRangeproof* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamCoinID cid = 1;
  bool has_cid() const;
  void clear_cid();
  static const int kCidFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamCoinID& cid() const;
  ::hw::trezor::messages::beam::BeamCoinID* release_cid();
  ::hw::trezor::messages::beam::BeamCoinID* mutable_cid();
  void set_allocated_cid(::hw::trezor::messages::beam::BeamCoinID* cid);

  // optional .hw.trezor.messages.beam.BeamECCPoint pt0 = 2;
  bool has_pt0() const;
  void clear_pt0();
  static const int kPt0FieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamECCPoint& pt0() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_pt0();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_pt0();
  void set_allocated_pt0(::hw::trezor::messages::beam::BeamECCPoint* pt0);

  // optional .hw.trezor.messages.beam.BeamECCPoint pt1 = 3;
  bool has_pt1() const;
  void clear_pt1();
  static const int kPt1FieldNumber = 3;
  const ::hw::trezor::messages::beam::BeamECCPoint& pt1() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_pt1();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_pt1();
  void set_allocated_pt1(::hw::trezor::messages::beam::BeamECCPoint* pt1);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamGenerateRangeproof)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamCoinID* cid_;
  ::hw::trezor::messages::beam::BeamECCPoint* pt0_;
  ::hw::trezor::messages::beam::BeamECCPoint* pt1_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamRangeproofData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamRangeproofData) */ {
 public:
  BeamRangeproofData();
  virtual ~BeamRangeproofData();

  BeamRangeproofData(const BeamRangeproofData& from);

  inline BeamRangeproofData& operator=(const BeamRangeproofData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamRangeproofData(BeamRangeproofData&& from) noexcept
    : BeamRangeproofData() {
    *this = ::std::move(from);
  }

  inline BeamRangeproofData& operator=(BeamRangeproofData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamRangeproofData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamRangeproofData* internal_default_instance() {
    return reinterpret_cast<const BeamRangeproofData*>(
               &_BeamRangeproofData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(BeamRangeproofData* other);
  friend void swap(BeamRangeproofData& a, BeamRangeproofData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamRangeproofData* New() const final {
    return CreateMaybeMessage<BeamRangeproofData>(nullptr);
  }

  BeamRangeproofData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamRangeproofData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamRangeproofData& from);
  void MergeFrom(const BeamRangeproofData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamRangeproofData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data_taux = 1;
  bool has_data_taux() const;
  void clear_data_taux();
  static const int kDataTauxFieldNumber = 1;
  const ::std::string& data_taux() const;
  void set_data_taux(const ::std::string& value);
  #if LANG_CXX11
  void set_data_taux(::std::string&& value);
  #endif
  void set_data_taux(const char* value);
  void set_data_taux(const void* value, size_t size);
  ::std::string* mutable_data_taux();
  ::std::string* release_data_taux();
  void set_allocated_data_taux(::std::string* data_taux);

  // optional bool is_successful = 2;
  bool has_is_successful() const;
  void clear_is_successful();
  static const int kIsSuccessfulFieldNumber = 2;
  bool is_successful() const;
  void set_is_successful(bool value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamRangeproofData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_taux_;
  bool is_successful_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignedTransaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignedTransaction) */ {
 public:
  BeamSignedTransaction();
  virtual ~BeamSignedTransaction();

  BeamSignedTransaction(const BeamSignedTransaction& from);

  inline BeamSignedTransaction& operator=(const BeamSignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignedTransaction(BeamSignedTransaction&& from) noexcept
    : BeamSignedTransaction() {
    *this = ::std::move(from);
  }

  inline BeamSignedTransaction& operator=(BeamSignedTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignedTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignedTransaction* internal_default_instance() {
    return reinterpret_cast<const BeamSignedTransaction*>(
               &_BeamSignedTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(BeamSignedTransaction* other);
  friend void swap(BeamSignedTransaction& a, BeamSignedTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignedTransaction* New() const final {
    return CreateMaybeMessage<BeamSignedTransaction>(nullptr);
  }

  BeamSignedTransaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignedTransaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignedTransaction& from);
  void MergeFrom(const BeamSignedTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignedTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignedTransaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransaction_BeamKernelParametersOld final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld) */ {
 public:
  BeamSignTransaction_BeamKernelParametersOld();
  virtual ~BeamSignTransaction_BeamKernelParametersOld();

  BeamSignTransaction_BeamKernelParametersOld(const BeamSignTransaction_BeamKernelParametersOld& from);

  inline BeamSignTransaction_BeamKernelParametersOld& operator=(const BeamSignTransaction_BeamKernelParametersOld& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransaction_BeamKernelParametersOld(BeamSignTransaction_BeamKernelParametersOld&& from) noexcept
    : BeamSignTransaction_BeamKernelParametersOld() {
    *this = ::std::move(from);
  }

  inline BeamSignTransaction_BeamKernelParametersOld& operator=(BeamSignTransaction_BeamKernelParametersOld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransaction_BeamKernelParametersOld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransaction_BeamKernelParametersOld* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransaction_BeamKernelParametersOld*>(
               &_BeamSignTransaction_BeamKernelParametersOld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(BeamSignTransaction_BeamKernelParametersOld* other);
  friend void swap(BeamSignTransaction_BeamKernelParametersOld& a, BeamSignTransaction_BeamKernelParametersOld& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransaction_BeamKernelParametersOld* New() const final {
    return CreateMaybeMessage<BeamSignTransaction_BeamKernelParametersOld>(nullptr);
  }

  BeamSignTransaction_BeamKernelParametersOld* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransaction_BeamKernelParametersOld>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransaction_BeamKernelParametersOld& from);
  void MergeFrom(const BeamSignTransaction_BeamKernelParametersOld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransaction_BeamKernelParametersOld* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes hash_lock = 7;
  bool has_hash_lock() const;
  void clear_hash_lock();
  static const int kHashLockFieldNumber = 7;
  const ::std::string& hash_lock() const;
  void set_hash_lock(const ::std::string& value);
  #if LANG_CXX11
  void set_hash_lock(::std::string&& value);
  #endif
  void set_hash_lock(const char* value);
  void set_hash_lock(const void* value, size_t size);
  ::std::string* mutable_hash_lock();
  ::std::string* release_hash_lock();
  void set_allocated_hash_lock(::std::string* hash_lock);

  // optional .hw.trezor.messages.beam.BeamECCPoint commitment = 2;
  bool has_commitment() const;
  void clear_commitment();
  static const int kCommitmentFieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamECCPoint& commitment() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_commitment();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_commitment();
  void set_allocated_commitment(::hw::trezor::messages::beam::BeamECCPoint* commitment);

  // optional .hw.trezor.messages.beam.BeamECCPoint multisig_nonce = 8;
  bool has_multisig_nonce() const;
  void clear_multisig_nonce();
  static const int kMultisigNonceFieldNumber = 8;
  const ::hw::trezor::messages::beam::BeamECCPoint& multisig_nonce() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_multisig_nonce();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_multisig_nonce();
  void set_allocated_multisig_nonce(::hw::trezor::messages::beam::BeamECCPoint* multisig_nonce);

  // optional .hw.trezor.messages.beam.BeamECCPoint multisig_excess = 9;
  bool has_multisig_excess() const;
  void clear_multisig_excess();
  static const int kMultisigExcessFieldNumber = 9;
  const ::hw::trezor::messages::beam::BeamECCPoint& multisig_excess() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_multisig_excess();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_multisig_excess();
  void set_allocated_multisig_excess(::hw::trezor::messages::beam::BeamECCPoint* multisig_excess);

  // optional uint64 fee = 1;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 1;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional uint64 min_height = 4;
  bool has_min_height() const;
  void clear_min_height();
  static const int kMinHeightFieldNumber = 4;
  ::google::protobuf::uint64 min_height() const;
  void set_min_height(::google::protobuf::uint64 value);

  // optional uint64 max_height = 5;
  bool has_max_height() const;
  void clear_max_height();
  static const int kMaxHeightFieldNumber = 5;
  ::google::protobuf::uint64 max_height() const;
  void set_max_height(::google::protobuf::uint64 value);

  // optional sint64 asset_emission = 6;
  bool has_asset_emission() const;
  void clear_asset_emission();
  static const int kAssetEmissionFieldNumber = 6;
  ::google::protobuf::int64 asset_emission() const;
  void set_asset_emission(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_lock_;
  ::hw::trezor::messages::beam::BeamECCPoint* commitment_;
  ::hw::trezor::messages::beam::BeamECCPoint* multisig_nonce_;
  ::hw::trezor::messages::beam::BeamECCPoint* multisig_excess_;
  ::google::protobuf::uint64 fee_;
  ::google::protobuf::uint64 min_height_;
  ::google::protobuf::uint64 max_height_;
  ::google::protobuf::int64 asset_emission_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransaction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransaction) */ {
 public:
  BeamSignTransaction();
  virtual ~BeamSignTransaction();

  BeamSignTransaction(const BeamSignTransaction& from);

  inline BeamSignTransaction& operator=(const BeamSignTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransaction(BeamSignTransaction&& from) noexcept
    : BeamSignTransaction() {
    *this = ::std::move(from);
  }

  inline BeamSignTransaction& operator=(BeamSignTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransaction* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransaction*>(
               &_BeamSignTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(BeamSignTransaction* other);
  friend void swap(BeamSignTransaction& a, BeamSignTransaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransaction* New() const final {
    return CreateMaybeMessage<BeamSignTransaction>(nullptr);
  }

  BeamSignTransaction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransaction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransaction& from);
  void MergeFrom(const BeamSignTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BeamSignTransaction_BeamKernelParametersOld BeamKernelParametersOld;

  // accessors -------------------------------------------------------

  // repeated .hw.trezor.messages.beam.BeamKeyIDV inputs = 1;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  ::hw::trezor::messages::beam::BeamKeyIDV* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >*
      mutable_inputs();
  const ::hw::trezor::messages::beam::BeamKeyIDV& inputs(int index) const;
  ::hw::trezor::messages::beam::BeamKeyIDV* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >&
      inputs() const;

  // repeated .hw.trezor.messages.beam.BeamKeyIDV outputs = 3;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 3;
  ::hw::trezor::messages::beam::BeamKeyIDV* mutable_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >*
      mutable_outputs();
  const ::hw::trezor::messages::beam::BeamKeyIDV& outputs(int index) const;
  ::hw::trezor::messages::beam::BeamKeyIDV* add_outputs();
  const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >&
      outputs() const;

  // optional bytes offset_sk = 2;
  bool has_offset_sk() const;
  void clear_offset_sk();
  static const int kOffsetSkFieldNumber = 2;
  const ::std::string& offset_sk() const;
  void set_offset_sk(const ::std::string& value);
  #if LANG_CXX11
  void set_offset_sk(::std::string&& value);
  #endif
  void set_offset_sk(const char* value);
  void set_offset_sk(const void* value, size_t size);
  ::std::string* mutable_offset_sk();
  ::std::string* release_offset_sk();
  void set_allocated_offset_sk(::std::string* offset_sk);

  // optional .hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld kernel_params = 5;
  bool has_kernel_params() const;
  void clear_kernel_params();
  static const int kKernelParamsFieldNumber = 5;
  const ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld& kernel_params() const;
  ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* release_kernel_params();
  ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* mutable_kernel_params();
  void set_allocated_kernel_params(::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* kernel_params);

  // optional uint32 nonce_slot = 4;
  bool has_nonce_slot() const;
  void clear_nonce_slot();
  static const int kNonceSlotFieldNumber = 4;
  ::google::protobuf::uint32 nonce_slot() const;
  void set_nonce_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransaction)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV > inputs_;
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV > outputs_;
  ::google::protobuf::internal::ArenaStringPtr offset_sk_;
  ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* kernel_params_;
  ::google::protobuf::uint32 nonce_slot_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamTxCommon_BeamKernelParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters) */ {
 public:
  BeamTxCommon_BeamKernelParameters();
  virtual ~BeamTxCommon_BeamKernelParameters();

  BeamTxCommon_BeamKernelParameters(const BeamTxCommon_BeamKernelParameters& from);

  inline BeamTxCommon_BeamKernelParameters& operator=(const BeamTxCommon_BeamKernelParameters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamTxCommon_BeamKernelParameters(BeamTxCommon_BeamKernelParameters&& from) noexcept
    : BeamTxCommon_BeamKernelParameters() {
    *this = ::std::move(from);
  }

  inline BeamTxCommon_BeamKernelParameters& operator=(BeamTxCommon_BeamKernelParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamTxCommon_BeamKernelParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamTxCommon_BeamKernelParameters* internal_default_instance() {
    return reinterpret_cast<const BeamTxCommon_BeamKernelParameters*>(
               &_BeamTxCommon_BeamKernelParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BeamTxCommon_BeamKernelParameters* other);
  friend void swap(BeamTxCommon_BeamKernelParameters& a, BeamTxCommon_BeamKernelParameters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamTxCommon_BeamKernelParameters* New() const final {
    return CreateMaybeMessage<BeamTxCommon_BeamKernelParameters>(nullptr);
  }

  BeamTxCommon_BeamKernelParameters* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamTxCommon_BeamKernelParameters>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamTxCommon_BeamKernelParameters& from);
  void MergeFrom(const BeamTxCommon_BeamKernelParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamTxCommon_BeamKernelParameters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamECCPoint commitment = 4;
  bool has_commitment() const;
  void clear_commitment();
  static const int kCommitmentFieldNumber = 4;
  const ::hw::trezor::messages::beam::BeamECCPoint& commitment() const;
  ::hw::trezor::messages::beam::BeamECCPoint* release_commitment();
  ::hw::trezor::messages::beam::BeamECCPoint* mutable_commitment();
  void set_allocated_commitment(::hw::trezor::messages::beam::BeamECCPoint* commitment);

  // optional .hw.trezor.messages.beam.BeamSignature signature = 5;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 5;
  const ::hw::trezor::messages::beam::BeamSignature& signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_signature();
  void set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature);

  // optional uint64 fee = 1;
  bool has_fee() const;
  void clear_fee();
  static const int kFeeFieldNumber = 1;
  ::google::protobuf::uint64 fee() const;
  void set_fee(::google::protobuf::uint64 value);

  // optional uint64 min_height = 2;
  bool has_min_height() const;
  void clear_min_height();
  static const int kMinHeightFieldNumber = 2;
  ::google::protobuf::uint64 min_height() const;
  void set_min_height(::google::protobuf::uint64 value);

  // optional uint64 max_height = 3;
  bool has_max_height() const;
  void clear_max_height();
  static const int kMaxHeightFieldNumber = 3;
  ::google::protobuf::uint64 max_height() const;
  void set_max_height(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamECCPoint* commitment_;
  ::hw::trezor::messages::beam::BeamSignature* signature_;
  ::google::protobuf::uint64 fee_;
  ::google::protobuf::uint64 min_height_;
  ::google::protobuf::uint64 max_height_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamTxCommon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamTxCommon) */ {
 public:
  BeamTxCommon();
  virtual ~BeamTxCommon();

  BeamTxCommon(const BeamTxCommon& from);

  inline BeamTxCommon& operator=(const BeamTxCommon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamTxCommon(BeamTxCommon&& from) noexcept
    : BeamTxCommon() {
    *this = ::std::move(from);
  }

  inline BeamTxCommon& operator=(BeamTxCommon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamTxCommon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamTxCommon* internal_default_instance() {
    return reinterpret_cast<const BeamTxCommon*>(
               &_BeamTxCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(BeamTxCommon* other);
  friend void swap(BeamTxCommon& a, BeamTxCommon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamTxCommon* New() const final {
    return CreateMaybeMessage<BeamTxCommon>(nullptr);
  }

  BeamTxCommon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamTxCommon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamTxCommon& from);
  void MergeFrom(const BeamTxCommon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamTxCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BeamTxCommon_BeamKernelParameters BeamKernelParameters;

  // accessors -------------------------------------------------------

  // repeated .hw.trezor.messages.beam.BeamCoinID inputs = 1;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  ::hw::trezor::messages::beam::BeamCoinID* mutable_inputs(int index);
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >*
      mutable_inputs();
  const ::hw::trezor::messages::beam::BeamCoinID& inputs(int index) const;
  ::hw::trezor::messages::beam::BeamCoinID* add_inputs();
  const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >&
      inputs() const;

  // repeated .hw.trezor.messages.beam.BeamCoinID outputs = 3;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 3;
  ::hw::trezor::messages::beam::BeamCoinID* mutable_outputs(int index);
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >*
      mutable_outputs();
  const ::hw::trezor::messages::beam::BeamCoinID& outputs(int index) const;
  ::hw::trezor::messages::beam::BeamCoinID* add_outputs();
  const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >&
      outputs() const;

  // optional bytes offset_sk = 2;
  bool has_offset_sk() const;
  void clear_offset_sk();
  static const int kOffsetSkFieldNumber = 2;
  const ::std::string& offset_sk() const;
  void set_offset_sk(const ::std::string& value);
  #if LANG_CXX11
  void set_offset_sk(::std::string&& value);
  #endif
  void set_offset_sk(const char* value);
  void set_offset_sk(const void* value, size_t size);
  ::std::string* mutable_offset_sk();
  ::std::string* release_offset_sk();
  void set_allocated_offset_sk(::std::string* offset_sk);

  // optional .hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters kernel_params = 4;
  bool has_kernel_params() const;
  void clear_kernel_params();
  static const int kKernelParamsFieldNumber = 4;
  const ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters& kernel_params() const;
  ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* release_kernel_params();
  ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* mutable_kernel_params();
  void set_allocated_kernel_params(::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* kernel_params);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamTxCommon)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID > inputs_;
  ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID > outputs_;
  ::google::protobuf::internal::ArenaStringPtr offset_sk_;
  ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* kernel_params_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamTxMutualInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamTxMutualInfo) */ {
 public:
  BeamTxMutualInfo();
  virtual ~BeamTxMutualInfo();

  BeamTxMutualInfo(const BeamTxMutualInfo& from);

  inline BeamTxMutualInfo& operator=(const BeamTxMutualInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamTxMutualInfo(BeamTxMutualInfo&& from) noexcept
    : BeamTxMutualInfo() {
    *this = ::std::move(from);
  }

  inline BeamTxMutualInfo& operator=(BeamTxMutualInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamTxMutualInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamTxMutualInfo* internal_default_instance() {
    return reinterpret_cast<const BeamTxMutualInfo*>(
               &_BeamTxMutualInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(BeamTxMutualInfo* other);
  friend void swap(BeamTxMutualInfo& a, BeamTxMutualInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamTxMutualInfo* New() const final {
    return CreateMaybeMessage<BeamTxMutualInfo>(nullptr);
  }

  BeamTxMutualInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamTxMutualInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamTxMutualInfo& from);
  void MergeFrom(const BeamTxMutualInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamTxMutualInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes peer = 1;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 1;
  const ::std::string& peer() const;
  void set_peer(const ::std::string& value);
  #if LANG_CXX11
  void set_peer(::std::string&& value);
  #endif
  void set_peer(const char* value);
  void set_peer(const void* value, size_t size);
  ::std::string* mutable_peer();
  ::std::string* release_peer();
  void set_allocated_peer(::std::string* peer);

  // optional .hw.trezor.messages.beam.BeamSignature payment_proof_signature = 3;
  bool has_payment_proof_signature() const;
  void clear_payment_proof_signature();
  static const int kPaymentProofSignatureFieldNumber = 3;
  const ::hw::trezor::messages::beam::BeamSignature& payment_proof_signature() const;
  ::hw::trezor::messages::beam::BeamSignature* release_payment_proof_signature();
  ::hw::trezor::messages::beam::BeamSignature* mutable_payment_proof_signature();
  void set_allocated_payment_proof_signature(::hw::trezor::messages::beam::BeamSignature* payment_proof_signature);

  // optional uint64 wallet_identity_key = 2;
  bool has_wallet_identity_key() const;
  void clear_wallet_identity_key();
  static const int kWalletIdentityKeyFieldNumber = 2;
  ::google::protobuf::uint64 wallet_identity_key() const;
  void set_wallet_identity_key(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamTxMutualInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr peer_;
  ::hw::trezor::messages::beam::BeamSignature* payment_proof_signature_;
  ::google::protobuf::uint64 wallet_identity_key_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionSend final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionSend) */ {
 public:
  BeamSignTransactionSend();
  virtual ~BeamSignTransactionSend();

  BeamSignTransactionSend(const BeamSignTransactionSend& from);

  inline BeamSignTransactionSend& operator=(const BeamSignTransactionSend& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionSend(BeamSignTransactionSend&& from) noexcept
    : BeamSignTransactionSend() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionSend& operator=(BeamSignTransactionSend&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionSend& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionSend* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionSend*>(
               &_BeamSignTransactionSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(BeamSignTransactionSend* other);
  friend void swap(BeamSignTransactionSend& a, BeamSignTransactionSend& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionSend* New() const final {
    return CreateMaybeMessage<BeamSignTransactionSend>(nullptr);
  }

  BeamSignTransactionSend* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionSend>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionSend& from);
  void MergeFrom(const BeamSignTransactionSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionSend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes user_agreement = 4;
  bool has_user_agreement() const;
  void clear_user_agreement();
  static const int kUserAgreementFieldNumber = 4;
  const ::std::string& user_agreement() const;
  void set_user_agreement(const ::std::string& value);
  #if LANG_CXX11
  void set_user_agreement(::std::string&& value);
  #endif
  void set_user_agreement(const char* value);
  void set_user_agreement(const void* value, size_t size);
  ::std::string* mutable_user_agreement();
  ::std::string* release_user_agreement();
  void set_allocated_user_agreement(::std::string* user_agreement);

  // optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
  bool has_tx_common() const;
  void clear_tx_common();
  static const int kTxCommonFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamTxCommon& tx_common() const;
  ::hw::trezor::messages::beam::BeamTxCommon* release_tx_common();
  ::hw::trezor::messages::beam::BeamTxCommon* mutable_tx_common();
  void set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common);

  // optional .hw.trezor.messages.beam.BeamTxMutualInfo tx_mutual_info = 2;
  bool has_tx_mutual_info() const;
  void clear_tx_mutual_info();
  static const int kTxMutualInfoFieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamTxMutualInfo& tx_mutual_info() const;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* release_tx_mutual_info();
  ::hw::trezor::messages::beam::BeamTxMutualInfo* mutable_tx_mutual_info();
  void set_allocated_tx_mutual_info(::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info);

  // optional uint32 nonce_slot = 3;
  bool has_nonce_slot() const;
  void clear_nonce_slot();
  static const int kNonceSlotFieldNumber = 3;
  ::google::protobuf::uint32 nonce_slot() const;
  void set_nonce_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionSend)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_agreement_;
  ::hw::trezor::messages::beam::BeamTxCommon* tx_common_;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info_;
  ::google::protobuf::uint32 nonce_slot_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionSendResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionSendResult) */ {
 public:
  BeamSignTransactionSendResult();
  virtual ~BeamSignTransactionSendResult();

  BeamSignTransactionSendResult(const BeamSignTransactionSendResult& from);

  inline BeamSignTransactionSendResult& operator=(const BeamSignTransactionSendResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionSendResult(BeamSignTransactionSendResult&& from) noexcept
    : BeamSignTransactionSendResult() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionSendResult& operator=(BeamSignTransactionSendResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionSendResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionSendResult* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionSendResult*>(
               &_BeamSignTransactionSendResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(BeamSignTransactionSendResult* other);
  friend void swap(BeamSignTransactionSendResult& a, BeamSignTransactionSendResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionSendResult* New() const final {
    return CreateMaybeMessage<BeamSignTransactionSendResult>(nullptr);
  }

  BeamSignTransactionSendResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionSendResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionSendResult& from);
  void MergeFrom(const BeamSignTransactionSendResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionSendResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamSignTransactionSend tx = 1;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignTransactionSend& tx() const;
  ::hw::trezor::messages::beam::BeamSignTransactionSend* release_tx();
  ::hw::trezor::messages::beam::BeamSignTransactionSend* mutable_tx();
  void set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionSend* tx);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionSendResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamSignTransactionSend* tx_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionReceive final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionReceive) */ {
 public:
  BeamSignTransactionReceive();
  virtual ~BeamSignTransactionReceive();

  BeamSignTransactionReceive(const BeamSignTransactionReceive& from);

  inline BeamSignTransactionReceive& operator=(const BeamSignTransactionReceive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionReceive(BeamSignTransactionReceive&& from) noexcept
    : BeamSignTransactionReceive() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionReceive& operator=(BeamSignTransactionReceive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionReceive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionReceive* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionReceive*>(
               &_BeamSignTransactionReceive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(BeamSignTransactionReceive* other);
  friend void swap(BeamSignTransactionReceive& a, BeamSignTransactionReceive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionReceive* New() const final {
    return CreateMaybeMessage<BeamSignTransactionReceive>(nullptr);
  }

  BeamSignTransactionReceive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionReceive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionReceive& from);
  void MergeFrom(const BeamSignTransactionReceive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionReceive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
  bool has_tx_common() const;
  void clear_tx_common();
  static const int kTxCommonFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamTxCommon& tx_common() const;
  ::hw::trezor::messages::beam::BeamTxCommon* release_tx_common();
  ::hw::trezor::messages::beam::BeamTxCommon* mutable_tx_common();
  void set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common);

  // optional .hw.trezor.messages.beam.BeamTxMutualInfo tx_mutual_info = 2;
  bool has_tx_mutual_info() const;
  void clear_tx_mutual_info();
  static const int kTxMutualInfoFieldNumber = 2;
  const ::hw::trezor::messages::beam::BeamTxMutualInfo& tx_mutual_info() const;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* release_tx_mutual_info();
  ::hw::trezor::messages::beam::BeamTxMutualInfo* mutable_tx_mutual_info();
  void set_allocated_tx_mutual_info(::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionReceive)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamTxCommon* tx_common_;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionReceiveResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionReceiveResult) */ {
 public:
  BeamSignTransactionReceiveResult();
  virtual ~BeamSignTransactionReceiveResult();

  BeamSignTransactionReceiveResult(const BeamSignTransactionReceiveResult& from);

  inline BeamSignTransactionReceiveResult& operator=(const BeamSignTransactionReceiveResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionReceiveResult(BeamSignTransactionReceiveResult&& from) noexcept
    : BeamSignTransactionReceiveResult() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionReceiveResult& operator=(BeamSignTransactionReceiveResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionReceiveResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionReceiveResult* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionReceiveResult*>(
               &_BeamSignTransactionReceiveResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(BeamSignTransactionReceiveResult* other);
  friend void swap(BeamSignTransactionReceiveResult& a, BeamSignTransactionReceiveResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionReceiveResult* New() const final {
    return CreateMaybeMessage<BeamSignTransactionReceiveResult>(nullptr);
  }

  BeamSignTransactionReceiveResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionReceiveResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionReceiveResult& from);
  void MergeFrom(const BeamSignTransactionReceiveResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionReceiveResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamSignTransactionReceive tx = 1;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignTransactionReceive& tx() const;
  ::hw::trezor::messages::beam::BeamSignTransactionReceive* release_tx();
  ::hw::trezor::messages::beam::BeamSignTransactionReceive* mutable_tx();
  void set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionReceive* tx);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionReceiveResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamSignTransactionReceive* tx_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionSplit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionSplit) */ {
 public:
  BeamSignTransactionSplit();
  virtual ~BeamSignTransactionSplit();

  BeamSignTransactionSplit(const BeamSignTransactionSplit& from);

  inline BeamSignTransactionSplit& operator=(const BeamSignTransactionSplit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionSplit(BeamSignTransactionSplit&& from) noexcept
    : BeamSignTransactionSplit() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionSplit& operator=(BeamSignTransactionSplit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionSplit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionSplit* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionSplit*>(
               &_BeamSignTransactionSplit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(BeamSignTransactionSplit* other);
  friend void swap(BeamSignTransactionSplit& a, BeamSignTransactionSplit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionSplit* New() const final {
    return CreateMaybeMessage<BeamSignTransactionSplit>(nullptr);
  }

  BeamSignTransactionSplit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionSplit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionSplit& from);
  void MergeFrom(const BeamSignTransactionSplit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionSplit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
  bool has_tx_common() const;
  void clear_tx_common();
  static const int kTxCommonFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamTxCommon& tx_common() const;
  ::hw::trezor::messages::beam::BeamTxCommon* release_tx_common();
  ::hw::trezor::messages::beam::BeamTxCommon* mutable_tx_common();
  void set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionSplit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamTxCommon* tx_common_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// -------------------------------------------------------------------

class BeamSignTransactionSplitResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hw.trezor.messages.beam.BeamSignTransactionSplitResult) */ {
 public:
  BeamSignTransactionSplitResult();
  virtual ~BeamSignTransactionSplitResult();

  BeamSignTransactionSplitResult(const BeamSignTransactionSplitResult& from);

  inline BeamSignTransactionSplitResult& operator=(const BeamSignTransactionSplitResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeamSignTransactionSplitResult(BeamSignTransactionSplitResult&& from) noexcept
    : BeamSignTransactionSplitResult() {
    *this = ::std::move(from);
  }

  inline BeamSignTransactionSplitResult& operator=(BeamSignTransactionSplitResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BeamSignTransactionSplitResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeamSignTransactionSplitResult* internal_default_instance() {
    return reinterpret_cast<const BeamSignTransactionSplitResult*>(
               &_BeamSignTransactionSplitResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(BeamSignTransactionSplitResult* other);
  friend void swap(BeamSignTransactionSplitResult& a, BeamSignTransactionSplitResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeamSignTransactionSplitResult* New() const final {
    return CreateMaybeMessage<BeamSignTransactionSplitResult>(nullptr);
  }

  BeamSignTransactionSplitResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BeamSignTransactionSplitResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BeamSignTransactionSplitResult& from);
  void MergeFrom(const BeamSignTransactionSplitResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeamSignTransactionSplitResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hw.trezor.messages.beam.BeamSignTransactionSplit tx = 1;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 1;
  const ::hw::trezor::messages::beam::BeamSignTransactionSplit& tx() const;
  ::hw::trezor::messages::beam::BeamSignTransactionSplit* release_tx();
  ::hw::trezor::messages::beam::BeamSignTransactionSplit* mutable_tx();
  void set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionSplit* tx);

  // @@protoc_insertion_point(class_scope:hw.trezor.messages.beam.BeamSignTransactionSplitResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hw::trezor::messages::beam::BeamSignTransactionSplit* tx_;
  friend struct ::TableStruct_messages_2dbeam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeamKeyIDV

// optional uint64 idx = 1;
inline bool BeamKeyIDV::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamKeyIDV::clear_idx() {
  idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 BeamKeyIDV::idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.idx)
  return idx_;
}
inline void BeamKeyIDV::set_idx(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.idx)
}

// optional uint32 type = 2;
inline bool BeamKeyIDV::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamKeyIDV::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 BeamKeyIDV::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.type)
  return type_;
}
inline void BeamKeyIDV::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.type)
}

// optional uint32 sub_idx = 3;
inline bool BeamKeyIDV::has_sub_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamKeyIDV::clear_sub_idx() {
  sub_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamKeyIDV::sub_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.sub_idx)
  return sub_idx_;
}
inline void BeamKeyIDV::set_sub_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sub_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.sub_idx)
}

// optional uint64 value = 4;
inline bool BeamKeyIDV::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamKeyIDV::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 BeamKeyIDV::value() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamKeyIDV.value)
  return value_;
}
inline void BeamKeyIDV::set_value(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamKeyIDV.value)
}

// -------------------------------------------------------------------

// BeamCoinID

// optional uint64 idx = 1;
inline bool BeamCoinID::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamCoinID::clear_idx() {
  idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 BeamCoinID::idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamCoinID.idx)
  return idx_;
}
inline void BeamCoinID::set_idx(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamCoinID.idx)
}

// optional uint32 type = 2;
inline bool BeamCoinID::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamCoinID::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 BeamCoinID::type() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamCoinID.type)
  return type_;
}
inline void BeamCoinID::set_type(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamCoinID.type)
}

// optional uint32 sub_idx = 3;
inline bool BeamCoinID::has_sub_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamCoinID::clear_sub_idx() {
  sub_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamCoinID::sub_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamCoinID.sub_idx)
  return sub_idx_;
}
inline void BeamCoinID::set_sub_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  sub_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamCoinID.sub_idx)
}

// optional uint64 amount = 4;
inline bool BeamCoinID::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamCoinID::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 BeamCoinID::amount() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamCoinID.amount)
  return amount_;
}
inline void BeamCoinID::set_amount(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamCoinID.amount)
}

// optional uint32 asset_id = 5;
inline bool BeamCoinID::has_asset_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeamCoinID::clear_asset_id() {
  asset_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 BeamCoinID::asset_id() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamCoinID.asset_id)
  return asset_id_;
}
inline void BeamCoinID::set_asset_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  asset_id_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamCoinID.asset_id)
}

// -------------------------------------------------------------------

// BeamGenerateKey

// optional .hw.trezor.messages.beam.BeamKeyIDV kidv = 1;
inline bool BeamGenerateKey::has_kidv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGenerateKey::clear_kidv() {
  if (kidv_ != nullptr) kidv_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamKeyIDV& BeamGenerateKey::kidv() const {
  const ::hw::trezor::messages::beam::BeamKeyIDV* p = kidv_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamKeyIDV*>(
      &::hw::trezor::messages::beam::_BeamKeyIDV_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamGenerateKey::release_kidv() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamKeyIDV* temp = kidv_;
  kidv_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamGenerateKey::mutable_kidv() {
  _has_bits_[0] |= 0x00000001u;
  if (kidv_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamKeyIDV>(GetArenaNoVirtual());
    kidv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamGenerateKey.kidv)
  return kidv_;
}
inline void BeamGenerateKey::set_allocated_kidv(::hw::trezor::messages::beam::BeamKeyIDV* kidv) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kidv_;
  }
  if (kidv) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kidv = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kidv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kidv_ = kidv;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamGenerateKey.kidv)
}

// optional bool is_coin_key = 2;
inline bool BeamGenerateKey::has_is_coin_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamGenerateKey::clear_is_coin_key() {
  is_coin_key_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamGenerateKey::is_coin_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateKey.is_coin_key)
  return is_coin_key_;
}
inline void BeamGenerateKey::set_is_coin_key(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_coin_key_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGenerateKey.is_coin_key)
}

// -------------------------------------------------------------------

// BeamGenerateNonce

// optional uint32 slot = 1;
inline bool BeamGenerateNonce::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGenerateNonce::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 BeamGenerateNonce::slot() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateNonce.slot)
  return slot_;
}
inline void BeamGenerateNonce::set_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGenerateNonce.slot)
}

// -------------------------------------------------------------------

// BeamGetNoncePublic

// optional uint32 slot = 1;
inline bool BeamGetNoncePublic::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGetNoncePublic::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 BeamGetNoncePublic::slot() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetNoncePublic.slot)
  return slot_;
}
inline void BeamGetNoncePublic::set_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetNoncePublic.slot)
}

// -------------------------------------------------------------------

// BeamECCPoint

// optional bytes x = 1;
inline bool BeamECCPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamECCPoint::clear_x() {
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamECCPoint::x() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamECCPoint.x)
  return x_.GetNoArena();
}
inline void BeamECCPoint::set_x(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamECCPoint.x)
}
#if LANG_CXX11
inline void BeamECCPoint::set_x(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamECCPoint.x)
}
#endif
inline void BeamECCPoint::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamECCPoint.x)
}
inline void BeamECCPoint::set_x(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamECCPoint.x)
}
inline ::std::string* BeamECCPoint::mutable_x() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamECCPoint.x)
  return x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamECCPoint::release_x() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamECCPoint.x)
  if (!has_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return x_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamECCPoint::set_allocated_x(::std::string* x) {
  if (x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamECCPoint.x)
}

// optional bool y = 2;
inline bool BeamECCPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamECCPoint::clear_y() {
  y_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamECCPoint::y() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamECCPoint.y)
  return y_;
}
inline void BeamECCPoint::set_y(bool value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamECCPoint.y)
}

// -------------------------------------------------------------------

// BeamSignature

// optional .hw.trezor.messages.beam.BeamECCPoint nonce_pub = 1;
inline bool BeamSignature::has_nonce_pub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignature::clear_nonce_pub() {
  if (nonce_pub_ != nullptr) nonce_pub_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamSignature::nonce_pub() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = nonce_pub_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignature.nonce_pub)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignature::release_nonce_pub() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignature.nonce_pub)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = nonce_pub_;
  nonce_pub_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignature::mutable_nonce_pub() {
  _has_bits_[0] |= 0x00000002u;
  if (nonce_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    nonce_pub_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignature.nonce_pub)
  return nonce_pub_;
}
inline void BeamSignature::set_allocated_nonce_pub(::hw::trezor::messages::beam::BeamECCPoint* nonce_pub) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nonce_pub_;
  }
  if (nonce_pub) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nonce_pub = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nonce_pub, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  nonce_pub_ = nonce_pub;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignature.nonce_pub)
}

// optional bytes sign_k = 2;
inline bool BeamSignature::has_sign_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignature::clear_sign_k() {
  sign_k_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignature::sign_k() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignature.sign_k)
  return sign_k_.GetNoArena();
}
inline void BeamSignature::set_sign_k(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignature.sign_k)
}
#if LANG_CXX11
inline void BeamSignature::set_sign_k(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sign_k_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignature.sign_k)
}
#endif
inline void BeamSignature::set_sign_k(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignature.sign_k)
}
inline void BeamSignature::set_sign_k(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sign_k_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignature.sign_k)
}
inline ::std::string* BeamSignature::mutable_sign_k() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignature.sign_k)
  return sign_k_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignature::release_sign_k() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignature.sign_k)
  if (!has_sign_k()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sign_k_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignature::set_allocated_sign_k(::std::string* sign_k) {
  if (sign_k != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sign_k_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sign_k);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignature.sign_k)
}

// -------------------------------------------------------------------

// BeamSignMessage

// optional string msg = 1;
inline bool BeamSignMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignMessage::msg() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.msg)
  return msg_.GetNoArena();
}
inline void BeamSignMessage::set_msg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.msg)
}
#if LANG_CXX11
inline void BeamSignMessage::set_msg(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignMessage.msg)
}
#endif
inline void BeamSignMessage::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignMessage.msg)
}
inline void BeamSignMessage::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignMessage.msg)
}
inline ::std::string* BeamSignMessage::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignMessage::release_msg() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignMessage.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignMessage::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignMessage.msg)
}

// optional uint64 kid_idx = 2;
inline bool BeamSignMessage::has_kid_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignMessage::clear_kid_idx() {
  kid_idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 BeamSignMessage::kid_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.kid_idx)
  return kid_idx_;
}
inline void BeamSignMessage::set_kid_idx(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  kid_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.kid_idx)
}

// optional uint32 kid_sub_idx = 3;
inline bool BeamSignMessage::has_kid_sub_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignMessage::clear_kid_sub_idx() {
  kid_sub_idx_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamSignMessage::kid_sub_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.kid_sub_idx)
  return kid_sub_idx_;
}
inline void BeamSignMessage::set_kid_sub_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  kid_sub_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.kid_sub_idx)
}

// optional bool show_display = 4;
inline bool BeamSignMessage::has_show_display() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamSignMessage::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool BeamSignMessage::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignMessage.show_display)
  return show_display_;
}
inline void BeamSignMessage::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000008u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignMessage.show_display)
}

// -------------------------------------------------------------------

// BeamVerifyMessage

// optional .hw.trezor.messages.beam.BeamSignature signature = 1;
inline bool BeamVerifyMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamVerifyMessage::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamVerifyMessage::signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamVerifyMessage::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamVerifyMessage::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.signature)
  return signature_;
}
inline void BeamVerifyMessage::set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.signature)
}

// optional .hw.trezor.messages.beam.BeamECCPoint public_key = 2;
inline bool BeamVerifyMessage::has_public_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamVerifyMessage::clear_public_key() {
  if (public_key_ != nullptr) public_key_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamVerifyMessage::public_key() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = public_key_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamVerifyMessage::release_public_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = public_key_;
  public_key_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamVerifyMessage::mutable_public_key() {
  _has_bits_[0] |= 0x00000004u;
  if (public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    public_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
  return public_key_;
}
inline void BeamVerifyMessage::set_allocated_public_key(::hw::trezor::messages::beam::BeamECCPoint* public_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete public_key_;
  }
  if (public_key) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      public_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.public_key)
}

// optional bytes message = 3;
inline bool BeamVerifyMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamVerifyMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamVerifyMessage::message() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamVerifyMessage.message)
  return message_.GetNoArena();
}
inline void BeamVerifyMessage::set_message(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
#if LANG_CXX11
inline void BeamVerifyMessage::set_message(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
#endif
inline void BeamVerifyMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
inline void BeamVerifyMessage::set_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamVerifyMessage.message)
}
inline ::std::string* BeamVerifyMessage::mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamVerifyMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamVerifyMessage::release_message() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamVerifyMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamVerifyMessage::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamVerifyMessage.message)
}

// -------------------------------------------------------------------

// BeamGetPublicKey

// optional uint64 kid_idx = 1;
inline bool BeamGetPublicKey::has_kid_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGetPublicKey::clear_kid_idx() {
  kid_idx_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 BeamGetPublicKey::kid_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetPublicKey.kid_idx)
  return kid_idx_;
}
inline void BeamGetPublicKey::set_kid_idx(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  kid_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetPublicKey.kid_idx)
}

// optional uint32 kid_sub_idx = 2;
inline bool BeamGetPublicKey::has_kid_sub_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamGetPublicKey::clear_kid_sub_idx() {
  kid_sub_idx_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 BeamGetPublicKey::kid_sub_idx() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetPublicKey.kid_sub_idx)
  return kid_sub_idx_;
}
inline void BeamGetPublicKey::set_kid_sub_idx(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  kid_sub_idx_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetPublicKey.kid_sub_idx)
}

// optional bool show_display = 3;
inline bool BeamGetPublicKey::has_show_display() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamGetPublicKey::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BeamGetPublicKey::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetPublicKey.show_display)
  return show_display_;
}
inline void BeamGetPublicKey::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetPublicKey.show_display)
}

// -------------------------------------------------------------------

// BeamGetOwnerKey

// optional bool show_display = 1;
inline bool BeamGetOwnerKey::has_show_display() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGetOwnerKey::clear_show_display() {
  show_display_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool BeamGetOwnerKey::show_display() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGetOwnerKey.show_display)
  return show_display_;
}
inline void BeamGetOwnerKey::set_show_display(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_display_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamGetOwnerKey.show_display)
}

// -------------------------------------------------------------------

// BeamOwnerKey

// optional bytes key = 1;
inline bool BeamOwnerKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamOwnerKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamOwnerKey::key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamOwnerKey.key)
  return key_.GetNoArena();
}
inline void BeamOwnerKey::set_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamOwnerKey.key)
}
#if LANG_CXX11
inline void BeamOwnerKey::set_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamOwnerKey.key)
}
#endif
inline void BeamOwnerKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamOwnerKey.key)
}
inline void BeamOwnerKey::set_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamOwnerKey.key)
}
inline ::std::string* BeamOwnerKey::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamOwnerKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamOwnerKey::release_key() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamOwnerKey.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamOwnerKey::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamOwnerKey.key)
}

// -------------------------------------------------------------------

// BeamGenerateRangeproof

// optional .hw.trezor.messages.beam.BeamCoinID cid = 1;
inline bool BeamGenerateRangeproof::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamGenerateRangeproof::clear_cid() {
  if (cid_ != nullptr) cid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamCoinID& BeamGenerateRangeproof::cid() const {
  const ::hw::trezor::messages::beam::BeamCoinID* p = cid_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateRangeproof.cid)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamCoinID*>(
      &::hw::trezor::messages::beam::_BeamCoinID_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamGenerateRangeproof::release_cid() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamGenerateRangeproof.cid)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamCoinID* temp = cid_;
  cid_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamGenerateRangeproof::mutable_cid() {
  _has_bits_[0] |= 0x00000001u;
  if (cid_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamCoinID>(GetArenaNoVirtual());
    cid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamGenerateRangeproof.cid)
  return cid_;
}
inline void BeamGenerateRangeproof::set_allocated_cid(::hw::trezor::messages::beam::BeamCoinID* cid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cid_;
  }
  if (cid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cid_ = cid;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamGenerateRangeproof.cid)
}

// optional .hw.trezor.messages.beam.BeamECCPoint pt0 = 2;
inline bool BeamGenerateRangeproof::has_pt0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamGenerateRangeproof::clear_pt0() {
  if (pt0_ != nullptr) pt0_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamGenerateRangeproof::pt0() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = pt0_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateRangeproof.pt0)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamGenerateRangeproof::release_pt0() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamGenerateRangeproof.pt0)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = pt0_;
  pt0_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamGenerateRangeproof::mutable_pt0() {
  _has_bits_[0] |= 0x00000002u;
  if (pt0_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    pt0_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamGenerateRangeproof.pt0)
  return pt0_;
}
inline void BeamGenerateRangeproof::set_allocated_pt0(::hw::trezor::messages::beam::BeamECCPoint* pt0) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pt0_;
  }
  if (pt0) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pt0 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt0, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pt0_ = pt0;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamGenerateRangeproof.pt0)
}

// optional .hw.trezor.messages.beam.BeamECCPoint pt1 = 3;
inline bool BeamGenerateRangeproof::has_pt1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamGenerateRangeproof::clear_pt1() {
  if (pt1_ != nullptr) pt1_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamGenerateRangeproof::pt1() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = pt1_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamGenerateRangeproof.pt1)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamGenerateRangeproof::release_pt1() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamGenerateRangeproof.pt1)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = pt1_;
  pt1_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamGenerateRangeproof::mutable_pt1() {
  _has_bits_[0] |= 0x00000004u;
  if (pt1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    pt1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamGenerateRangeproof.pt1)
  return pt1_;
}
inline void BeamGenerateRangeproof::set_allocated_pt1(::hw::trezor::messages::beam::BeamECCPoint* pt1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pt1_;
  }
  if (pt1) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pt1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pt1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pt1_ = pt1;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamGenerateRangeproof.pt1)
}

// -------------------------------------------------------------------

// BeamRangeproofData

// optional bytes data_taux = 1;
inline bool BeamRangeproofData::has_data_taux() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamRangeproofData::clear_data_taux() {
  data_taux_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamRangeproofData::data_taux() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
  return data_taux_.GetNoArena();
}
inline void BeamRangeproofData::set_data_taux(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_taux_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
}
#if LANG_CXX11
inline void BeamRangeproofData::set_data_taux(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_taux_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
}
#endif
inline void BeamRangeproofData::set_data_taux(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_taux_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
}
inline void BeamRangeproofData::set_data_taux(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_taux_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
}
inline ::std::string* BeamRangeproofData::mutable_data_taux() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
  return data_taux_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamRangeproofData::release_data_taux() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
  if (!has_data_taux()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_taux_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamRangeproofData::set_allocated_data_taux(::std::string* data_taux) {
  if (data_taux != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_taux_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_taux);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamRangeproofData.data_taux)
}

// optional bool is_successful = 2;
inline bool BeamRangeproofData::has_is_successful() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamRangeproofData::clear_is_successful() {
  is_successful_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool BeamRangeproofData::is_successful() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamRangeproofData.is_successful)
  return is_successful_;
}
inline void BeamRangeproofData::set_is_successful(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_successful_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamRangeproofData.is_successful)
}

// -------------------------------------------------------------------

// BeamSignedTransaction

// optional bytes signature = 1;
inline bool BeamSignedTransaction::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignedTransaction::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignedTransaction::signature() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignedTransaction.signature)
  return signature_.GetNoArena();
}
inline void BeamSignedTransaction::set_signature(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignedTransaction.signature)
}
#if LANG_CXX11
inline void BeamSignedTransaction::set_signature(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignedTransaction.signature)
}
#endif
inline void BeamSignedTransaction::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignedTransaction.signature)
}
inline void BeamSignedTransaction::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignedTransaction.signature)
}
inline ::std::string* BeamSignedTransaction::mutable_signature() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignedTransaction.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignedTransaction::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignedTransaction.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignedTransaction::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignedTransaction.signature)
}

// -------------------------------------------------------------------

// BeamSignTransaction_BeamKernelParametersOld

// optional uint64 fee = 1;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_fee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 BeamSignTransaction_BeamKernelParametersOld::fee() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.fee)
  return fee_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_fee(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  fee_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.fee)
}

// optional .hw.trezor.messages.beam.BeamECCPoint commitment = 2;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_commitment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_commitment() {
  if (commitment_ != nullptr) commitment_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamSignTransaction_BeamKernelParametersOld::commitment() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = commitment_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.commitment)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::release_commitment() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.commitment)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = commitment_;
  commitment_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::mutable_commitment() {
  _has_bits_[0] |= 0x00000002u;
  if (commitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    commitment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.commitment)
  return commitment_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_allocated_commitment(::hw::trezor::messages::beam::BeamECCPoint* commitment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commitment_;
  }
  if (commitment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commitment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commitment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commitment_ = commitment;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.commitment)
}

// optional uint64 min_height = 4;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_min_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_min_height() {
  min_height_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 BeamSignTransaction_BeamKernelParametersOld::min_height() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.min_height)
  return min_height_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_min_height(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  min_height_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.min_height)
}

// optional uint64 max_height = 5;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_max_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_max_height() {
  max_height_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::google::protobuf::uint64 BeamSignTransaction_BeamKernelParametersOld::max_height() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.max_height)
  return max_height_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_max_height(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  max_height_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.max_height)
}

// optional sint64 asset_emission = 6;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_asset_emission() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_asset_emission() {
  asset_emission_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::google::protobuf::int64 BeamSignTransaction_BeamKernelParametersOld::asset_emission() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.asset_emission)
  return asset_emission_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_asset_emission(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  asset_emission_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.asset_emission)
}

// optional bytes hash_lock = 7;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_hash_lock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_hash_lock() {
  hash_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignTransaction_BeamKernelParametersOld::hash_lock() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
  return hash_lock_.GetNoArena();
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_hash_lock(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
}
#if LANG_CXX11
inline void BeamSignTransaction_BeamKernelParametersOld::set_hash_lock(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hash_lock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
}
#endif
inline void BeamSignTransaction_BeamKernelParametersOld::set_hash_lock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hash_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_hash_lock(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hash_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
}
inline ::std::string* BeamSignTransaction_BeamKernelParametersOld::mutable_hash_lock() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
  return hash_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignTransaction_BeamKernelParametersOld::release_hash_lock() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
  if (!has_hash_lock()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hash_lock_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_allocated_hash_lock(::std::string* hash_lock) {
  if (hash_lock != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hash_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_lock);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.hash_lock)
}

// optional .hw.trezor.messages.beam.BeamECCPoint multisig_nonce = 8;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_multisig_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_multisig_nonce() {
  if (multisig_nonce_ != nullptr) multisig_nonce_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamSignTransaction_BeamKernelParametersOld::multisig_nonce() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = multisig_nonce_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_nonce)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::release_multisig_nonce() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_nonce)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = multisig_nonce_;
  multisig_nonce_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::mutable_multisig_nonce() {
  _has_bits_[0] |= 0x00000004u;
  if (multisig_nonce_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    multisig_nonce_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_nonce)
  return multisig_nonce_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_allocated_multisig_nonce(::hw::trezor::messages::beam::BeamECCPoint* multisig_nonce) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multisig_nonce_;
  }
  if (multisig_nonce) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multisig_nonce = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multisig_nonce, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  multisig_nonce_ = multisig_nonce;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_nonce)
}

// optional .hw.trezor.messages.beam.BeamECCPoint multisig_excess = 9;
inline bool BeamSignTransaction_BeamKernelParametersOld::has_multisig_excess() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamSignTransaction_BeamKernelParametersOld::clear_multisig_excess() {
  if (multisig_excess_ != nullptr) multisig_excess_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamSignTransaction_BeamKernelParametersOld::multisig_excess() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = multisig_excess_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_excess)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::release_multisig_excess() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_excess)
  _has_bits_[0] &= ~0x00000008u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = multisig_excess_;
  multisig_excess_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamSignTransaction_BeamKernelParametersOld::mutable_multisig_excess() {
  _has_bits_[0] |= 0x00000008u;
  if (multisig_excess_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    multisig_excess_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_excess)
  return multisig_excess_;
}
inline void BeamSignTransaction_BeamKernelParametersOld::set_allocated_multisig_excess(::hw::trezor::messages::beam::BeamECCPoint* multisig_excess) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multisig_excess_;
  }
  if (multisig_excess) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multisig_excess = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multisig_excess, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  multisig_excess_ = multisig_excess;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld.multisig_excess)
}

// -------------------------------------------------------------------

// BeamSignTransaction

// repeated .hw.trezor.messages.beam.BeamKeyIDV inputs = 1;
inline int BeamSignTransaction::inputs_size() const {
  return inputs_.size();
}
inline void BeamSignTransaction::clear_inputs() {
  inputs_.Clear();
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamSignTransaction::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >*
BeamSignTransaction::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamSignTransaction.inputs)
  return &inputs_;
}
inline const ::hw::trezor::messages::beam::BeamKeyIDV& BeamSignTransaction::inputs(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.inputs)
  return inputs_.Get(index);
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamSignTransaction::add_inputs() {
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamSignTransaction.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >&
BeamSignTransaction::inputs() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamSignTransaction.inputs)
  return inputs_;
}

// optional bytes offset_sk = 2;
inline bool BeamSignTransaction::has_offset_sk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransaction::clear_offset_sk() {
  offset_sk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignTransaction::offset_sk() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
  return offset_sk_.GetNoArena();
}
inline void BeamSignTransaction::set_offset_sk(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
}
#if LANG_CXX11
inline void BeamSignTransaction::set_offset_sk(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
}
#endif
inline void BeamSignTransaction::set_offset_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
}
inline void BeamSignTransaction::set_offset_sk(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
}
inline ::std::string* BeamSignTransaction::mutable_offset_sk() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
  return offset_sk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignTransaction::release_offset_sk() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
  if (!has_offset_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return offset_sk_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignTransaction::set_allocated_offset_sk(::std::string* offset_sk) {
  if (offset_sk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offset_sk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offset_sk);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.offset_sk)
}

// repeated .hw.trezor.messages.beam.BeamKeyIDV outputs = 3;
inline int BeamSignTransaction::outputs_size() const {
  return outputs_.size();
}
inline void BeamSignTransaction::clear_outputs() {
  outputs_.Clear();
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamSignTransaction::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.outputs)
  return outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >*
BeamSignTransaction::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamSignTransaction.outputs)
  return &outputs_;
}
inline const ::hw::trezor::messages::beam::BeamKeyIDV& BeamSignTransaction::outputs(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.outputs)
  return outputs_.Get(index);
}
inline ::hw::trezor::messages::beam::BeamKeyIDV* BeamSignTransaction::add_outputs() {
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamSignTransaction.outputs)
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamKeyIDV >&
BeamSignTransaction::outputs() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamSignTransaction.outputs)
  return outputs_;
}

// optional uint32 nonce_slot = 4;
inline bool BeamSignTransaction::has_nonce_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignTransaction::clear_nonce_slot() {
  nonce_slot_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 BeamSignTransaction::nonce_slot() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.nonce_slot)
  return nonce_slot_;
}
inline void BeamSignTransaction::set_nonce_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nonce_slot_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransaction.nonce_slot)
}

// optional .hw.trezor.messages.beam.BeamSignTransaction.BeamKernelParametersOld kernel_params = 5;
inline bool BeamSignTransaction::has_kernel_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignTransaction::clear_kernel_params() {
  if (kernel_params_ != nullptr) kernel_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld& BeamSignTransaction::kernel_params() const {
  const ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* p = kernel_params_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransaction.kernel_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld*>(
      &::hw::trezor::messages::beam::_BeamSignTransaction_BeamKernelParametersOld_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* BeamSignTransaction::release_kernel_params() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransaction.kernel_params)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* temp = kernel_params_;
  kernel_params_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* BeamSignTransaction::mutable_kernel_params() {
  _has_bits_[0] |= 0x00000002u;
  if (kernel_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld>(GetArenaNoVirtual());
    kernel_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransaction.kernel_params)
  return kernel_params_;
}
inline void BeamSignTransaction::set_allocated_kernel_params(::hw::trezor::messages::beam::BeamSignTransaction_BeamKernelParametersOld* kernel_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kernel_params_;
  }
  if (kernel_params) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kernel_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kernel_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kernel_params_ = kernel_params;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransaction.kernel_params)
}

// -------------------------------------------------------------------

// BeamTxCommon_BeamKernelParameters

// optional uint64 fee = 1;
inline bool BeamTxCommon_BeamKernelParameters::has_fee() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamTxCommon_BeamKernelParameters::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 BeamTxCommon_BeamKernelParameters::fee() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.fee)
  return fee_;
}
inline void BeamTxCommon_BeamKernelParameters::set_fee(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  fee_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.fee)
}

// optional uint64 min_height = 2;
inline bool BeamTxCommon_BeamKernelParameters::has_min_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamTxCommon_BeamKernelParameters::clear_min_height() {
  min_height_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint64 BeamTxCommon_BeamKernelParameters::min_height() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.min_height)
  return min_height_;
}
inline void BeamTxCommon_BeamKernelParameters::set_min_height(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  min_height_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.min_height)
}

// optional uint64 max_height = 3;
inline bool BeamTxCommon_BeamKernelParameters::has_max_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeamTxCommon_BeamKernelParameters::clear_max_height() {
  max_height_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint64 BeamTxCommon_BeamKernelParameters::max_height() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.max_height)
  return max_height_;
}
inline void BeamTxCommon_BeamKernelParameters::set_max_height(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  max_height_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.max_height)
}

// optional .hw.trezor.messages.beam.BeamECCPoint commitment = 4;
inline bool BeamTxCommon_BeamKernelParameters::has_commitment() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamTxCommon_BeamKernelParameters::clear_commitment() {
  if (commitment_ != nullptr) commitment_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamECCPoint& BeamTxCommon_BeamKernelParameters::commitment() const {
  const ::hw::trezor::messages::beam::BeamECCPoint* p = commitment_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.commitment)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamECCPoint*>(
      &::hw::trezor::messages::beam::_BeamECCPoint_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamTxCommon_BeamKernelParameters::release_commitment() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.commitment)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamECCPoint* temp = commitment_;
  commitment_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamECCPoint* BeamTxCommon_BeamKernelParameters::mutable_commitment() {
  _has_bits_[0] |= 0x00000001u;
  if (commitment_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamECCPoint>(GetArenaNoVirtual());
    commitment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.commitment)
  return commitment_;
}
inline void BeamTxCommon_BeamKernelParameters::set_allocated_commitment(::hw::trezor::messages::beam::BeamECCPoint* commitment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commitment_;
  }
  if (commitment) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commitment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commitment, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  commitment_ = commitment;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.commitment)
}

// optional .hw.trezor.messages.beam.BeamSignature signature = 5;
inline bool BeamTxCommon_BeamKernelParameters::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamTxCommon_BeamKernelParameters::clear_signature() {
  if (signature_ != nullptr) signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamTxCommon_BeamKernelParameters::signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamTxCommon_BeamKernelParameters::release_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignature* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamTxCommon_BeamKernelParameters::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.signature)
  return signature_;
}
inline void BeamTxCommon_BeamKernelParameters::set_allocated_signature(::hw::trezor::messages::beam::BeamSignature* signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters.signature)
}

// -------------------------------------------------------------------

// BeamTxCommon

// repeated .hw.trezor.messages.beam.BeamCoinID inputs = 1;
inline int BeamTxCommon::inputs_size() const {
  return inputs_.size();
}
inline void BeamTxCommon::clear_inputs() {
  inputs_.Clear();
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamTxCommon::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.inputs)
  return inputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >*
BeamTxCommon::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamTxCommon.inputs)
  return &inputs_;
}
inline const ::hw::trezor::messages::beam::BeamCoinID& BeamTxCommon::inputs(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.inputs)
  return inputs_.Get(index);
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamTxCommon::add_inputs() {
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamTxCommon.inputs)
  return inputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >&
BeamTxCommon::inputs() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamTxCommon.inputs)
  return inputs_;
}

// optional bytes offset_sk = 2;
inline bool BeamTxCommon::has_offset_sk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamTxCommon::clear_offset_sk() {
  offset_sk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamTxCommon::offset_sk() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
  return offset_sk_.GetNoArena();
}
inline void BeamTxCommon::set_offset_sk(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
}
#if LANG_CXX11
inline void BeamTxCommon::set_offset_sk(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
}
#endif
inline void BeamTxCommon::set_offset_sk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
}
inline void BeamTxCommon::set_offset_sk(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  offset_sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
}
inline ::std::string* BeamTxCommon::mutable_offset_sk() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
  return offset_sk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamTxCommon::release_offset_sk() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
  if (!has_offset_sk()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return offset_sk_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamTxCommon::set_allocated_offset_sk(::std::string* offset_sk) {
  if (offset_sk != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  offset_sk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), offset_sk);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxCommon.offset_sk)
}

// repeated .hw.trezor.messages.beam.BeamCoinID outputs = 3;
inline int BeamTxCommon::outputs_size() const {
  return outputs_.size();
}
inline void BeamTxCommon::clear_outputs() {
  outputs_.Clear();
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamTxCommon::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.outputs)
  return outputs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >*
BeamTxCommon::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:hw.trezor.messages.beam.BeamTxCommon.outputs)
  return &outputs_;
}
inline const ::hw::trezor::messages::beam::BeamCoinID& BeamTxCommon::outputs(int index) const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.outputs)
  return outputs_.Get(index);
}
inline ::hw::trezor::messages::beam::BeamCoinID* BeamTxCommon::add_outputs() {
  // @@protoc_insertion_point(field_add:hw.trezor.messages.beam.BeamTxCommon.outputs)
  return outputs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hw::trezor::messages::beam::BeamCoinID >&
BeamTxCommon::outputs() const {
  // @@protoc_insertion_point(field_list:hw.trezor.messages.beam.BeamTxCommon.outputs)
  return outputs_;
}

// optional .hw.trezor.messages.beam.BeamTxCommon.BeamKernelParameters kernel_params = 4;
inline bool BeamTxCommon::has_kernel_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamTxCommon::clear_kernel_params() {
  if (kernel_params_ != nullptr) kernel_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters& BeamTxCommon::kernel_params() const {
  const ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* p = kernel_params_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxCommon.kernel_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters*>(
      &::hw::trezor::messages::beam::_BeamTxCommon_BeamKernelParameters_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* BeamTxCommon::release_kernel_params() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxCommon.kernel_params)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* temp = kernel_params_;
  kernel_params_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* BeamTxCommon::mutable_kernel_params() {
  _has_bits_[0] |= 0x00000002u;
  if (kernel_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters>(GetArenaNoVirtual());
    kernel_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxCommon.kernel_params)
  return kernel_params_;
}
inline void BeamTxCommon::set_allocated_kernel_params(::hw::trezor::messages::beam::BeamTxCommon_BeamKernelParameters* kernel_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kernel_params_;
  }
  if (kernel_params) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kernel_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kernel_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  kernel_params_ = kernel_params;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxCommon.kernel_params)
}

// -------------------------------------------------------------------

// BeamTxMutualInfo

// optional bytes peer = 1;
inline bool BeamTxMutualInfo::has_peer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamTxMutualInfo::clear_peer() {
  peer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamTxMutualInfo::peer() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
  return peer_.GetNoArena();
}
inline void BeamTxMutualInfo::set_peer(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
}
#if LANG_CXX11
inline void BeamTxMutualInfo::set_peer(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  peer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
}
#endif
inline void BeamTxMutualInfo::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
}
inline void BeamTxMutualInfo::set_peer(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
}
inline ::std::string* BeamTxMutualInfo::mutable_peer() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
  return peer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamTxMutualInfo::release_peer() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
  if (!has_peer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return peer_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamTxMutualInfo::set_allocated_peer(::std::string* peer) {
  if (peer != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxMutualInfo.peer)
}

// optional uint64 wallet_identity_key = 2;
inline bool BeamTxMutualInfo::has_wallet_identity_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamTxMutualInfo::clear_wallet_identity_key() {
  wallet_identity_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint64 BeamTxMutualInfo::wallet_identity_key() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxMutualInfo.wallet_identity_key)
  return wallet_identity_key_;
}
inline void BeamTxMutualInfo::set_wallet_identity_key(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  wallet_identity_key_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamTxMutualInfo.wallet_identity_key)
}

// optional .hw.trezor.messages.beam.BeamSignature payment_proof_signature = 3;
inline bool BeamTxMutualInfo::has_payment_proof_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamTxMutualInfo::clear_payment_proof_signature() {
  if (payment_proof_signature_ != nullptr) payment_proof_signature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamSignature& BeamTxMutualInfo::payment_proof_signature() const {
  const ::hw::trezor::messages::beam::BeamSignature* p = payment_proof_signature_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamTxMutualInfo.payment_proof_signature)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignature*>(
      &::hw::trezor::messages::beam::_BeamSignature_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamTxMutualInfo::release_payment_proof_signature() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamTxMutualInfo.payment_proof_signature)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamSignature* temp = payment_proof_signature_;
  payment_proof_signature_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignature* BeamTxMutualInfo::mutable_payment_proof_signature() {
  _has_bits_[0] |= 0x00000002u;
  if (payment_proof_signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignature>(GetArenaNoVirtual());
    payment_proof_signature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamTxMutualInfo.payment_proof_signature)
  return payment_proof_signature_;
}
inline void BeamTxMutualInfo::set_allocated_payment_proof_signature(::hw::trezor::messages::beam::BeamSignature* payment_proof_signature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_proof_signature_;
  }
  if (payment_proof_signature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_proof_signature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payment_proof_signature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  payment_proof_signature_ = payment_proof_signature;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamTxMutualInfo.payment_proof_signature)
}

// -------------------------------------------------------------------

// BeamSignTransactionSend

// optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
inline bool BeamSignTransactionSend::has_tx_common() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignTransactionSend::clear_tx_common() {
  if (tx_common_ != nullptr) tx_common_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamTxCommon& BeamSignTransactionSend::tx_common() const {
  const ::hw::trezor::messages::beam::BeamTxCommon* p = tx_common_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSend.tx_common)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxCommon*>(
      &::hw::trezor::messages::beam::_BeamTxCommon_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionSend::release_tx_common() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSend.tx_common)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamTxCommon* temp = tx_common_;
  tx_common_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionSend::mutable_tx_common() {
  _has_bits_[0] |= 0x00000002u;
  if (tx_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon>(GetArenaNoVirtual());
    tx_common_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSend.tx_common)
  return tx_common_;
}
inline void BeamSignTransactionSend::set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_common_;
  }
  if (tx_common) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_common = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tx_common_ = tx_common;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSend.tx_common)
}

// optional .hw.trezor.messages.beam.BeamTxMutualInfo tx_mutual_info = 2;
inline bool BeamSignTransactionSend::has_tx_mutual_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeamSignTransactionSend::clear_tx_mutual_info() {
  if (tx_mutual_info_ != nullptr) tx_mutual_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hw::trezor::messages::beam::BeamTxMutualInfo& BeamSignTransactionSend::tx_mutual_info() const {
  const ::hw::trezor::messages::beam::BeamTxMutualInfo* p = tx_mutual_info_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSend.tx_mutual_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxMutualInfo*>(
      &::hw::trezor::messages::beam::_BeamTxMutualInfo_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxMutualInfo* BeamSignTransactionSend::release_tx_mutual_info() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSend.tx_mutual_info)
  _has_bits_[0] &= ~0x00000004u;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* temp = tx_mutual_info_;
  tx_mutual_info_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxMutualInfo* BeamSignTransactionSend::mutable_tx_mutual_info() {
  _has_bits_[0] |= 0x00000004u;
  if (tx_mutual_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxMutualInfo>(GetArenaNoVirtual());
    tx_mutual_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSend.tx_mutual_info)
  return tx_mutual_info_;
}
inline void BeamSignTransactionSend::set_allocated_tx_mutual_info(::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_mutual_info_;
  }
  if (tx_mutual_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_mutual_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_mutual_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tx_mutual_info_ = tx_mutual_info;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSend.tx_mutual_info)
}

// optional uint32 nonce_slot = 3;
inline bool BeamSignTransactionSend::has_nonce_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeamSignTransactionSend::clear_nonce_slot() {
  nonce_slot_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 BeamSignTransactionSend::nonce_slot() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSend.nonce_slot)
  return nonce_slot_;
}
inline void BeamSignTransactionSend::set_nonce_slot(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  nonce_slot_ = value;
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransactionSend.nonce_slot)
}

// optional bytes user_agreement = 4;
inline bool BeamSignTransactionSend::has_user_agreement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionSend::clear_user_agreement() {
  user_agreement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BeamSignTransactionSend::user_agreement() const {
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
  return user_agreement_.GetNoArena();
}
inline void BeamSignTransactionSend::set_user_agreement(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_agreement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
}
#if LANG_CXX11
inline void BeamSignTransactionSend::set_user_agreement(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_agreement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
}
#endif
inline void BeamSignTransactionSend::set_user_agreement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_agreement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
}
inline void BeamSignTransactionSend::set_user_agreement(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_agreement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
}
inline ::std::string* BeamSignTransactionSend::mutable_user_agreement() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
  return user_agreement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeamSignTransactionSend::release_user_agreement() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
  if (!has_user_agreement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_agreement_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeamSignTransactionSend::set_allocated_user_agreement(::std::string* user_agreement) {
  if (user_agreement != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_agreement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_agreement);
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSend.user_agreement)
}

// -------------------------------------------------------------------

// BeamSignTransactionSendResult

// optional .hw.trezor.messages.beam.BeamSignTransactionSend tx = 1;
inline bool BeamSignTransactionSendResult::has_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionSendResult::clear_tx() {
  if (tx_ != nullptr) tx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignTransactionSend& BeamSignTransactionSendResult::tx() const {
  const ::hw::trezor::messages::beam::BeamSignTransactionSend* p = tx_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSendResult.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignTransactionSend*>(
      &::hw::trezor::messages::beam::_BeamSignTransactionSend_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignTransactionSend* BeamSignTransactionSendResult::release_tx() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSendResult.tx)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignTransactionSend* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignTransactionSend* BeamSignTransactionSendResult::mutable_tx() {
  _has_bits_[0] |= 0x00000001u;
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSend>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSendResult.tx)
  return tx_;
}
inline void BeamSignTransactionSendResult::set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionSend* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSendResult.tx)
}

// -------------------------------------------------------------------

// BeamSignTransactionReceive

// optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
inline bool BeamSignTransactionReceive::has_tx_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionReceive::clear_tx_common() {
  if (tx_common_ != nullptr) tx_common_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamTxCommon& BeamSignTransactionReceive::tx_common() const {
  const ::hw::trezor::messages::beam::BeamTxCommon* p = tx_common_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_common)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxCommon*>(
      &::hw::trezor::messages::beam::_BeamTxCommon_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionReceive::release_tx_common() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_common)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamTxCommon* temp = tx_common_;
  tx_common_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionReceive::mutable_tx_common() {
  _has_bits_[0] |= 0x00000001u;
  if (tx_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon>(GetArenaNoVirtual());
    tx_common_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_common)
  return tx_common_;
}
inline void BeamSignTransactionReceive::set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_common_;
  }
  if (tx_common) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_common = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_common_ = tx_common;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_common)
}

// optional .hw.trezor.messages.beam.BeamTxMutualInfo tx_mutual_info = 2;
inline bool BeamSignTransactionReceive::has_tx_mutual_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamSignTransactionReceive::clear_tx_mutual_info() {
  if (tx_mutual_info_ != nullptr) tx_mutual_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hw::trezor::messages::beam::BeamTxMutualInfo& BeamSignTransactionReceive::tx_mutual_info() const {
  const ::hw::trezor::messages::beam::BeamTxMutualInfo* p = tx_mutual_info_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_mutual_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxMutualInfo*>(
      &::hw::trezor::messages::beam::_BeamTxMutualInfo_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxMutualInfo* BeamSignTransactionReceive::release_tx_mutual_info() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_mutual_info)
  _has_bits_[0] &= ~0x00000002u;
  ::hw::trezor::messages::beam::BeamTxMutualInfo* temp = tx_mutual_info_;
  tx_mutual_info_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxMutualInfo* BeamSignTransactionReceive::mutable_tx_mutual_info() {
  _has_bits_[0] |= 0x00000002u;
  if (tx_mutual_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxMutualInfo>(GetArenaNoVirtual());
    tx_mutual_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_mutual_info)
  return tx_mutual_info_;
}
inline void BeamSignTransactionReceive::set_allocated_tx_mutual_info(::hw::trezor::messages::beam::BeamTxMutualInfo* tx_mutual_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_mutual_info_;
  }
  if (tx_mutual_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_mutual_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_mutual_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tx_mutual_info_ = tx_mutual_info;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionReceive.tx_mutual_info)
}

// -------------------------------------------------------------------

// BeamSignTransactionReceiveResult

// optional .hw.trezor.messages.beam.BeamSignTransactionReceive tx = 1;
inline bool BeamSignTransactionReceiveResult::has_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionReceiveResult::clear_tx() {
  if (tx_ != nullptr) tx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignTransactionReceive& BeamSignTransactionReceiveResult::tx() const {
  const ::hw::trezor::messages::beam::BeamSignTransactionReceive* p = tx_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionReceiveResult.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignTransactionReceive*>(
      &::hw::trezor::messages::beam::_BeamSignTransactionReceive_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignTransactionReceive* BeamSignTransactionReceiveResult::release_tx() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionReceiveResult.tx)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignTransactionReceive* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignTransactionReceive* BeamSignTransactionReceiveResult::mutable_tx() {
  _has_bits_[0] |= 0x00000001u;
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionReceive>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionReceiveResult.tx)
  return tx_;
}
inline void BeamSignTransactionReceiveResult::set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionReceive* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionReceiveResult.tx)
}

// -------------------------------------------------------------------

// BeamSignTransactionSplit

// optional .hw.trezor.messages.beam.BeamTxCommon tx_common = 1;
inline bool BeamSignTransactionSplit::has_tx_common() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionSplit::clear_tx_common() {
  if (tx_common_ != nullptr) tx_common_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamTxCommon& BeamSignTransactionSplit::tx_common() const {
  const ::hw::trezor::messages::beam::BeamTxCommon* p = tx_common_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSplit.tx_common)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamTxCommon*>(
      &::hw::trezor::messages::beam::_BeamTxCommon_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionSplit::release_tx_common() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSplit.tx_common)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamTxCommon* temp = tx_common_;
  tx_common_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamTxCommon* BeamSignTransactionSplit::mutable_tx_common() {
  _has_bits_[0] |= 0x00000001u;
  if (tx_common_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamTxCommon>(GetArenaNoVirtual());
    tx_common_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSplit.tx_common)
  return tx_common_;
}
inline void BeamSignTransactionSplit::set_allocated_tx_common(::hw::trezor::messages::beam::BeamTxCommon* tx_common) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_common_;
  }
  if (tx_common) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_common = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx_common, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_common_ = tx_common;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSplit.tx_common)
}

// -------------------------------------------------------------------

// BeamSignTransactionSplitResult

// optional .hw.trezor.messages.beam.BeamSignTransactionSplit tx = 1;
inline bool BeamSignTransactionSplitResult::has_tx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamSignTransactionSplitResult::clear_tx() {
  if (tx_ != nullptr) tx_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hw::trezor::messages::beam::BeamSignTransactionSplit& BeamSignTransactionSplitResult::tx() const {
  const ::hw::trezor::messages::beam::BeamSignTransactionSplit* p = tx_;
  // @@protoc_insertion_point(field_get:hw.trezor.messages.beam.BeamSignTransactionSplitResult.tx)
  return p != nullptr ? *p : *reinterpret_cast<const ::hw::trezor::messages::beam::BeamSignTransactionSplit*>(
      &::hw::trezor::messages::beam::_BeamSignTransactionSplit_default_instance_);
}
inline ::hw::trezor::messages::beam::BeamSignTransactionSplit* BeamSignTransactionSplitResult::release_tx() {
  // @@protoc_insertion_point(field_release:hw.trezor.messages.beam.BeamSignTransactionSplitResult.tx)
  _has_bits_[0] &= ~0x00000001u;
  ::hw::trezor::messages::beam::BeamSignTransactionSplit* temp = tx_;
  tx_ = nullptr;
  return temp;
}
inline ::hw::trezor::messages::beam::BeamSignTransactionSplit* BeamSignTransactionSplitResult::mutable_tx() {
  _has_bits_[0] |= 0x00000001u;
  if (tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::hw::trezor::messages::beam::BeamSignTransactionSplit>(GetArenaNoVirtual());
    tx_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hw.trezor.messages.beam.BeamSignTransactionSplitResult.tx)
  return tx_;
}
inline void BeamSignTransactionSplitResult::set_allocated_tx(::hw::trezor::messages::beam::BeamSignTransactionSplit* tx) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_;
  }
  if (tx) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:hw.trezor.messages.beam.BeamSignTransactionSplitResult.tx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace beam
}  // namespace messages
}  // namespace trezor
}  // namespace hw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_messages_2dbeam_2eproto
